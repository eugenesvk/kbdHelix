# chezmoi:template:left-delimiter="#◊" right-delimiter="◊"
#◊/* 'key'	= 'command'	# Icon Comment 「default key for this command」	「default command for this key」 */ -◊
[keys.insert] #ⓘ
  ';'	= {j='normal_mode' }	# Maps `;k` to exit insert mode !!!flashes dialog during typing
  #ⓘ Test ——————————————————————————————————————————————————————————————————————
    # 'Escape'	= 'normal_mode'	# Switch to normal mode	「Escape」
    # 'A-x'   	= 'normal_mode'	# Maps Alt-X to enter normal mode
  #ⓘ Free ——————————————————————————————————————————————————————————————————————
    'C-p'  	= 'no_op'	# move to previous line  	「   」	「move_line_up」
    'A-b'  	= 'no_op'	#                        	「   」	「move_prev_word_end」
    'C-u'  	= 'no_op'	#                        	「   」	「kill_to_line_start」
    # 'C-a'	= ''     	# ???useful vs selections	「C-a」	「goto_line_start」

  #ⓘ   	Compat with non-modal editors        	 
  'C-o'	= 'file_picker'                      	# 🗁 Open file picker       	「☰␠  f」	「jump_backward」
  'C-O'	= 'file_picker_in_current_directory' 	# 🗁 Open file picker@curdir	「☰␠⇧ f」	「」
  'C-s'	= ['commit_undo_checkpoint',':write']	# 💾 save file              	「  ⎈s」	「commit_undo_checkpoint」
  'C-n'	= ':new'                             	# 🗋 new buffer             	「 ⎈n」 	「」

  #ⓘ   	Copy                                	 
  'A-c'	= 'yank'                            	# 🗐▋ Copy main selection <i class='fa fa-copy'></i>                                    	「  c」  	「change_selection」
  'C-c'	= 'yank_main_selection_to_clipboard'	# 📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>         	「☰␠,⇧y」	「toggle_comments」
  'A-C'	= 'yank_joined_to_clipboard'        	# ∀▋ Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i> ∀❚ ∀▋	「☰␠ y」  	「」

  #ⓘ Shell 	                 	 
    'A-|'  	= 'shell_pipe'   	# Pipe each selection through shell command, replacing with output	「⇧Ⓝ \」	「shell_pipe」
    "A-\\" 	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	Ⓝ「 ⎇\」	「」
    # 'A-|'	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「⇧Ⓝ⎇\」	「shell_pipe_to」

  #ⓘ Move ——————————————————————————————————————————————————————————————————————
    #ⓘ           	Cursor@Home
    'A-j'        	= 'move_line_down'      	# ▼                              	ⓘ「 ⎈n」 	「move_line_down」
    'A-k'        	= 'move_line_up'        	# ▲                              	ⓘ「 ⎈p」 	「move_line_up」
    'A-l'        	= 'move_char_left'      	# ◀                              	ⓘ「 ⎈b」 	「move_char_right」
    'A-;'        	= 'move_char_right'     	# ▶                              	ⓘ「 ⎈f」 	「collapse_selection」
    'A-m'        	= 'half_page_down'      	# ⤈ Move half page down          	Ⓝ「 ⎈d」 	「☰🧩」
    'A-,'        	= 'half_page_up'        	# ⤉ Move half page up            	Ⓝ「 ⎈u」 	「keep_primary_selection」
    'A-a'        	= 'extend_to_line_start'	# ⭰▋ Move     line start + select	「ⓈHome」	「append_mode」 # goto_line_start
    'A-A'        	= 'extend_to_line_end'  	# ⭲▋ Move     line end   + select	「ⓈEnd」  「insert_at_line_end」 # goto_line_end
    #ⓘ           	Compat with non-modal editors
    'C-home'     	= 'goto_file_start'            	# ⇱ line number `<n>` else file start	「  g」	「」
    'C-end'      	= 'goto_last_line'             	# ⇲ file end                         	「  e」	「」
    'C-S-tab'    	= 'goto_previous_buffer'       	# ⎗                                  	「⇧ⓖp」「」  !!!fail
    'C-tab'      	= 'goto_next_buffer'           	# ⎘                                  	「ⓖn」「」  !!!fail
    'C-pageup'   	= 'goto_previous_buffer'       	# ⎗                                  	「   」 	「」
    'C-pagedown' 	= 'goto_next_buffer'           	# ⎘                                  	「   」 	「」
    'A-pageup'   	= 'jump_backward'              	# ⎗̡                                 	「   」 	「」
    'A-pagedown' 	= 'jump_forward'               	# ⎘̡                                 	「   」 	「」
    # 'C-left'   	= 'move_prev_long_word_start'  	#                                    	「   」 	「」
    # 'C-right'  	= 'move_next_long_word_start'  	#                                    	「   」 	「」
    'S-A-left'   	= 'extend_prev_word_start'     	# ω← Extend previous word start      	「Ⓢ  b」	「」
    'S-A-right'  	= 'extend_next_word_end'       	# ω⇥ Extend next     word end        	「Ⓢ  e」	「」
    # 'S-A-right'	= 'extend_next_word_start'     	# ω→ Extend next     word start      	「Ⓢ  w」	「」
    'S-C-left'   	= 'extend_prev_long_word_start'	# W← Extend previous WORD start      	「Ⓢ ⇧b」	「」
    'S-C-right'  	= 'extend_next_long_word_start'	# W→ Extend next     WORD start      	「Ⓢ ⇧W」	「」
    # 'S-C-right'	= 'extend_next_long_word_end'  	# W⇥ Extend next    WORD end         	「Ⓢ ⇧E」	「」

    # 'C-b'	= 'move_char_left'	#	⌫c ᵡ char ←	「 ⎈b」	「move_char_left」

    #ⓘ   	File/jumplist
    'A-1'	= 'goto_previous_buffer'	# ⎗                               	「ⓖp」    	「」
    'A-2'	= 'goto_next_buffer'    	# ⎘                               	「ⓖn」    	「」
    'A-3'	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist	   Ⓝ「⎈o」	「」
    'A-4'	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist	   Ⓝ「⎈i」	「」

    #ⓘ       	Word
    'A-d'    	= 'move_prev_word_start'       	# 🢔ω  Move this word start                	   Ⓝ「 b」	「delete_word_forward」
    'A-f'    	= 'move_next_word_end'         	# ω🢖  Move this word end                  	   Ⓝ「 e」	「move_next_word_start」
    'A-D'    	= 'move_prev_long_word_start'  	# 🢔W Move   this WORD start               	  「⇧Ⓝ b」	「」
    'A-F'    	= 'move_next_long_word_end'    	# W🢖 Move   this WORD end                 	  「⇧Ⓝ e」	「」
    'C-d'    	= ['move_prev_long_word_start',	# ⤝W  Move prev WORD end                  	「⇧ b」   	「half_page_down」
             	   'extend_prev_word_start',   	#                                         	 
             	   'extend_next_word_start']   	# !!!move_prev_long_word_end missing      	 
    'C-f'    	= 'move_next_long_word_start'  	# W⤞ Move next WORD end   (this end + ␠)  	「⇧ w」	「page_down」
    # 'C-f'  	= ['collapse_selection',       	# W⤞ Move next WORD end   (this end + ␠)  	「⇧ w」	「page_down」
    #        	   'extend_next_long_word_end']	#                                         	 
    'C-left' 	= 'move_prev_long_word_start'  	# 🢔W  Move this WORD start                	   「⇧ b」	「」
    'C-right'	= 'move_next_long_word_start'  	# W⤞ Move next WORD end   (this end   + ␠)	「⇧ w」   	「」
    'A-left' 	= 'move_prev_word_end'         	# ⤝ω Move prev word end   (this start + ␠)	≝ⓘ「⎇◀」  	「move_prev_word_end」
    'A-right'	= 'move_next_word_start'       	# ω⤞ Move next word start (this end   + ␠)	≝ⓘ「⎇▶」  	「move_next_word_start」
    # 'A-d'  	= 'move_prev_word_end'         	# ⤝ω Move   prev word end (this start + ␠)	ⓘ「⎇b」   	「」
    # 'A-f'  	= 'move_next_word_start'       	# ω⤞ Move   next word start (this end + ␠)	ⓘ「⎇f」   	「」

    #ⓘ     	Line
    # 'A-G'	= 'goto_line'   	# ⮊⎯ go to line # <n> (set <n> in advance), use Ⓒ<n>⏎	「⇧Ⓝ g」	「」
    'A-G'  	= 'command_mode'	# Ⓒ Enter command mode                               	「⇧Ⓝ ;」	「」
    'A-:'  	= 'command_mode'	# Ⓒ Enter command mode                               	「⇧Ⓝ ;」	「」

    #ⓘ    	Block
    #'A->'	= 'no_op'	# 🢔¶ Move paragraph start #!!!missing	Ⓝ「⇧ [」	「indent」
    #'A-?'	= 'no_op'	# ¶🢖 Move paragraph end   #!!!missing	Ⓝ「⇧ ]」	「rsearch」

    'A-r'	= 'repeat_last_motion'	# ∞ Repeat last motion (f/t/m)	Ⓝ「 ⎇.」	「replace」

    #ⓘ   	Find
    'A-w'	= 'find_next_char'  	# 🔎   Find       next     char           	Ⓝ「  f」   	「move_next_word_start」     	<i class='mss mss-Search-3'></i>
    'A-W'	= 'find_prev_char'  	# 🔍   Find       previous char           	「⇧Ⓝ f」   	「move_next_long_word_start」	<i class='fa fa-search'></i>
    'A-S'	= 'rsearch'         	# 🔍𝖗 for previous regex pattern          	Ⓝ「⇧ /」   	「split_selection」
    'A-s'	= 'search'          	# 🔎𝖗 for          regex pattern          	「⇧Ⓝ  /」  	「select_regex」
    'A-.'	= 'search_prev'     	# 🢔◎ ◎͔ Select previous search match     	   Ⓝ「⇧ n」	「repeat_last_change!!!」   !!! blocked by .Repeat
    'A-/'	= 'search_next'     	# ◎🢖 ◎͕ Select next     search match     	   Ⓝ「  n」	「search」
    'A-8'	= 'search_selection'	# 𝖗🢔▋ Use selection as the search pattern	   Ⓝ「⇧ 8」	「<8>」   !!! blocked by ∀*

  #ⓘ Select ——————————————————————————————————————————————————————————————————————
    'A-e'	= 'select_mode'	# Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web)	「  v」	「move_next_word_end」 <i class='fa fa-arrows'></i>

    # Compat with non-modal editors
    # 'C-a'  	= ['save_selection','select_all']	# 🖈∀▋                                                       	Ⓝ「⇧ 5」  「increment」 ???better than ⭰× × to line ⭰
    'A-down' 	= 'copy_selection_on_next_line'  	# 🠷 Copy selection onto the next     line (add cursor below)	Ⓝ「⇧ c」  「」
    'A-up'   	= 'copy_selection_on_prev_line'  	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」 	「」
    'S-left' 	= 'extend_char_left'             	#                                                           	「Ⓢh/◀」	「」
    'S-down' 	= 'extend_line_down'             	#                                                           	「Ⓢj/▼」	「」
    'S-up'   	= 'extend_line_up'               	#                                                           	「Ⓢk/▲」	「」
    'S-right'	= 'extend_char_right'            	#                                                           	「Ⓢl/▶」	「」

    'C-g'  	= 'save_selection'	# 🖈 Save the current selection to the jumplist	Ⓝ「  ⎈s」	「」
    # 'A-G'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	Ⓝ「  ⎈s」	「」


    'A-E'  	= 'extend_to_line_bounds'  	# ⎯ Extend selection to line bounds (line-wise selection)	「⇧Ⓝ  x」	「move_next_long_word_end」
    'C-e'  	= ['select_mode'           	# =ω "Extend" selection to same word ω₌ ω≡               	「   」  	「goto_line_end_newline」
      ,    	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,    	 'move_prev_word_start'    	#
      ,    	 'search_selection'        	#
      ,    	 'make_search_word_bounded'	#
      ,    	 'extend_search_next'      	#
      ,    	 'insert_mode'             	#
      ]    	                           	# = Sublime's find_under_expand
    'A-J'  	= 'extend_line'            	# ⮒ Select current line, if already selected, extend to next line	Ⓝ「  x」	「join_selections」
    # 'A-5'	= 'select_paragraph'       	# ¶▋ Select this paragraph                                       	Ⓝ「   」	「<5>」  !!!missing ∀* !!!missing command
    'A-%'  	= 'select_all'             	# ∀▋ Select entire file                                          	「⇧Ⓝ 5」	「select_all」

    'A-M'     	= 'shrink_selection'           	# ⸙− Shrink syntax tree object selection    🌳TS ⸙₋          	Ⓝ「 ⎇i」	「」
    'A-<'     	= 'expand_selection'           	# ⸙₊ Expand selection to parent syntax node 🌳TS ⸙₊          	Ⓝ「 ⎇o」	「」
    'A-N'     	= 'split_selection'            	# ䷖𝖗 on regex matches                                       	「⇧Ⓝ s」	「search_prev」
    'A-S-down'	= 'copy_selection_on_next_line'	# 🠷 Copy selection onto the next     line (add cursor below)	Ⓝ「⇧ c」	「」
    'A-S-up'  	= 'copy_selection_on_prev_line'	# 🠵 Copy selection onto the previous line (add cursor above)	Ⓝ「⇧⎇c」	「」

    "A-'"	= 'collapse_selection'	# 🢖🢔 Collapse selection onto a single cursor 	Ⓝ「  ;」	「」
    'A-K'	= 'keep_selections'   	# ᵏ𝖗 selections not matching the regex (keep)	「⇧Ⓝ k」	「keep_selections」
    'A-L'	= 'remove_selections' 	# ᵡ𝖗 selections     matching the regex       	「⇧Ⓝ⎇k」	「」

    'A-minus'	= 'trim_selections'             	# ✁Trim whitespace from the selection                    	Ⓝ「⇧ -」	「」
    'A-_'    	= 'merge_consecutive_selections'	# ⛙ Merge consecutive selections ⨝                       	「⇧⎇ -」	「trim_selections」
    # 'A-+'  	= 'dupe_selections'             	# 🗐Duplicate selection (currently nonfunctional/disabled)	「⇧Ⓝ =」	「dupe_selections」

  #ⓘ Change ——————————————————————————————————————————————————————————————————————
    # 'A-b'	= 'repeat_last_change'	# ∞ Repeat last change	「⇧Ⓝ  .」	「move_prev_word_start」  !!!missing

    'S-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	「⇧  o」 	「」
    'A-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	  「  o」	「insert_newline」
    'C-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	  「  o」	「insert_newline」
    'ret'  	=['commit_undo_checkpoint'	#  ␤ Insert new line              	 ≝ⓘ「 ⏎」	「insert_newline」
      ,    	  'insert_newline']       	# after saving an undo checkpoint

    #            	Delete
    #ⓘ           	char
    "backspace"  	= 'delete_char_backward'	# ⌫c ᵡ char ←    	≝「 ⌫」	「delete_char_backward」
    'C-l'        	= 'delete_char_backward'	# ⌫c ᵡ char ←    	「 ⎈h」	「」
    'C-;'        	= 'delete_char_forward' 	# ⌦c ᵡ char →    	「 ⎈d」	「」 !!!fails
    'A-6'        	= 'delete_char_forward' 	# ⌦ !!!missing ∀*	Ⓝ「 ⌦」	「<5>」
    'A-H'        	= 'delete_char_forward' 	# ⌦c ᵡ char →    	「⇧ ⌦」	「」
    #ⓘ           	word                    	                 	 
    #            	Compat with non-modal editors
    'A-del'      	= 'delete_word_forward'          	# ⌦ω ᵡ word →	 ⓘ「  ⎇d」	「」
    'C-del'      	= ['extend_next_long_word_end',  	# ⌦W         	「   」   	「」
                 	   'delete_selection']           	# ᵡ Word →   	 
    'A-backspace'	= 'delete_word_backward'         	# ⌫ω ᵡ word ←	≝「 ⎈w」	「」
    'C-backspace'	= ['extend_prev_long_word_start',	# ⌫W         	「   」 	「」
                 	   'delete_selection']           	# ᵡ Word ←   	 
    #            	                                 	             	 
    'C-h'        	= ['extend_prev_long_word_start',	# ⌫W         	「   」	「delete_char_backward」
                 	   'delete_selection']           	#     ᵡ Word ←
    'A-h'        	= 'delete_word_backward'         	# ⌫ω ᵡ word ←   	ⓘ「 ⎈w」  	「」
    #'A-H'       	= 'delete_word_forward'          	# ⌦ω ᵡ word →   	 ⓘ「  ⎇d」	「」
    'C-a'        	= 'kill_to_line_start'           	# ⭰ᵡ ᵡ to line ⭰	ⓘ「 ⎈u」  	「goto_line_start」  ??? better than ∀▋select_all
    'C-A'        	= 'kill_to_line_end'             	# ᵡ⭲ ᵡ to line ⭲	ⓘ「 ⎈k」  	「」
    'C-j'        	= 'kill_to_line_start'           	# ⭰ᵡ ᵡ to line ⭰	ⓘ「 ⎈u」  	「insert_newline」
    'C-k'        	= 'kill_to_line_end'             	# ᵡ⭲ ᵡ to line ⭲	ⓘ「 ⎈k」  	「kill_to_line_end」
    #ⓘ           	selection
    'A-x'        	= 'delete_selection'                  	# ᵡ▋                              	Ⓝ「  d」 	「extend_line」
    'del'        	= 'delete_selection'                  	# ᵡ▋                              	Ⓝ「d」   	「delete_char_forward」 ??? might be better to delete word/till line ends after selection
    'S-del'      	= 'delete_selection_noyank'           	# 🕱▋                              	  「 ⎇d」	「」
    'A-X'        	= 'join_selections'                   	# ᵡ␤ ⨝ Join lines inside selection	「⇧ j」  	「extend_to_line_bounds」
    'C-x'        	= ['yank_main_selection_to_clipboard',	#                                 	×📋     	「   」	「completion」
                 	   'delete_selection']                	#                                 	cut to clipboard <i class='fa fa-clipboard'></i>

    'A-t'	= 'replace'            	# 🗘c  Replace with a character	Ⓝ「  r」	「find_till_char」
    'A-T'	= 'replace_with_yanked'	# 🗘📋 Replace with copied text 	「⇧Ⓝ r」	「till_prev_char」  <i class='fa fa-copy'></i>

    #ⓘ     	Misc                        	                                             	 
    'A-R'  	= ':toggle soft-wrap.enable'	# ↪   toggle soft wrap                       	「⇧ r」 	「replace_with_yanked」
    'C-/'  	= 'toggle_comments'         	# un-/comment the selections                 	「 ⎈c」 	「」 !!!fail
    'C-m'  	= 'decrement'               	# ⊖ o̠ Decrement object (number) under cursor	「 ⎈x」 	「」 <span class='cd'>o&#800;</span>
    'C-,'  	= 'increment'               	# ⊕ o̟ Increment object (number) under cursor	「 ⎈a」 	「」 <span class='cd'>o&#799;</span> !!!fails
    # 'C-r'	= 'insert_register'         	# 📋r Paste register                          	ⓘ「 ⎈r」	「insert_register」
    'C-i'  	= 'completion'              	# ⎁ Autocomplete                             	「   」 	「」

    #'A-`'	= ''                   	# ☰𝔸𝕒 Case conversion mode	Ⓝ「  」  	「switch_to_lowercase」 !!!missing aliases
    'A-⎈' 	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	Ⓝ「 ⎇`」 	「」
    'A-B' 	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)          	「⇧Ⓝ  `」	「」
    'C-b' 	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	Ⓝ「 ⎇`」 	「」

    # 'A-q'	= 'record_macro'   	# ⏺ Start/stop macro recording to the selected register   	Ⓝ「  q」	「record_macro」
    # 'A-Q'	= 'replay_macro'   	# ▶  Play back a recorded macro from the selected register	「⇧Ⓝ q」 replay_macro]
    'A-"'  	= 'select_register'	# ®  Select a register to copy/paste from                 	Ⓝ「  '<reg>」	「select_register」

    'A-I'	= 'open_above'           	# ⭡␤ Open new line above selection	「⇧Ⓝ o」 	「insert_at_line_start」
    'A-O'	= 'open_below'           	# ⭣␤ Open new line below selection	Ⓝ「  o」 	「insert_at_line_end」
    'A-u'	= 'undo'                 	# ⎌ Undo change                   	Ⓝ「  u」 	「undo mode」
    'A-y'	= 'redo'                 	# ↷ Redo change                   	Ⓝ「⇧ u」 	「yank」
    'A-U'	= 'earlier'              	# 🕘 Move backward in history      	「⇧Ⓝ ⎇u」	「redo」 <i class='fa fa-history'></i>
    'A-Y'	= 'later'                	# 🕒 Move forward in history ⏱     	「⇧Ⓝ⎇u」 	「」 <i class='fa fa-clock-o'></i>
    'C-y'	= 'redo'                 	# ↷ Redo change                   	Ⓝ「⇧ u」 	「」
    'A-v'	= 'paste_after'          	# 📋⤹ Paste after selection        	Ⓝ「  p」 	「select_mode」 ⤹<i class='fa fa-copy'></i>
    'C-v'	= 'paste_clipboard_after'	# 📋⤹ Paste after selection        	Ⓝ「␠ p」 	「」  <i class='fa fa-copy'></i>⤹
    'A-V'	= 'paste_before'         	# ⤸📋 Paste before selection       	Ⓝ「⇧ p」 	「」  <i class='fa fa-clipboard'></i>⤹
    'C-z'	= 'undo'                 	# ⎌ Undo change                   	Ⓝ「  u」 	「」
    'C-Z'	= 'redo'                 	# ↷ Redo change !!!fail           	「⇧Ⓝ u」 	「」

    #ⓘ   	Select manipulation ————————————————————————————————————————————————————————————————————
    'A-('	= 'rotate_selection_contents_backward'	# ⟲ Rotate selection contents backward                       	「⇧Ⓝ⎇9」	「rotate_selections_backward」
    'A-)'	= 'rotate_selection_contents_forward' 	# ⟳ Rotate selection contents forward                        	「⇧Ⓝ⎇0」	「rotate_selections_forward」
    'A-7'	= 'align_selections'                  	# ⥂ Align selection in columns !!!missing ∀*                 	Ⓝ「⇧ 7」	「<7>」
    'A-&'	= 'align_selections'                  	# ⥂ Align selection in columns                               	「⇧Ⓝ 7」	「align_selections」
    'A-='	= 'format_selections'                 	# ℱ Format selection (currently nonfunctional/disabled) (LSP)	Ⓝ「  =」	「format_selections」

    'A-$'	= 'shell_keep_pipe'	# $ᵏ| Pipe each selection into shell command, keep selections where command returned 0	Ⓝ「⇧ 4」	「shell_keep_pipe」

    #ⓘ   	Shell
    'A-!'	= 'shell_insert_output'	# 🢔$ Run shell command, inserting output before each selection	「⇧$!」	「shell_insert_output」
    'A-@'	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧$!」	「」


  ### ☰Minor modes
  [keys.	insert.'A-`']     	#ⓘ ☰𝔸𝕒 Case conversion mode
    'A-`'	= 'switch_case'        	# 𝕒⇋𝔸 (selection)             	「⇧ `」	「」
    '`'  	= 'switch_case'        	# 𝕒⇋𝔸 (selection)             	「⇧ `」	「」
    'j'  	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)              	「  `」	「」
    'k'  	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)              	「 ⎇`」	「」
    # 'l'	= 'switch_to_sentence' 	# 𝔸𝕒 𝔹𝕓 (selection) !!!missing	「 」  	「」
    # ';'	= 'switch_to_camel'    	# ℂ𝕒𝕄𝕖𝕝 (selection) !!!missing	「 」  	「」

  [keys.	insert.'A-p']   	#ⓘ ☰👁 View mode: scroll/manipulate w/o Δselection	「$!」  	「paste_after」
    'u'       	= 'align_view_bottom'	# 🗔⭳ Align line to Screen bottom                 	「  b」 	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ Align line to Screen top                    	「  t」 	「」
    'n'       	= 'align_view_center'	# 🗔·| Align line to center (vertically)          	「  z」 	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ Align line to Screen middle (horizontally) 	「  m」 	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ Align line to Screen middle (horizontally) 	「  m」 	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                                     	「down」	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                                     	「up」   [scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                                     	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                                     	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓                             	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑                             	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓                             	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑                             	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓                             	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑                             	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓                             	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑                             	「pagedown」	「page_up」
    'z'       	= 'no_op'            	#                                                	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                                                	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                                                	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                                                	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                                                	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                                                	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                                                	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                                                	「   」     	「page_up」
  [keys.	insert.'A-P']   	#ⓘ ☰👁ₛ 'sticky', persistent                      	「⇧$!」     	「paste_before」
    'u'       	= 'align_view_bottom'	# 🗔⭳ Align line to Screen bottom                 	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ Align line to Screen top                    	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| Align line to center (vertically)          	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ Align line to Screen middle (horizontally) 	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ Align line to Screen middle (horizontally) 	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                                     	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                                     	「up」   [scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                                     	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                                     	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓                             	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑                             	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓                             	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑                             	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓                             	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑                             	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓                             	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑                             	「pagedown」	「page_up」
    'z'       	= 'no_op'            	#                                                	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                                                	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                                                	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                                                	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                                                	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                                                	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                                                	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                                                	「   」     	「page_up」
  [keys.	insert.'A-Z']   	#ⓘ ☰👁ₛ View 'sticky', persistent                 	「⇧Ⓝ z」    	「paste_before」
    'u'       	= 'align_view_bottom'	# 🗔⭳ Align line to Screen bottom                 	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ Align line to Screen top                    	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| Align line to center (vertically)          	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ Align line to Screen middle (horizontally) 	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ Align line to Screen middle (horizontally) 	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                                     	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                                     	「up」   [scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                                     	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                                     	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓                             	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑                             	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓                             	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑                             	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓                             	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑                             	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓                             	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑                             	「pagedown」	「page_up」
    'z'       	= 'no_op'            	#                                                	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                                                	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                                                	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                                                	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                                                	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                                                	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                                                	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                                                	「   」     	「page_up」

  [keys.	insert.'A-g']          	#ⓘ ⓖ☰⮊ Goto mode Jumps to various locations	「$!」  	「」
    'b'  	= 'no_op'                   	#                                          	「   」 	「goto_window_bottom」
    'h'  	= 'no_op'                   	#                                          	「   」 	「goto_line_start」
    'p'  	= 'no_op'                   	#                                          	「   」 	「goto_previous_buffer」
    'j'  	= 'goto_last_line'          	# ⇲ file end                               	「  e」 	「」
    'k'  	= 'goto_file_start'         	# ⇱ line number `<n>` else file start      	「  g」 	「goto_line_end」
    # 'g'	= 'goto_file_start'         	# ⇱ line number `<n>` else file start      	「  g」 	「goto_file_start」
    # 's'	= 'goto_first_nonwhitespace'	# line start 1ₛₜ non-whitespace char       	「  s」 	「goto_first_nonwhitespace」
    'a'  	= 'goto_first_nonwhitespace'	# line start 1ₛₜ non-whitespace char       	「  s」 	「goto_last_accessed_file」
    'l'  	= 'goto_line_start'         	# line start ⭰                             	「  h」 	「」 !!! change to 🢔¶ when implemented
    ';'  	= 'goto_line_end'           	# line end   ⭲                             	「  l」 	「」 !!! change to ¶🢖 when implemented
    # 'f'	= 'goto_file'               	# files in the selection                   	「  f」 	「goto_file」
    'm'  	= 'goto_window_bottom'      	# 🗔⭳ screen bottom                         	「  b」 	「goto_last_modified_file」
    ','  	= 'goto_window_top'         	# 🗔⭱ screen top                            	「  t」 	「」
    'n'  	= 'goto_window_center'      	# 🗔· screen middle                         	「  c」 	「goto_next_buffer」
    # 'd'	= 'goto_definition'         	# ≝      definition (LSP)                  	「  d」 	「goto_definition」
    'F12'	= 'goto_definition'         	# ≝      definition (LSP)                  	「  d」 	「」
    'D'  	= 'goto_declaration'        	# 🆔       declaration (LSP)                	「⇧  d」	「goto_declaration」
    'e'  	= 'goto_type_definition'    	# ≝ type definition (LSP)                  	「  y」 	「goto_last_line」
    # 'y'	= 'goto_type_definition'    	# ≝ type definition (LSP)                  	「  y」 	「goto_type_definition」
    # 'r'	= 'goto_reference'          	# 🅁※ references (LSP)                      	「  r」 	「goto_reference」
    # 'i'	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	「  i」 	「goto_implementation」
    't'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	「  i」 	「goto_window_top」
    'c'  	= 'goto_last_accessed_file' 	# 🕮␜ file last accessed/alternate          	「  a」 	「goto_window_center」
    'v'  	= 'goto_last_modified_file' 	# ✎␜ file last modified/alternate          	「  m」 	「」
    '1'  	= 'goto_previous_buffer'    	# buffer previous                          	「  p」 	「」 !!! blocked by ∀* universal argument
    '2'  	= 'goto_next_buffer'        	# buffer next                              	「  n」 	「」 !!! blocked by ∀* universal argument
    '3'  	= 'jump_backward'           	# ⎗̡ Jump backward on the jumplist         	「   」 	「」 !!!missing ∀*
    '4'  	= 'jump_forward'            	# ⎘̡ Jump forward  on the jumplist         	「   」 	「」 !!!missing ∀*
    'u'  	= 'goto_last_modification'  	# 🕘 last modification in current file      	「.」   	「」 <i class='fa fa-history'></i>
    # '.'	= 'goto_last_modification'  	# 🕘 last modification in current file      	「.」   	「goto_last_modification」 <i class='fa fa-history'></i>
    # "'"	= 'goto-char#'              	# c#                                       	「   」 	「」 !!! not available

  [keys.	insert.'A-n']          	#ⓘ ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>	「$!」 	「」
    'n'  	= 'match_brackets'          	# 🢔()🢖 Goto matching   bracket (TS)                  	「  m」	「」
    '.'  	= 'match_brackets'          	# 🢔(   Goto next left  bracket (TS) !!!missing       	「  」 	「」
    '/'  	= 'match_brackets'          	#   )🢖 Goto next right bracket (TS) !!!missing       	「  」 	「」
    'i'  	= 'surround_add'            	# (+)  Surround current selection with <char>        	「  s」	「」
    't'  	= 'surround_replace'        	# (🗘) Replace surround character <from> with <to>    	「  r」	「」
    'x'  	= 'surround_delete'         	# (ᵡ)  Delete  surround character <char>             	「  d」	「」
    'e'  	= 'select_textobject_around'	# 🢔O🢖  Select around textobject                      	「  a」	「」
    'a'  	= 'select_textobject_inner' 	# 🢖O🢔  Select inside textobject                      	「  i」	「」
    'A-n'	= 'match_brackets'          	# 🢔()🢖 Goto matching   bracket (TS)                  	「  m」	「」
    'A-.'	= 'match_brackets'          	# 🢔(   Goto next left  bracket (TS) !!!missing       	「  」 	「」
    'A-/'	= 'match_brackets'          	#   )🢖 Goto next right bracket (TS) !!!missing       	「  」 	「」
    'A-i'	= 'surround_add'            	# (+)  Surround current selection with <char>        	「  s」	「」
    'A-t'	= 'surround_replace'        	# (🗘) Replace surround character <from> with <to>    	「  r」	「」
    'A-x'	= 'surround_delete'         	# (ᵡ)  Delete  surround character <char>             	「  d」	「」
    'A-e'	= 'select_textobject_around'	# 🢔O🢖  Select around textobject                      	「  a」	「」
    'A-a'	= 'select_textobject_inner' 	# 🢖O🢔  Select inside textobject                      	「  i」	「」

  [keys.	insert.'C-w']     	#ⓘ ☰🗔  Window mode                     	Ⓝ「⎈ w」  	「」
    's'      	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」

  # [keys.	insert.'A-space']	#ⓘ ☰␠  Space mode	「$!」	「」 !!!fails, A-space blocked by system

  [keys.insert.'A-['] #ⓘ Ⓝ[ ☰⧛ Unimpaired
    'j'      	= 'goto_prev_change'      	# 🢔Δ Change            	previous       	「  g」 	「」
    # 'G'    	= 'goto_first_change'     	# ⭰Δ Change            	1st            	≝「⇧ g」	「goto_first_change」
    'h'      	= 'goto_first_change'     	# ⭰Δ Change            	1st            	「⇧ g」 	「」
    # 'd'    	= 'goto_prev_diag'        	# 🢔🛠 Diagnostic        	previous  (LSP)	≝「  d」	「goto_prev_diag」
    # 'D'    	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	≝「⇧ d」	「goto_first_diag」
    'g'      	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	「⇧ d」 	「goto_prev_change」
    # 'f'    	= 'goto_prev_function'    	# 🢔ƒ Function          	previous (TS)  	≝「  f」	「goto_prev_function」
    's'      	= 'goto_prev_class'       	# 🢔τ Type definition   	previous (TS)  	「  t」 	「」
    # 'a'    	= 'goto_prev_parameter'   	# 🢔α Argument/parameter	previous (TS)  	≝「  a」	「goto_prev_parameter」
    # 'c'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	≝「  c」	「goto_prev_comment」
    '/'      	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    'z'      	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    # 'T'    	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	≝「⇧ t」	「goto_prev_test」
    't'      	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	「⇧ t」 	「goto_prev_class」
    # 'p'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	≝「  p」	「goto_prev_paragraph」
    '['      	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    '.'      	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    # 'space'	= 'add_newline_above'     	# ⭡␤ Add newline above 	               	≝「  ␠」	「add_newline_above」
    'm'      	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines above it
      ,      	  'delete_selection'      	# !!!missing n
      ,      	  'move_line_up'          	#
      ,      	  'paste_before']         	#
  [keys.insert.'A-['.'c'] #ⓘ Ⓝ] ☰⧛ℂ Unimpaired Config toggle ON
    'q'	= ':set auto-save true'           	# 💾🙈 save focus lost
    'w'	= ':set auto-format true'         	# ℱ💾 auto formatting on save
    'e'	= ':set line-number absolute'     	# №⭳  Line number display: absolute #⭳
    'r'	= ':set soft-wrap true'           	# ↪ Soft wrap lines
    't'	= ':set search.wrap-around true'  	# 🔎↪  search should wrap after depleting the matches
    'a'	= ':set auto-completion true'     	# ⎁  Auto pop up of auto-completion
    's'	= ':set search.smart-case true'   	# 𝖗𝕒  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g'	= ':set indent-guides.render true'	# ┊ Indent guides
    'z'	= ':set completion-replace true'  	# ⎁ω completions replace word, not pre-cursor part
    'c'	= ':set true-color true'          	# 🌈 Oerride auto detection of terminal truecolor
    'h'	= ':set cursorline true'          	# 🟨━ Highlight all lines   with a cursor
    'j'	= ':set cursorcolumn true'        	# 🟨┃ Highlight all columns with a cursor
    'd'	= ':set auto-pairs true'          	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i'	= ':set auto-info true'           	# 🛈  Display infoboxes
    'v'	= ':set middle-click-paste true'  	# 🖰📋 Middle click paste support
    'm'	= ':set mouse true'               	# 🖰 Mouse mode
    'u'	= ':set undercurl true'           	# ‗ Override auto detection of terminal undercurl support
    'p'	= ':set color-modes true'         	# 🚦 Color mode indicator depending on the mode itself
    'o'	= ':config-open'                  	# 🧬 Config open   		「  」	「」
    'l'	= ':config-reload'                	# 🧬🗘 Config reload		「  」	「」
  [keys.insert.'A-['.'c'.' '] #ⓘ Ⓝ] ☰⧛ℂ␠ Unimpaired Config toggle ON sub-space mode
    ' '  	= ':set whitespace.render.space all'  	# · show space
    'b'  	= ':set whitespace.render.nbsp all'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab all'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab all'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline all'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline all'	# ⏎ show newline
  [keys.insert.'A-['.'c'.'.'] #ⓘ Ⓝ] ☰⧛ℂ🙈 Unimpaired Config toggle ON hidden mode
    '.'	= ':set file-picker.hidden true'     	# Ignore hidden files
    ','	= ':set file-picker.ignore true'     	# Read .ignore files
    'p'	= ':set file-picker.parents true'    	# Read  ignore files from parent directories
    'i'	= ':set file-picker.git-ignore true' 	# gi Read .gitignore files
    'g'	= ':set file-picker.git-global true' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e'	= ':set file-picker.git-exclude true'	# ge Read .git/info/exclude files
    'l'	= ':set follow-links true'           	# Follow symlinks instead of ignoring them
    'k'	= ':set deduplicate-links true'      	# Ignore symlinks that point at files already shown in the picker
  [keys.insert.'A-['.'c'.'y'] #ⓘ Ⓝ] ☰⧛ℂ🄻 Unimpaired Config toggle ON LSP mode
    'k'	= ':set lsp.enable true'                     	# False will completely disable language servers regardless of language settings
    'p'	= ':set lsp.display-messages true'           	# LSP progress messages below statusline
    'i'	= ':set lsp.auto-signature-help true'        	# Enable automatic popup of signature help (parameter hints)
    'h'	= ':set lsp.display-inlay-hints true'        	# 💡 Inlay hints
    'd'	= ':set lsp.display-signature-help-docs true'	# Docs under signature help popup
    's'	= ':set lsp.snippets true'                   	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.

  [keys.insert.'A-]'] #ⓘ Ⓝ ☰⧚
    'j'      	= 'goto_next_change'      	# Δ🢖 Change            	next            	「  g」 	「」
    # 'G'    	= 'goto_last_change'      	# Δ⭲ Change            	last            	≝「⇧ g」	「goto_last_change」
    'h'      	= 'goto_last_change'      	# Δ⭲ Change            	last            	「⇧ g」 	「」
    # 'd'    	= 'goto_next_diag'        	# 🛠🢖 Diagnostic        	next  (LSP)     	≝「  d」	「goto_next_diag」
    # 'D'    	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	≝「⇧ d」	「goto_last_diag」
    'g'      	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	「⇧ d」 	「goto_next_change」
    # 'f'    	= 'goto_next_function'    	# ƒ🢖 Function          	next (TS)       	≝「  f」	「goto_next_function」
    's'      	= 'goto_next_class'       	# τ🢖 Type definition   	next (TS)       	「  t」 	「」
    # 'a'    	= 'goto_next_parameter'   	# α🢖 Argument/parameter	next (TS)       	≝「  a」	「goto_next_parameter」
    # 'c'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	≝「  c」	「goto_next_comment」
    '/'      	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    'z'      	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    # 'T'    	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	≝「⇧ t」	「goto_next_test」
    't'      	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	「⇧ t」 	「goto_next_class」
    # 'p'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「goto_next_paragraph」
    ']'      	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    '.'      	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    # 'space'	= 'add_newline_below'     	# ⭣␤ Add newline below 	                	≝「  ␠」	「add_newline_below」
    'm'      	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines below it
      ,      	  'delete_selection'      	# !!!missing n
      ,      	  'goto_line_end'         	#
      ,      	  'paste_after']          	#
  [keys.insert.'A-]'.'c'] #ⓘ Ⓝ] ☰⧚ℂ Unimpaired Config toggle OFF
    'q'	= ':set auto-save false'           	# 💾🙈 save focus lost
    'w'	= ':set auto-format false'         	# ℱ💾 auto formatting on save
    'e'	= ':set line-number relative'      	# №⭳  Line number display: absolute #
    'r'	= ':set soft-wrap false'           	# ↪ Soft wrap lines
    't'	= ':set search.wrap-around false'  	# 🔎↪  search should wrap after depleting the matches
    'a'	= ':set auto-completion false'     	# ⎁  Auto pop up of auto-completion
    's'	= ':set search.smart-case false'   	# 𝖗𝕒  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g'	= ':set indent-guides.render false'	# ┊ Indent guides
    'z'	= ':set completion-replace false'  	# ⎁ω completions replace word, not pre-cursor part
    'c'	= ':set false-color false'         	# 🌈 Oerride auto detection of terminal falsecolor
    'h'	= ':set cursorline false'          	# 🟨━ Highlight all lines   with a cursor
    'j'	= ':set cursorcolumn false'        	# 🟨┃ Highlight all columns with a cursor
    'd'	= ':set auto-pairs false'          	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i'	= ':set auto-info false'           	# 🛈  Display infoboxes
    'v'	= ':set middle-click-paste false'  	# 🖰📋 Middle click paste support
    'm'	= ':set mouse false'               	# 🖰 Mouse mode
    'u'	= ':set undercurl false'           	# ‗ Override auto detection of terminal undercurl support
    'p'	= ':set color-modes false'         	# 🚦 Color mode indicator depending on the mode itself
    'o'	= ':config-open'                   	# 🧬 Config open   		「  」	「」
    'l'	= ':config-reload'                 	# 🧬🗘 Config reload		「  」	「」
  [keys.insert.'A-]'.'c'.' '] #ⓘ Ⓝ] ☰⧚ℂ␠ Unimpaired Config toggle OFFN sub-space mode
    ' '  	= ':set whitespace.render.space none'  	# · show space
    'b'  	= ':set whitespace.render.nbsp none'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab none'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab none'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline none'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline none'	# ⏎ show newline
  [keys.insert.'A-]'.'c'.'.'] #ⓘ Ⓝ] ☰⧚ℂ🙈 Unimpaired Config toggle OFF hidden mode
    '.'	= ':set file-picker.hidden false'     	# Ignore hidden files
    ','	= ':set file-picker.ignore false'     	# Read .ignore files
    'p'	= ':set file-picker.parents false'    	# Read  ignore files from parent directories
    'i'	= ':set file-picker.git-ignore false' 	# gi Read .gitignore files
    'g'	= ':set file-picker.git-global false' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e'	= ':set file-picker.git-exclude false'	# ge Read .git/info/exclude files
    'l'	= ':set follow-links false'           	# Follow symlinks instead of ignoring them
    'k'	= ':set deduplicate-links false'      	# Ignore symlinks that point at files already shown in the picker
  [keys.insert.'A-]'.'c'.'y'] #ⓘ Ⓝ] ☰⧚ℂ🄻 Unimpaired Config toggle OFF LSP mode
    'k'	= ':set lsp.enable false'                     	# False will completely disable language servers regardless of language settings
    'p'	= ':set lsp.display-messages false'           	# LSP progress messages below statusline
    'i'	= ':set lsp.auto-signature-help false'        	# Enable automatic popup of signature help (parameter hints)
    'h'	= ':set lsp.display-inlay-hints false'        	# 💡 Inlay hints
    'd'	= ':set lsp.display-signature-help-docs false'	# Docs under signature help popup
    's'	= ':set lsp.snippets false'                   	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.

# chezmoi:template:left-delimiter="#◊" right-delimiter="◊"
#◊ $cfg := "./private_dot_config/helix" -◊
#◊/* key	= command	# Icon Comment	≝「key for ←cmd」	「	cmd ←←key」 */ -◊
[keys.insert] #ⓘ
  ';'	= {j='normal_mode' }	# Maps `;k` to exit insert mode !!!flashes dialog during typing
  #ⓘ Test ——————————————————————————————————————————————————————————————————————
    # 'Escape'	= 'normal_mode'	# Switch to normal mode	「Escape」
    # 'A-x'   	= 'normal_mode'	# Maps Alt-X to enter normal mode
  #ⓘ Free ——————————————————————————————————————————————————————————————————————
    'C-p'  	= 'no_op'	# move to previous line  	「   」	「move_line_up」
    'A-b'  	= 'no_op'	#                        	「   」	「move_prev_word_end」
    'C-u'  	= 'no_op'	#                        	「   」	「kill_to_line_start」
    # 'C-a'	= ''     	# ???useful vs selections	「C-a」	「goto_line_start」

  #ⓘ   	Compat with non-modal editors        	 
  'C-o'	= 'file_picker'                      	# 🗁 Open file picker       	「☰␠  f」	「jump_backward」
  'C-O'	= 'file_picker_in_current_directory' 	# 🗁 Open file picker@curdir	「☰␠⇧ f」	「」
  'C-s'	= ['commit_undo_checkpoint',':write']	# 💾 save file              	「  ⎈s」	「commit_undo_checkpoint」
  'C-n'	= ':new'                             	# 🗋 new buffer             	「 ⎈n」 	「」

  #ⓘ   	Copy                                	 
  'A-c'	= 'yank'                            	# 🗐▋ Copy main selection <i class='fa fa-copy'></i>                                    	「  c」  	「change_selection」
  'C-c'	= 'yank_main_selection_to_clipboard'	# 📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>         	「☰␠,⇧y」	「toggle_comments」
  'A-C'	= 'yank_joined_to_clipboard'        	# ∀▋ Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i> ∀❚ ∀▋	「☰␠ y」  	「」

  #ⓘ Shell  	                 	 
    'A-|'   	= 'shell_pipe'   	# Pipe each selection through shell command, replacing with output	「⇧Ⓝ \」	「shell_pipe」
    # "A-\\"	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	Ⓝ「 ⎇\」	「」
    # 'A-|' 	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「⇧Ⓝ⎇\」	「shell_pipe_to」

  #ⓘ Move ——————————————————————————————————————————————————————————————————————
    #ⓘ           	Cursor@Home
    'A-j'        	= 'move_line_down'      	# ▼                              	ⓘ「 ⎈n」 	「move_line_down」
    'A-k'        	= 'move_line_up'        	# ▲                              	ⓘ「 ⎈p」 	「move_line_up」
    'A-l'        	= 'move_char_left'      	# ◀                              	ⓘ「 ⎈b」 	「move_char_right」
    'A-;'        	= 'move_char_right'     	# ▶                              	ⓘ「 ⎈f」 	「collapse_selection」
    'A-m'        	= 'half_page_down'      	# ⤈ Move half page down          	Ⓝ「 ⎈d」 	「☰🧩」
    'A-,'        	= 'half_page_up'        	# ⤉ Move half page up            	Ⓝ「 ⎈u」 	「keep_primary_selection」
    'A-a'        	= 'extend_to_line_start'	# ⭰▋ Move     line start + select	「ⓈHome」	「append_mode」 # goto_line_start
    'A-A'        	= 'extend_to_line_end'  	# ⭲▋ Move     line end   + select	「ⓈEnd」  「insert_at_line_end」 # goto_line_end
    #ⓘ           	Compat with non-modal editors
    'C-home'     	= 'goto_file_start'            	# ⇱ line number `<n>` else file start	「  g」	「」
    'C-end'      	= 'goto_last_line'             	# ⇲ file end                         	「  e」	「」
    'C-S-tab'    	= 'goto_previous_buffer'       	# ⎗                                  	「⇧ⓖp」「」  !!!fail
    'C-tab'      	= 'goto_next_buffer'           	# ⎘                                  	「ⓖn」「」  !!!fail
    'C-pageup'   	= 'goto_previous_buffer'       	# ⎗                                  	「   」 	「」
    'C-pagedown' 	= 'goto_next_buffer'           	# ⎘                                  	「   」 	「」
    'A-pageup'   	= 'jump_backward'              	# ⎗̡                                 	「   」 	「」
    'A-pagedown' 	= 'jump_forward'               	# ⎘̡                                 	「   」 	「」
    # 'C-left'   	= 'move_prev_long_word_start'  	#                                    	「   」 	「」
    # 'C-right'  	= 'move_next_long_word_start'  	#                                    	「   」 	「」
    'S-A-left'   	= 'extend_prev_word_start'     	# ω← Extend previous word start      	「Ⓢ  b」	「」
    'S-A-right'  	= 'extend_next_word_end'       	# ω⇥ Extend next     word end        	「Ⓢ  e」	「」
    # 'S-A-right'	= 'extend_next_word_start'     	# ω→ Extend next     word start      	「Ⓢ  w」	「」
    'S-C-left'   	= 'extend_prev_long_word_start'	# W← Extend previous WORD start      	「Ⓢ ⇧b」	「」
    'S-C-right'  	= 'extend_next_long_word_start'	# W→ Extend next     WORD start      	「Ⓢ ⇧W」	「」
    # 'S-C-right'	= 'extend_next_long_word_end'  	# W⇥ Extend next    WORD end         	「Ⓢ ⇧E」	「」

    # 'C-b'	= 'move_char_left'	#	⌫c ᵡ char ←	「 ⎈b」	「move_char_left」

    #ⓘ   	File/jumplist
    'A-1'	= 'goto_previous_buffer'	# ⎗                               	「ⓖp」    	「」
    'A-2'	= 'goto_next_buffer'    	# ⎘                               	「ⓖn」    	「」
    'A-3'	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist	   Ⓝ「⎈o」	「」
    'A-4'	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist	   Ⓝ「⎈i」	「」

    #ⓘ       	Word
    'A-d'    	= 'move_prev_word_start'       	# 🢔ω  Move this word start                	   Ⓝ「 b」	「delete_word_forward」
    'A-f'    	= 'move_next_word_end'         	# ω🢖  Move this word end                  	   Ⓝ「 e」	「move_next_word_start」
    'A-D'    	= 'move_prev_long_word_start'  	# 🢔W Move   this WORD start               	  「⇧Ⓝ b」	「」
    'A-F'    	= 'move_next_long_word_end'    	# W🢖 Move   this WORD end                 	  「⇧Ⓝ e」	「」
    'C-d'    	= ['move_prev_long_word_start',	# ⤝W  Move prev WORD end                  	「⇧ b」   	「half_page_down」
             	   'extend_prev_word_start',   	#                                         	 
             	   'extend_next_word_start']   	# !!!move_prev_long_word_end missing      	 
    'C-f'    	= 'move_next_long_word_start'  	# W⤞ Move next WORD end   (this end + ␠)  	「⇧ w」	「page_down」
    # 'C-f'  	= ['collapse_selection',       	# W⤞ Move next WORD end   (this end + ␠)  	「⇧ w」	「page_down」
    #        	   'extend_next_long_word_end']	#                                         	 
    'C-left' 	= 'move_prev_long_word_start'  	# 🢔W  Move this WORD start                	   「⇧ b」	「」
    'C-right'	= 'move_next_long_word_start'  	# W⤞ Move next WORD end   (this end   + ␠)	「⇧ w」   	「」
    'A-left' 	= 'move_prev_word_end'         	# ⤝ω Move prev word end   (this start + ␠)	≝ⓘ「⎇◀」  	「move_prev_word_end」
    'A-right'	= 'move_next_word_start'       	# ω⤞ Move next word start (this end   + ␠)	≝ⓘ「⎇▶」  	「move_next_word_start」
    # 'A-d'  	= 'move_prev_word_end'         	# ⤝ω Move   prev word end (this start + ␠)	ⓘ「⎇b」   	「」
    # 'A-f'  	= 'move_next_word_start'       	# ω⤞ Move   next word start (this end + ␠)	ⓘ「⎇f」   	「」

    #ⓘ     	Line
    # 'A-G'	= 'goto_line'   	# ⮊⎯ go to line # <n> (set <n> in advance), use Ⓒ<n>⏎	「⇧Ⓝ g」	「」
    'A-G'  	= 'command_mode'	# Ⓒ Enter command mode                               	「⇧Ⓝ ;」	「」
    'A-:'  	= 'command_mode'	# Ⓒ Enter command mode                               	「⇧Ⓝ ;」	「」

    #ⓘ    	Block
    #'A->'	= 'no_op'	# 🢔¶ Move paragraph start #!!!missing	Ⓝ「⇧ [」	「indent」
    #'A-?'	= 'no_op'	# ¶🢖 Move paragraph end   #!!!missing	Ⓝ「⇧ ]」	「rsearch」

    'A-r'	= 'repeat_last_motion'	# ∞ Repeat last motion (f/t/m)	Ⓝ「 ⎇.」	「replace」

    #ⓘ   	Find
    'A-w'	= 'find_next_char'  	# 🔎   Find       next     char           	Ⓝ「  f」   	「move_next_word_start」     	<i class='mss mss-Search-3'></i>
    'A-W'	= 'find_prev_char'  	# 🔍   Find       previous char           	「⇧Ⓝ f」   	「move_next_long_word_start」	<i class='fa fa-search'></i>
    'A-S'	= 'rsearch'         	# 🔍𝖗 for previous regex pattern          	Ⓝ「⇧ /」   	「split_selection」
    'A-s'	= 'search'          	# 🔎𝖗 for          regex pattern          	「⇧Ⓝ  /」  	「select_regex」
    'A-.'	= 'search_prev'     	# 🢔◎ ◎͔ Select previous search match     	   Ⓝ「⇧ n」	「repeat_last_change!!!」   !!! blocked by .Repeat
    'A-/'	= 'search_next'     	# ◎🢖 ◎͕ Select next     search match     	   Ⓝ「  n」	「search」
    'A-8'	= 'search_selection'	# 𝖗🢔▋ Use selection as the search pattern	   Ⓝ「⇧ 8」	「<8>」   !!! blocked by ∀*

  #ⓘ Select ——————————————————————————————————————————————————————————————————————
    'A-e'	= 'select_mode'	# Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web)	「  v」	「move_next_word_end」 <i class='fa fa-arrows'></i>

    # Compat with non-modal editors
    # 'C-a'  	= ['save_selection','select_all']	# 🖈∀▋                                                       	Ⓝ「⇧ 5」  「increment」 ???better than ⭰× × to line ⭰
    'A-down' 	= 'copy_selection_on_next_line'  	# 🠷 Copy selection onto the next     line (add cursor below)	Ⓝ「⇧ c」  「」
    'A-up'   	= 'copy_selection_on_prev_line'  	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」 	「」
    'S-left' 	= 'extend_char_left'             	#                                                           	「Ⓢh/◀」	「」
    'S-down' 	= 'extend_line_down'             	#                                                           	「Ⓢj/▼」	「」
    'S-up'   	= 'extend_line_up'               	#                                                           	「Ⓢk/▲」	「」
    'S-right'	= 'extend_char_right'            	#                                                           	「Ⓢl/▶」	「」

    'C-g'  	= 'save_selection'	# 🖈 Save the current selection to the jumplist	Ⓝ「  ⎈s」	「」
    # 'A-G'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	Ⓝ「  ⎈s」	「」


    'A-E'  	= 'extend_to_line_bounds'  	# ━ Extend selection to line bounds (line-wise selection)⎯	「⇧Ⓝ  x」	「move_next_long_word_end」
    'C-e'  	= ['select_mode'           	# =ω "Extend" selection to same word ω₌ ω≡                	「   」  	「goto_line_end_newline」
      ,    	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,    	 'move_prev_word_start'    	#
      ,    	 'search_selection'        	#
      ,    	 'make_search_word_bounded'	#
      ,    	 'extend_search_next'      	#
      ,    	 'insert_mode'             	#
      ]    	                           	# = Sublime's find_under_expand
    'A-J'  	= 'extend_line'            	# ⮒ Select current line, if already selected, extend to next line	Ⓝ「  x」	「join_selections」
    # 'A-5'	= 'select_paragraph'       	# ¶▋ Select this paragraph                                       	Ⓝ「   」	「<5>」  !!!missing ∀* !!!missing command
    'A-%'  	= 'select_all'             	# ∀▋ Select entire file                                          	「⇧Ⓝ 5」	「select_all」

    'A-M'     	= 'shrink_selection'           	# ⸙− Shrink syntax tree object selection    🌳TS ⸙₋          	Ⓝ「 ⎇i」	「」
    'A-<'     	= 'expand_selection'           	# ⸙₊ Expand selection to parent syntax node 🌳TS ⸙₊          	Ⓝ「 ⎇o」	「」
    'A-N'     	= 'split_selection'            	# ䷖𝖗 on regex matches                                       	「⇧Ⓝ s」	「search_prev」
    'A-S-down'	= 'copy_selection_on_next_line'	# 🠷 Copy selection onto the next     line (add cursor below)	Ⓝ「⇧ c」	「」
    'A-S-up'  	= 'copy_selection_on_prev_line'	# 🠵 Copy selection onto the previous line (add cursor above)	Ⓝ「⇧⎇c」	「」

    "A-'"	= 'collapse_selection'	# 🢖🢔 Collapse selection onto a single cursor 	Ⓝ「  ;」	「」
    'A-K'	= 'keep_selections'   	# ᵏ𝖗 selections not matching the regex (keep)	「⇧Ⓝ k」	「keep_selections」
    'A-L'	= 'remove_selections' 	# ᵡ𝖗 selections     matching the regex       	「⇧Ⓝ⎇k」	「」

    'A-minus'	= 'trim_selections'             	# ✁Trim whitespace from the selection                    	Ⓝ「⇧ -」	「」
    'A-_'    	= 'merge_consecutive_selections'	# ⛙ Merge consecutive selections ⨝                       	「⇧⎇ -」	「trim_selections」
    # 'A-+'  	= 'dupe_selections'             	# 🗐Duplicate selection (currently nonfunctional/disabled)	「⇧Ⓝ =」	「dupe_selections」

  #ⓘ Change ——————————————————————————————————————————————————————————————————————
    # 'A-b'	= 'repeat_last_change'	# ∞ Repeat last change	「⇧Ⓝ  .」	「move_prev_word_start」  !!!missing

    'S-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	「⇧  o」 	「」
    'A-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	  「  o」	「insert_newline」
    'C-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	  「  o」	「insert_newline」
    'ret'  	=['commit_undo_checkpoint'	#  ␤ Insert new line              	 ≝ⓘ「 ⏎」	「insert_newline」
      ,    	  'insert_newline']       	# after saving an undo checkpoint

    #            	Delete
    #ⓘ           	char
    "backspace"  	= 'delete_char_backward'	# ⌫c ᵡ char ←    	≝「 ⌫」	「delete_char_backward」
    'C-l'        	= 'delete_char_backward'	# ⌫c ᵡ char ←    	「 ⎈h」	「」
    'C-;'        	= 'delete_char_forward' 	# ⌦c ᵡ char →    	「 ⎈d」	「」 !!!fails
    'A-6'        	= 'delete_char_forward' 	# ⌦ !!!missing ∀*	Ⓝ「 ⌦」	「<5>」
    'A-H'        	= 'delete_char_forward' 	# ⌦c ᵡ char →    	「⇧ ⌦」	「」
    #ⓘ           	word                    	                 	 
    #            	Compat with non-modal editors
    'A-del'      	= 'delete_word_forward'          	# ⌦ω ᵡ word →	 ⓘ「  ⎇d」	「」
    'C-del'      	= ['extend_next_long_word_end',  	# ⌦W         	「   」   	「」
                 	   'delete_selection']           	# ᵡ Word →   	 
    'A-backspace'	= 'delete_word_backward'         	# ⌫ω ᵡ word ←	≝「 ⎈w」	「」
    'C-backspace'	= ['extend_prev_long_word_start',	# ⌫W         	「   」 	「」
                 	   'delete_selection']           	# ᵡ Word ←   	 
    #            	                                 	             	 
    'C-h'        	= ['extend_prev_long_word_start',	# ⌫W         	「   」	「delete_char_backward」
                 	   'delete_selection']           	#     ᵡ Word ←
    'A-h'        	= 'delete_word_backward'         	# ⌫ω ᵡ word ←   	ⓘ「 ⎈w」  	「」
    #'A-H'       	= 'delete_word_forward'          	# ⌦ω ᵡ word →   	 ⓘ「  ⎇d」	「」
    'C-a'        	= 'kill_to_line_start'           	# ⭰ᵡ ᵡ to line ⭰	ⓘ「 ⎈u」  	「goto_line_start」  ??? better than ∀▋select_all
    'C-A'        	= 'kill_to_line_end'             	# ᵡ⭲ ᵡ to line ⭲	ⓘ「 ⎈k」  	「」
    'C-j'        	= 'kill_to_line_start'           	# ⭰ᵡ ᵡ to line ⭰	ⓘ「 ⎈u」  	「insert_newline」
    'C-k'        	= 'kill_to_line_end'             	# ᵡ⭲ ᵡ to line ⭲	ⓘ「 ⎈k」  	「kill_to_line_end」
    #ⓘ           	selection
    'A-x'        	= 'delete_selection'                  	# ᵡ▋                              	Ⓝ「  d」 	「extend_line」
    'del'        	= 'delete_selection'                  	# ᵡ▋                              	Ⓝ「d」   	「delete_char_forward」 ??? might be better to delete word/till line ends after selection
    'S-del'      	= 'delete_selection_noyank'           	# 🕱▋                              	  「 ⎇d」	「」
    'A-X'        	= 'join_selections'                   	# ᵡ␤ ⨝ Join lines inside selection	「⇧ j」  	「extend_to_line_bounds」
    'C-x'        	= ['yank_main_selection_to_clipboard',	#                                 	×📋     	「   」	「completion」
                 	   'delete_selection']                	#                                 	cut to clipboard <i class='fa fa-clipboard'></i>

    'A-t'	= 'replace'            	# 🗘c  Replace with a character	Ⓝ「  r」	「find_till_char」
    'A-T'	= 'replace_with_yanked'	# 🗘📋 Replace with copied text 	「⇧Ⓝ r」	「till_prev_char」  <i class='fa fa-copy'></i>

    #ⓘ     	Misc               	                                           	 
    'C-/'  	= 'toggle_comments'	# un-/comment the selections               	「 ⎈c」 	「」
    'C-m'  	= 'decrement'      	# ⊖ o̠ Decrement object/number under cursor	「 ⎈x」 	「」 <span class='cd'>o&#800;</span>
    'C-,'  	= 'increment'      	# ⊕ o̟ Increment object/number under cursor	「 ⎈a」 	「」 <span class='cd'>o&#799;</span> !!!fails
    # 'C-r'	= 'insert_register'	# 📋r Paste register                        	ⓘ「 ⎈r」	「insert_register」
    'C-i'  	= 'completion'     	# ⎁ Autocomplete                           	「   」 	「」

    #'A-`'	= ''                   	# ☰𝔸𝕒 Case conversion mode	Ⓝ「  」  	「switch_to_lowercase」 !!!missing aliases
    'A-⎈' 	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	Ⓝ「 ⎇`」 	「」
    'A-B' 	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)          	「⇧Ⓝ  `」	「」
    'C-b' 	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	Ⓝ「 ⎇`」 	「」

    # 'A-q'	= 'record_macro'   	# ⏺ Start/stop macro recording to the selected register   	Ⓝ「  q」	「record_macro」
    # 'A-Q'	= 'replay_macro'   	# ▶  Play back a recorded macro from the selected register	「⇧Ⓝ q」 replay_macro]
    'A-"'  	= 'select_register'	# ®  Select a register to copy/paste from                 	Ⓝ「  '<reg>」	「select_register」

    'A-I'	= 'open_above'           	# ⭡␤ Open new line above selection	「⇧Ⓝ o」 	「insert_at_line_start」
    'A-O'	= 'open_below'           	# ⭣␤ Open new line below selection	Ⓝ「  o」 	「insert_at_line_end」
    'A-u'	= 'undo'                 	# ⎌ Undo change                   	Ⓝ「  u」 	「undo mode」
    'A-y'	= 'redo'                 	# ↷ Redo change                   	Ⓝ「⇧ u」 	「yank」
    'A-U'	= 'earlier'              	# 🕘 Move backward in history      	「⇧Ⓝ ⎇u」	「redo」 <i class='fa fa-history'></i>
    'A-Y'	= 'later'                	# 🕒 Move forward in history ⏱     	「⇧Ⓝ⎇u」 	「」 <i class='fa fa-clock-o'></i>
    'C-y'	= 'redo'                 	# ↷ Redo change                   	Ⓝ「⇧ u」 	「」
    'A-v'	= 'paste_after'          	# 📋⤹ Paste after selection        	Ⓝ「  p」 	「select_mode」 ⤹<i class='fa fa-copy'></i>
    'C-v'	= 'paste_clipboard_after'	# 📋⤹ Paste after selection        	Ⓝ「␠ p」 	「」  <i class='fa fa-copy'></i>⤹
    'A-V'	= 'paste_before'         	# ⤸📋 Paste before selection       	Ⓝ「⇧ p」 	「」  <i class='fa fa-clipboard'></i>⤹
    'C-z'	= 'undo'                 	# ⎌ Undo change                   	Ⓝ「  u」 	「」
    'C-Z'	= 'redo'                 	# ↷ Redo change !!!fail           	「⇧Ⓝ u」 	「」

    #ⓘ   	Select manipulation ————————————————————————————————————————————————————————————————————
    'A-('	= 'rotate_selection_contents_backward'	# ⟲ Rotate selection contents backward                       	「⇧Ⓝ⎇9」	「rotate_selections_backward」
    'A-)'	= 'rotate_selection_contents_forward' 	# ⟳ Rotate selection contents forward                        	「⇧Ⓝ⎇0」	「rotate_selections_forward」
    'A-7'	= 'align_selections'                  	# ⥂ Align selection in columns !!!missing ∀*                 	Ⓝ「⇧ 7」	「<7>」
    'A-&'	= 'align_selections'                  	# ⥂ Align selection in columns                               	「⇧Ⓝ 7」	「align_selections」
    'A-='	= 'format_selections'                 	# ℱ Format selection (currently nonfunctional/disabled) (LSP)	Ⓝ「  =」	「format_selections」

    'A-$'	= 'shell_keep_pipe'	# $ᵏ| Pipe each selection into shell command, keep selections where command returned 0	Ⓝ「⇧ 4」	「shell_keep_pipe」

    #ⓘ   	Shell
    'A-!'	= 'shell_insert_output'	# 🢔$ Run shell command, inserting output before each selection	「⇧$!」	「shell_insert_output」
    'A-@'	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧$!」	「」

  #ⓘ Misc ——————————————————————————————————————————————————————————————————————
    'A-R' 	= 'command_palette'         	# ☰Ⓒ Command Palette  	「⇧ /」	「」
    "A-\\"	= ':toggle soft-wrap.enable'	# ↪   toggle soft wrap	「  」 	「」

  ### ☰Minor modes
  #◊ includeTemplate (joinPath $cfg "nHelp.toml.tmpl") (dict "m" "insert" "i" "ⓘ ☰?" "k" "F1" "cfg" $cfg) ◊

  #◊ includeTemplate (joinPath $cfg "nCaseConv.toml.tmpl") (dict "m" "insert" "i" "ⓘ ☰𝔸𝕒" "k" "A-`" "cfg" $cfg) ◊
    'A-`'	= 'switch_case'	# 𝕒⇋𝔸 (selection)	「⇧ `」	「」

  #◊ includeTemplate (joinPath $cfg "nView.toml.tmpl") (dict "m" "insert" "i" "ⓘ ☰👁" "k" "A-p" "cfg" $cfg) ◊
    # 'p'  	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
    # 'A-p'	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
  #◊ includeTemplate (joinPath $cfg "nView.toml.tmpl") (dict "m" "insert" "i" "ⓘ 👁ₛ" "k" "A-P" "cfg" $cfg) ◊
  #◊ includeTemplate (joinPath $cfg "nView.toml.tmpl") (dict "m" "insert" "i" "ⓘ 👁ₛ" "k" "A-Z" "cfg" $cfg) ◊

  #◊ includeTemplate (joinPath $cfg "nGoTo.toml.tmpl") (dict "m" "insert" "i" "ⓘ ⓖ☰⮊" "k" "A-g" "cfg" $cfg) ◊

  #◊ includeTemplate (joinPath $cfg "nMatch.toml.tmpl") (dict "m" "insert" "i" "ⓘ ☰🧩" "k" "A-n" "cfg" $cfg) ◊

  #◊ includeTemplate (joinPath $cfg "nWindow.toml.tmpl") (dict "m" "insert" "i" "ⓘ ☰🗔" "k" "C-w" "cfg" $cfg) ◊

  #◊ includeTemplate (joinPath $cfg "nSpace.toml.tmpl") (dict "m" "insert" "i" "ⓘ" "k" "A-space" "cfg" $cfg) ◊

  #◊ includeTemplate (joinPath $cfg "nUnimpaired.toml.tmpl") (dict "m" "insert" "i" "ⓘ" "k1" "A-[" "k0" "A-]" "cfg" $cfg) ◊

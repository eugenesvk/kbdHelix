# chezmoi:template:left-delimiter="#‹" right-delimiter="›"
#‹/* key	= command	# Icon Comment	≝「key for ←cmd」	「	cmd ←←key」 */ -›
[keys.select] #Ⓢ Select/Extend mode
  #'esc'	= 'exit_select_mode'	#	「  ⎋」	「exit_select_mode」
  'e'   	= 'normal_mode'     	#	「  v」	「extend_next_word_end」
  #Ⓢ Test ——————————————————————————————————————————————————————————————————————
  #Ⓢ Free ——————————————————————————————————————————————————————————————————————

  # 'A'	= ['save_selection','select_all']	# 🖈∀▋	「⇧   」	「」


  #Ⓢ           	Compat with non-modal editors        	 
    'C-o'      	= 'file_picker'                      	# 🗁 File picker       	「☰␠  f」	「jump_backward」
    'C-O'      	= 'file_picker_in_current_directory' 	# 🗁 File picker@curdir	「☰␠⇧ f」	「」
    'C-s'      	= ['commit_undo_checkpoint',':write']	# save file           	「  ⎈s」 	「save_selection」 <i class='fa fa-save'></i>
    # 'C-S-s'  	= 'Save As'                          	# ???                 	⇧[⇧⎈s」 	「」
    'C-n'      	= ':new'                             	# 🗋 new buffer        	「 ⎈n」  	「」
    # 'C-S-t'  	= 'open-last-closed'                 	# ???                 	⇧[⇧⎈t」 	「」
    # 'C-plus' 	= 'zoom-in'                          	# ??? 🔎⨭              	「 ⎈+」  	「」
    # 'C-minus'	= 'zoom-out'                         	# ??? 🔎−              	「 ⎈-」  	「」

  #Ⓢ   	Misc               	 
  'z'  	= 'toggle_comments'	# un-/comment the selections              	「 ⎈c」	「☰👁」
  'C-/'	= 'toggle_comments'	# un-/comment the selections              	「 ⎈c」	「」 !!!fail
  'C-m'	= 'decrement'      	# ⊖ Decrement object (number) under cursor	「 ⎈x」	「」  o̠ <span class='cd'>o&#800;</span>
  'C-,'	= 'increment'      	# ⊕ Increment object (number) under cursor	「 ⎈a」	「」  o̟ <span class='cd'>o&#799;</span> !!!fails

  #Ⓢ   	Copy                                	 
  'c'  	= 'yank'                            	# 🗐 Copy selection <i class='fa fa-copy'></i>                                     	「  y」	「change_selection」
  'C-c'	= 'yank_main_selection_to_clipboard'	# 📋 Copy main selection into system clipboard <i class='fa fa-clipboard'></i>     	「☰␠⇧y」	「toggle_comments」
  'C'  	= 'yank_main_selection_to_clipboard'	# 📋 Copy main selection into system clipboard <i class='fa fa-clipboard'></i>     	「☰␠⇧y」	「copy_selection_on_next_line」
  'A-c'	= 'yank_joined_to_clipboard'        	# ∀▋📋 Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i>	「☰␠ y」	「」

  #Ⓢ Shell 	                 	 
    # '|'  	= 'shell_pipe'   	# Pipe each selection through shell command, replacing with output	「⇧ \」	「shell_pipe」
    "A-\\" 	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「 ⎇\」	「」
    # 'A-|'	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「⇧⎇\」	「shell_pipe_to」

  #Ⓢ Move ——————————————————————————————————————————————————————————————————————
    #Ⓢ Cursor@Home
    'j'  	= 'extend_visual_line_down'	# ▼                    	「  h」	「extend_visual_line_down」
    'k'  	= 'extend_visual_line_up'  	# ▲                    	「  j」	「extend_visual_line_up」
    'l'  	= 'extend_char_left'       	# ◀                    	「  k」	「extend_char_right」
    ';'  	= 'extend_char_right'      	# ▶                    	「  l」	「」
    'm'  	= 'half_page_down'         	# ⤈ Move half page down	「 ⎈d」	「☰🧩」
    ','  	= 'half_page_up'           	# ⤉ Move half page up  	「 ⎈u」	「keep_primary_selection」
    'C-j'	= 'page_down'              	# ⇟ Move      page down	「 ⎈d」	「」
    'C-k'	= 'page_up'                	# ⇞ Move      page up  	「 ⎈u」	「」

    #Ⓢ        	word
    'f'       	= 'extend_next_word_end'         	# ω⭲ Extend next end of word  	   「  e」	「extend_next_char」
    'A-f'     	= 'extend_next_word_start'       	# ω⤞ Extend next beg of word  	「  w」   	「」
    'A-right' 	= 'extend_next_word_start'       	# ω⤞ Extend next beg of word  	「  w」   	「」
    'd'       	= 'extend_prev_word_start'       	# ⤝ω Extend prev beg of word  	   「  b」	「」
    'A-d'     	= 'extend_prev_word_end'         	# ⭰ω Extend prev end of word  	「   」   	「」
    # 'A-left'	= 'extend_prev_word_end'         	# ⭰ω Extend prev end of word  	「   」   	「」
    'F'       	= 'extend_next_long_word_end'    	# W⭲ Extend next end of WORD  	  「⇧ e」 	「extend_prev_char」
    'A-F'     	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」   	「」
    'C-right' 	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」   	「」
    'D'       	= 'extend_prev_long_word_start'  	# ⤝W Extend prev beg of WORD  	  「⇧ b」 	「」
    'A-D'     	= ['extend_prev_long_word_start',	# ⭰W Extend prev end of WORD  	「⇧ b」   	「」
              	  'extend_prev_word_start',      	# !!!extend_prev_long_word_end	 
              	  'extend_next_word_start',]     	#    missing                  	 
    'C-left'  	= ['extend_prev_long_word_start',	# ⭰W Extend prev end of WORD  	   「⇧ b」	「」
              	  'extend_prev_word_start',      	# !!!move_prev_long_word_end  	 
              	  'extend_next_word_start',]     	#    extend_prev_long_word_end	 
    # 'r'     	= 'extend_next_word_start'       	# W⤞ Extend next beg of WORD  	「⇧ w」	「」
    # 'R'     	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」	「」
    # 'A-r'   	= 'extend_next_word_start'       	# W⤞ Extend next beg of WORD  	「⇧ w」	「」
    # 'A-R'   	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」	「」

    #Ⓢ      	Line
    # 'home'	= 'extend_to_line_start'	# ⤝▋ Extend     line start	「home」	「extend_to_line_start」
    # 'end' 	= 'extend_to_line_end'  	# ▋⭲ Extend     line end  	「end」 	「extend_to_line_end」
    'a'     	= 'extend_to_line_start'	# ⤝▋ Extend     line start	「Home」	「」
    'A'     	= 'extend_to_line_end'  	# ▋⭲ Extend     line end  	「End」 	「」

    #Ⓢ   	Paragraph
    # '>'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start	「[p  」	「」
    # '?'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end  	「]p  」	「」
    # !!! remove after .Repeat can be rebound
    '{'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start           	「[p  」	「」
    '}'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end             	「]p  」	「」
    '>'	= 'extend_search_prev' 	# 🢔◎ ◎͔ Extend previous search match	「⇧ n」 	「」
    '?'	= 'extend_search_next' 	# ◎🢖 ◎͕ Extend next     search match	「  n」 	「」

    'r'	= 'repeat_last_motion'	# ∞ Repeat last motion (f/t/m)	「 ⎇.」	「replace」

    #Ⓢ   	Search
    'w'  	= 'extend_next_char'     	# 🔍   Extend       next     char                               	「  f」 	「extend_next_word_start」
    'W'  	= 'extend_prev_char'     	# 🔎   Extend       previous char                               	「⇧ f」 	「extend_next_long_word_start」
    'A-w'	= 'extend_till_char'     	# 🔍₋₁ Extend 'till next     char                               	「  t」 	「」
    'A-W'	= 'extend_till_prev_char'	# 🔎₋₁ Extend 'till previous char                               	「⇧ t」 	「」
    'S'  	= 'rsearch'              	# 🔍𝖗 for previous regex pattern                                	「⇧ /」 	「split_selection」
    's'  	= 'search'               	# 🔎𝖗 for          regex pattern                                	「⇧  /」	「select_regex」
    '.'  	= 'extend_search_prev'   	# 🢔◎ ◎͔ Extend previous search match                           	「⇧ n」 	「goto_last_modification!!!」
    '/'  	= 'extend_search_next'   	# ◎🢖 ◎͕ Extend next     search match                           	「  n」 	「search」
    '8'  	= 'search_selection'     	# 𝖗🢔▋ Use current selection as the search pattern !!!missing ∀*	「⇧ 8」 	「<8>」

    #Ⓢ          	Compat with non-modal editors
    'C-home'    	= 'goto_file_start'     	# ⇱ line number `<n>` else file start	「  g」	「」
    'C-end'     	= 'goto_last_line'      	# ⇲ file end                         	「  e」	「」
    'C-S-tab'   	= 'goto_previous_buffer'	# ⎗                                  	⇧[ⓖp」	「」 !!!fail
    'C-tab'     	= 'goto_next_buffer'    	# ⎘                                  	「ⓖn」	「」 !!!fail
    'C-pageup'  	= 'goto_previous_buffer'	# ⎗                                  	「   」	「」
    'C-pagedown'	= 'goto_next_buffer'    	# ⎘                                  	「   」	「」
    'A-pageup'  	= 'jump_backward'       	# ⎗̡                                 	「   」	「」
    'A-pagedown'	= 'jump_forward'        	# ⎘̡                                 	「   」	「」
    # 'C-j'     	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist   	「 ⎈o」	「」
    # 'C-;'     	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist   	「 ⎈i」	「」  !!!fail

    '1'  	= 'goto_previous_buffer'	# ⎗ !!!missing ∀*                               	「ⓖp」	「<1>」
    '2'  	= 'goto_next_buffer'    	# ⎘ !!!missing ∀*                               	「ⓖn」	「<2>」
    'A-1'	= 'goto_previous_buffer'	# ⎗                                             	「ⓖp」	「」
    'A-2'	= 'goto_next_buffer'    	# ⎘                                             	「ⓖn」	「」
    '3'  	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist !!!missing ∀*	「 ⎈o」	「<3>」
    '4'  	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist !!!missing ∀*	「 ⎈i」	「<4>」
    'A-3'	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist              	「 ⎈o」	「」
    'A-4'	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist              	「 ⎈i」	「」

  #Ⓢ Select ——————————————————————————————————————————————————————————————————————
    #Ⓢ       	Compat with non-modal editors    	 
    'C-a'    	= ['save_selection','select_all']	# 🖈, ∀▋                                                     	「⇧ 5」	「increment」
    'A-down' 	= 'copy_selection_on_next_line'  	# 🠷 Copy selection onto the next     line (add cursor below)	「⇧ c」	「」
    'A-up'   	= 'copy_selection_on_prev_line'  	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」	「」
    'S-left' 	= 'extend_char_left'             	#                                                           	「Ⓢh/◀」	「」
    'S-down' 	= 'extend_line_down'             	#                                                           	「Ⓢj/▼」	「」
    'S-up'   	= 'extend_line_up'               	#                                                           	「Ⓢk/▲」	「」
    'S-right'	= 'extend_char_right'            	#                                                           	「Ⓢl/▶」	「」


    'A-g'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	「  ⎈s」	「」
    'C-g'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	「  ⎈s」	「」
    'G'  	= 'save_selection'	# 🖈 Save the current selection to the jumplist	「  ⎈s」	「goto_line」

    'J'  	= 'extend_line'            	# ⮒ Select current line, if already selected, extend to next line	「⇧  x」	「join_selections」
    'E'  	= 'extend_to_line_bounds'  	# ━ Extend selection to line bounds (line-wise selection)⎯       	「⇧ x」 	「move_next_long_word_end」
    'A-e'	= ['select_mode'           	# ω₌ "Extend" selection to same word                             	「   」 	「」
      ,  	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,  	 'move_prev_word_start'    	#
      ,  	 'search_selection'        	#
      ,  	 'make_search_word_bounded'	#
      ,  	 'extend_search_next'      	#
      ]  	                           	# = Sublime's find_under_expand
    # "" 	= 'expand_selection'       	# Expand selection to parent syntax node !!!pick a key 🌳TS 	「   」	「expand_selection」
    # '5'	= 'select_paragraph'       	# ¶▋ Select this paragraph !!!missing ∀* !!!not implemented	「  」 	「<5>」
    # '%'	= 'select_all'             	# ∀▋ Select entire file                                    	「⇧ 5」	「select_all」

    'A-j'	= 'copy_selection_on_next_line'	# 🠷 Copy selection onto the next     line (add cursor below)	「⇧ c」	「」
    'A-k'	= 'copy_selection_on_prev_line'	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」	「」
    'A-l'	= 'select_prev_sibling'        	# 🢔⸙ Select previous sibling node in syntax tree 🌳TS        	「⎇ p」	「」 🌳🌲🌴𐇲🎄⸙🌿
    'A-;'	= 'select_next_sibling'        	# ⸙🢖 Select next     sibling node in syntax tree 🌳TS        	「⎇ m」	「flip_selections」
    'M'  	= 'shrink_selection'           	# ⸙− Shrink syntax tree object selection          🌳TS ⸙₋    	「⎇ i」	「」
    '<'  	= 'expand_selection'           	# ⸙₊ Expand selection to parent syntax node       🌳TS ⸙₊    	「⎇ o」	「」
    'A-s'	= 'select_regex'               	# 𝖗▋ Select all regex matches inside selections             	「  s」	「split_selection_on_newline」
    'N'  	= 'split_selection'            	# ䷖𝖗 on regex matches                                       	「⇧ s」	「search_prev」
    'A-n'	= 'split_selection_on_newline' 	# ䷖␤ (﹨␤)                                                   	「 ⎇s」	「」

    "'"    	= 'collapse_selection'        	# 🢖🢔 Collapse selection onto a single cursor            	「  ;」 	「」
    "A-'"  	= 'flip_selections'           	# ⮀ Flip selection cursor and anchor                    	「 ⎇;」 	「」
    'A-a'  	= 'flip_selections'           	# ⮀ Flip selection cursor and anchor                    	「⇧ ⎇;」	「」
    'A-A'  	= 'flip_selections'           	# ⮀ Flip selection cursor and anchor                    	「⇧ ⎇;」	「」
    'A-p'  	= 'ensure_selections_forward' 	# ↠ Flip selection forward: cursor after anchor         	「⇧⎇;」 	「」
    # 'A-:'	= 'ensure_selections_forward' 	# ↠ Flip selection forward: cursor after anchor         	「⇧⎇;」 	「」
    #'A-l' 	= 'rotate_selections_backward'	# ⟲ Rotate main selection backward (← with many columns)	「⇧ 9」 	「」
    #'A-;' 	= 'rotate_selections_forward' 	# ⟳ Rotate main selection forward  (→ with many columns)	「⇧ 0」 	「flip_selections」
    'A-m'  	= 'rotate_selections_forward' 	# ⟳ Rotate main selection forward  (↓ with many lines)  	「⇧ 0」 	「」
    'A-,'  	= 'rotate_selections_backward'	# ⟲ Rotate main selection backward (↑ with many lines)  	「⇧ 9」 	「remove_primary_selection」
    'A-u'  	= 'remove_primary_selection'  	# ᵡ         the primary selection                       	「 ⎇,」 	「earlier」
    'A-i'  	= 'keep_primary_selection'    	# ᵡ∀ all but the primary selection (keep only)          	「  ,」 	「」
    'A-U'  	= 'no_op'                     	# ᵡᵡ undo remove selection                              	「⇧ ⎇,」	「earlier」 !!!missing
    'K'    	= 'keep_selections'           	# ᵏ𝖗 selections not matching the regex (keep)           	「⇧ k」 	「keep_selections」
    'L'    	= 'remove_selections'         	# ᵡ𝖗 selections     matching the regex                  	「⇧⎇k」 	「」
    'A-Z'  	=['keep_primary_selection'    	# 🢖∀🢔 collapse everything to a single cursor            	「  」  	「」		 
      ,    	  'collapse_selection'        	                                                        	      	#
      ,    	  'exit_select_mode']         	                                                        	      	#

    'minus'	= 'trim_selections'             	# ✁Trim whitespace from the selection                    	「⇧ -」 	「」
    '_'    	= 'merge_consecutive_selections'	# ⛙ Merge consecutive selections ⨝                       	「⇧⎇ -」	「trim_selections」
    # '+'  	= 'dupe_selections'             	# 🗐Duplicate selection (currently nonfunctional/disabled)	「⇧ =」 	「dupe_selections」

  #Ⓢ Change ——————————————————————————————————————————————————————————————————————
    #            	Compat with non-modal editors
    'A-del'      	= 'delete_word_forward'          	# ⌦ω ᵡ word →                     	 ⓘ「  ⎇d」	「」
    'C-del'      	= ['extend_next_long_word_end',  	# ⌦W                              	「   」   	「」
                 	   'delete_selection']           	# ᵡ Word →                        	 
    'A-backspace'	= 'delete_word_backward'         	# ⌫ω ᵡ word ←                     	ⓘ「 ⎈w」	「」
    'C-backspace'	= ['extend_prev_long_word_start',	# ⌫W                              	「   」 	「」
                 	   'delete_selection']           	# ᵡ Word ←                        	 
    # 'del'      	= 'delete_selection'             	# ᵡ▋                              	「  d」	「」
    'S-del'      	= 'delete_selection_noyank'      	# 🕱▋                              	「 ⎇d」	「」
    'S-ret'      	= 'open_below'                   	# ⭣␤ Open new line below selection	「  o」	「」
    'ret'        	= 'open_above'                   	# ⭡␤ Open new line above selection	「⇧ o」	「」
    'C-ret'      	= ':reflow'                      	# ↪ Hard-wrap selected lines ䷖↪   	「   」	「」

    # '.'      	= 'N/A'                              	# ∞ Repeat last change            	「.」     	「n/a」
    '6'        	= 'delete_char_forward'              	# ⌦ !!!missing ∀*                 	「 ⌦」    	「<5>」
    'x'        	= 'delete_selection'                 	# ᵡ▋                              	「  d」   	「extend_line」
    'A-x'      	= 'delete_selection_noyank'          	# 🕱▋ (...without yanking)         	「 ⎇d」   	「」
    # 'A-c'    	= 'change_selection'                 	# Δ                               	「  c」   	「change_selection_noyank」
    'h'        	= 'delete_char_backward'             	# ⌫c ᵡ char ←                     	「⌫」     	「move_char_left」
    'H'        	= 'delete_char_forward'              	# ⌦c ᵡ char →                     	「⇧⌦」    	「」
    'A-h'      	= 'delete_word_backward'             	# ⌫ω ᵡ word ←                     	ⓘ「 ⎈w」  	「」
    'A-H'      	= 'delete_word_forward'              	# ⌦ω ᵡ word →                     	 ⓘ「  ⎇d」	「」
    'C-h'      	= ['extend_prev_long_word_start',    	# ⌫W                              	「   」   	「」
               	   'delete_selection']               	# ᵡ Word ←                        	 
    'C-x'      	= ['yank_main_selection_to_clipboard'	                                  	,
               	   'delete_selection']               	#                                 	      	×📋 cut to clipboard <i class='fa fa-clipboard'></i>	「   」	「decrement」
    'backspace'	= 'delete_char_backward'             	# ⌫                               	「I.bs」	「」
    'X'        	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside selection	「⇧ j」 	「extend_to_line_bounds」

    # 'backspace'	= 'delete_char_backward'	# ⌫c ᵡ char ←	「backspace」	「delete_char_backward」
    # 'C-h'      	= 'delete_char_backward'	# ⌫c ᵡ char ←	「C-h」      	「delete_char_backward」
    'del'        	= 'delete_char_forward' 	# ⌦c ᵡ char →	「delete」   	「delete_char_forward」
    # 'C-d'      	= 'delete_char_forward' 	# ⌦c ᵡ char →	「C-d」      	「delete_char_forward」

    't'	= 'replace'            	# 🗘  Replace with a character	「  r」	「find_till_char」
    'T'	= 'replace_with_yanked'	# 🗘ʸ Replace with yanked text	「⇧ r」	「till_prev_char」

    'B'  	= 'switch_case'        	# 𝕒⇋𝔸 (selection)	「⇧ `」	「move_prev_long_word_start」
    'C-b'	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)	「⇧⎇`」	「」
    # '~'	= 'switch_case'        	# 𝕒⇋𝔸 (selection)	「⇧ `」	「switch_case」
    # '`'	= 'switch_to_lowercase'	# 𝕒𝔸  (selection)	「  `」	「switch_to_lowercase」
    # '`'	= 'switch_case'        	# 𝕒⇋𝔸 (selection)	「⇧ `」	「switch_to_lowercase」
    # '~'	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)	「⇧⎇`」	「switch_case」
    '⎈'  	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)	「⇧⎇`」	「」
    'A-`'	= 'switch_to_lowercase'	# 𝔸𝕒  (selection)	「   `」	「switch_to_uppercase」

    'A-.'	= 'unindent'	# ⇚ (selection)	「⇧,」	「repeat_last_motion」
    'A-/'	= 'indent'  	# ⇛ (selection)	「⇧.」	「」

    # 'q'	= 'record_macro'   	# ⏺ Start/stop macro recording to the selected register	「  q」	「record_macro」
    # 'Q'	= 'replay_macro'   	#⇧[⇧ q] replay_macro]                                  	▶  Play back a recorded macro from the selected register
    # '"'	= 'select_register'	# ®  Select a register to yank to or paste from        	「  '<reg>」	「select_register」

    # 'b'	= 'N/Arepeat_last_change' 	# ∞ Repeat last change !!! no command yet                   	「⇧  .」	「move_prev_word_start」
    # '.'	=  'N/Arepeat_last_change'	# ∞ Repeat last change                                      	「  .」 	「n/arepeat_last_change」
    # 'i'	= 'insert_mode'           	# ⤹⎀ Insert before selection                                	「  i」 	「insert_mode」
    'o'  	= 'append_mode'           	# ⎀⤸ Insert after selection (append)                        	「  a」 	「open_above」
    'I'  	= 'open_above'            	# ⭡␤ Open new line above selection                          	「⇧ o」 	「insert_at_line_start」
    'O'  	= 'open_below'            	# ⭣␤ Open new line below selection                          	「  o」 	「insert_at_line_end」
    'u'  	= 'undo'                  	# ⎌ Undo change                                             	「  u」 	「undo mode」
    'y'  	= 'redo'                  	# ↷ Redo change                                             	「⇧ u」 	「yank」
    'U'  	= 'earlier'               	# 🕘 Move backward in history   <i class='fa fa-history'></i>	「⇧ ⎇u」	「redo」
    'Y'  	= 'later'                 	# 🕒 Move forward in history ⏱ <i class='fa fa-clock-o'></i> 	「⇧⎇u」 	「」
    'C-y'	= 'redo'                  	# ↷ Redo change                                             	「⇧ u」 	「」
    'v'  	= 'paste_after'           	# 📋⤹ Paste after selection                                  	「  p」 	「select_mode」
    'C-v'	= 'paste_clipboard_after' 	# 📋⤹ Paste after selection                                  	「☰␠ p」	「」
    'V'  	= 'paste_before'          	# ⤸📋 Paste before selection                                 	「⇧ p」 	「」
    'C-z'	= 'suspend'               	# ⎌ Undo change                                             	「  u」 	「」
    'C-Z'	= 'redo'                  	# ↷ Redo change !!!fail                                     	「⇧ u」 	「」
    # 'I'	= 'insert_at_line_start'  	# ⤝⎀ Insert at the start of the line                        	「⇧ i」 	「insert_at_line_start」
    # 'A'	= 'insert_at_line_end'    	# ⎀⭲ Insert at the end of the line                          	「⇧ a」 	「insert_at_line_end」

  #Ⓢ Select manipulation ————————————————————————————————————————————————————————————————————
    '('  	= 'rotate_selection_contents_backward'	# ⟲ Rotate selection contents backward	「⇧⎇9」	「rotate_selections_backward」
    ')'  	= 'rotate_selection_contents_forward' 	# ⟳ Rotate selection contents forward	「⇧⎇0」	「rotate_selections_forward」
    '7'  	= 'align_selections'                  	# ⥂ Align selection in columns !!!missing ∀*	「⇧ 7」	「<7>」
    # '&'	= 'align_selections'                  	# ⥂ Align selection in columns	「⇧ 7」	「align_selections」
    # '='	= 'format_selections'                 	# ℱ Format selection (currently nonfunctional/disabled) (LSP)	「  =」	「format_selections」

  #Ⓢ Shell	#                      	#
  # '!'   	= 'shell_insert_output'	# 🢔$ Run shell command, inserting output before each selection	「⇧  1」	「shell_insert_output」
  '@'     	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧⎇1」	「」
  # 'A-!' 	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧⎇1」	「shell_append_output」


  ##Ⓢ ☰Minor modes
  #‹ includeTemplate (joinPath .cfg "nHelp.toml.tmpl") (dict "m" "select" "i" "Ⓢ ☰?" "k" "F1" "cfg" .cfg) ›

  #‹ includeTemplate (joinPath .cfg "nView.toml.tmpl") (dict "m" "select" "i" "Ⓢ ☰👁" "k" "p" "cfg" .cfg) ›
    # 'p'	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
  #‹ includeTemplate (joinPath .cfg "nView.toml.tmpl") (dict "m" "select" "i" "Ⓢ 👁ₛ" "k" "P" "cfg" .cfg) ›
  #‹ includeTemplate (joinPath .cfg "nView.toml.tmpl") (dict "m" "select" "i" "Ⓢ 👁ₛ" "k" "Z" "cfg" .cfg) ›

  #‹ includeTemplate (joinPath .cfg "nGoTo.toml.tmpl") (dict "m" "select" "i" "Ⓢ ⓖ☰⮊" "k" "g" "cfg" .cfg) ›

  #‹ includeTemplate (joinPath .cfg "nMatch.toml.tmpl") (dict "m" "select" "i" "Ⓢ ☰🧩" "k" "n" "cfg" .cfg) ›

  #‹ includeTemplate (joinPath .cfg "nWindow.toml.tmpl") (dict "m" "select" "i" "Ⓢ ☰🗔" "k" "C-w" "ksp" "" "cfg" .cfg) ›

  #‹ includeTemplate (joinPath .cfg "nSpace.toml.tmpl") (dict "m" "select" "i" "Ⓢ" "k" "space" "cfg" .cfg) ›

  #‹ includeTemplate (joinPath .cfg "nUnimpaired.toml.tmpl") (dict "m" "select" "i" "Ⓢ" "k1" "[" "k0" "]" "cfg" .cfg) ›

# chezmoi:template:left-delimiter="#‹" right-delimiter="›"
#‹/* key   	= command                             	# Icon Comment                     	≝「key」 	「	cmd」 */ -›
  [keys    	.'#‹.m›'.'#‹.k›']                     	##‹.i› ☰␠  Space mode              	Ⓝ「 ␠」  	「」
   #'space'	= 'insert_mode'                       	# ⁁⤸ Insert before sel             	「  i」  	「」 !!!panick! !!!missing
    'ret'  	= 'command_mode'                      	# Ⓒ Enter command mode             	「  ⎋」  	「」
    'F'    	= 'file_picker_in_current_directory'  	# 🗁 Open file   picker@curdir      	「☰␠⇧ f」	「file_picker_in_current_directory」
    'c'    	= 'yank_main_selection_to_clipboard'  	# 📋▋ Copy main sel to sys clipboard	「☰␠ ⇧y」	「」 <i class='fa fa-clipboard'></i>▋
    'x'    	= ['yank_main_selection_to_clipboard',	# ×📋 ▋                             	「   」  	「」 <i class='fa fa-clipboard'></i>
           	   'delete_selection']                	# cut to clipboard                 	「   」  	「」  create a new buffer and paste a buffer there !!! not available yet
    #      	line                                  	                                   	       	 
    'J'    	= ['extend_to_line_bounds',           	# ━⮃ swap line ↓                   	「 」    	「」!!! not implemented yet
           	   'delete_selection',                	#                                  	       	 github.com/helix-editor/helix/issues/2245
           	   'paste_after']                     	#                                  	       	 
    'K'    	= ['extend_to_line_bounds',           	# ━⮁ swap line ↑                   	「 」    	「」
           	   'delete_selection','move_line_up', 	#                                  	       	 
           	   'paste_before']                    	#                                  	       	 

    'p'	= 'no_op'                	#                                         	≝「   p」 	「paste_clipboard_after」
    'P'	= 'no_op'                	#                                         	≝「⇧ p」  	「paste_clipboard_before」
    'Y'	= 'no_op'                	#                                         	「   」   	「yank_main_selection_to_clipboard」
    'S'	= 'no_op'                	#                                         	「⇧   」  	「workspace_symbol_picker」
    'r'	= 'command_palette'      	# ☰Ⓒ Command Palette                      	「   」   	「rename_symbol]
    ';'	= 'command_mode'         	# Ⓒ Enter command mode                    	「⇧ ;」   	「」
    'j'	= 'extend_line'          	# ⮒ Select cur/next(if selected) line     	「  x」   	「」
    'k'	= 'keep_selections'      	# ᵏ𝖗 sels not matching the Re (keep)      	   「⇧ k」	「」
    'l'	= 'remove_selections'    	# ᵡ𝖗 sels     matching the Re             	   「⇧⎇k」	「」
    's'	= 'select_regex'         	# 𝖗▋ Select all Re matches in sels        	   「  s」	「symbol_picker」
    'a'	= ['save_selection',     	# 🖈∀▋                                     	「⇧ 5」   	「」
       	   'select_all']         	# Save cur pos, select everything         	 
    'h'	= ['kill_to_line_start', 	# ᵡ⎯                                      	「   」	「」
       	   'kill_to_line_end']   	# Delete this line                        	 
    'g'	= 'save_selection'       	# 🖈 Save cur sel to the jumplist          	「  ⎈s」	「」
    'e'	= 'extend_to_line_bounds'	# ━ Extend sel to line bounds⎯            	「  x」 	「」
   #'q'	= '???'                  	#                                         	「  q」 	「」
    't'	= 'replace_with_yanked'  	# 🗘📋 Replace with copied text             	「⇧ r」 	「」  <i class='fa fa-copy'></i>
    #  	🄻LSP                     	                                          	 
    'R'	= 'rename_symbol'        	# ✎ Rename symbol                         	「  r」 	「replace_selections_with_clipboard」
    'o'	= 'hover'                	# ? Show doc for item under cursor        	「  k」 	「」
    'y'	= 'code_action'          	# Ⓐ Apply code action)                    	「☰␠ a」	「yank_joined_to_clipboard」
    #  	                         	                                          	 
    '/'	= 'global_search'        	# 🔎🗁 Global search in workspace folder    	≝「☰␠ /」	「global_search」
    'v'	= 'paste_clipboard_after'	# 📋⤹ Paste after sels                     	「☰␠ p」 	「」
   #'z'	= 'list_kills'           	# 🕱☰ new buffer with clipboard content    	「   」  	「」	 !!!missing
    'n'	= 'split_selection'      	# ䷖𝖗 on regex matches                     	「⇧ s」  	「」
    'b'	= 'switch_to_lowercase'  	# 𝔸𝕒  (selection)                         	「  `」  	「buffer_picker」
    "'"	= 'flip_selections'      	# ⮀ Flip sel cursor and anchor            	「 ⎇;」  	「」
    '\'	= 'shell_pipe'           	# Pipe sel thru shell, replace with output	「⇧ \」  	「」
    #  	Numbers row              	                                          	 
   #"'"	= 'last_picker'          	# ☰☾ ∞Open last fuzzy picker              	「  」 	「」
    '6'	= 'switch_to_uppercase'  	# 𝕒𝔸 (selection)                          	「⇧⎇`」	「」 !!! change to Sentence Case
   #'7'	= 'toggle_spellcheck'    	# ⇝ spell check                           	「   」	「」  !!!missing
    #  	Modes                    	                                          	 
   #'u'	= 'mode_U'               	# ☰u TBD LSPs? or list_kills like z       	「   」	「」  !!!missing_aliases
   #'i'	= 'mode_Register'        	# ☰® Register/copy/paste etc.             	「   」	「」
   #'p'	= 'mode_P'               	# ☰p TBD                                  	「」「paste_clipboard_after」 !!!missing_aliases
   #'w'	= 'mode_window'          	# ☰🗔 Window mode                          	「☰␠ w」	「mode_window」 !!!missing_aliases
   #'f'	= 'mode_file'            	# ☰␜ File mode                            	「   」 	「file_picker」
   #'d'	= 'mode_bracket'         	# ☰⟪ Insert various brackets              	「   」 	「」
   #'m'	= 'mode_symbol'          	# ☰🅂 Symbol mode                          	「   」 	「」
   #','	= 'mode_diag'            	# ☰🛠 Diagnostics mode                     	「   」 	「」

  [keys	.'#‹.m›'.'#‹.k›'.'m']           	##‹.i› ☰🅂 Symbol mode in Space mode     	「☰␠ f」		「」
    'm'	= 'symbol_picker'               	# 🅂🗋 Document  symbols 🄻                	「☰␠ s」	「」 ⚛Ⓢ
    ','	= 'workspace_symbol_picker'     	# 🅂🗍 Workspace symbols 🄻                	「☰␠⇧s」	「」  ⚛Ⓢ
  [keys	.'#‹.m›'.'#‹.k›'.',']           	##‹.i› ☰🛠 Diagnostics mode in Space mode	「☰␠ f」		「」
    ','	= 'diagnostics_picker'          	# 🛠🗋 Document  diagnostics picker 🄻     	「☰␠ d」	「」
    'm'	= 'workspace_diagnostics_picker'	# 🛠🗍 Workspace diagnostics picker 🄻     	「☰␠⇧d」	「」


  [keys	.'#‹.m›'.'#‹.k›'.'f']      	##‹.i› ☰␜ File mode in Space mode          	「☰␠ f」		「」
    'j'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'k'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
   #'l'	= 'open file at cursor'    	# ❚␜ open file at cursor                   	「  」  	「  」
    'f'	= 'buffer_picker'          	# ☰b Open buffer picker                    	「  b」 	「file_picker」
   #'d'	= 'show in desktop'        	# show in desktop                          	「  」  	「  」
    's'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'S'	= ['commit_undo_checkpoint'	# 💾∀v all views                            	「  」  	「  」
      ,	  ':write-all']            	                                           	      	#
  'A-s'	= ':update'                	# 💾Δ save file if modified                 	「  」  	「  」
    'a'	= 'goto_last_accessed_file'	# 🕮 file last accessed/alternate           	「ⓖ a」 	「  」
   #'g'	= 'bookmark bmenu list'    	# ☰🖈bookmark bmenu list                    	「  」  	「  」
   #'h'	= 'bookmark set'           	# 🖈 bookmark set                           	「  」  	「  」
   #'u'	= 'open last closed'       	# open last closed                         	「  」  	「  」
   #'o'	= 'open file fast'         	# prompt toopen a file from bookmark       	「  」  	「  」
   #'r'	= 'rename_file'            	# ✎ rename current file                    	「  」  	「  」
   #'e'	= 'open in external app'   	# open in external app                     	「  」  	「  」
   #'w'	= 'find_file'              	# 🔎 Find file                              	「  」  	「  」<i class='mss mss-Search-3'></i>
   #'q'	= 'mode_fs_close'          	# ☰× Close buffers/files un/saved          	「  」  	「  」
    'v'	= 'goto_last_modified_file'	# ✎ file last modified/alternate           	「ⓖ m」 	「  」
   #'c'	= 'copy file path'         	# 📋C:\ copy file path                      	「  」  	「  」 <i class='fa fa-clipboard'>C:\
   #'t'	= 'list recently closed'   	# list recently closed                     	「  」  	「  」
   #'y'	= 'open recently closed'   	# open recently closed                     	「  」  	「  」
    'o'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
    'n'	= ':new'                   	# 🗋 new empty buffer                       	Ⓝ「⎈n」 	「  」
   #'b'	= 'recentf open files'     	# recentf open files                   「  」	「  」
   #'\'	= 'open in terminal'       	# open in terminal                         	「  」	「  」
    '`'	= ':reload'                	# 🗘 Discard, Reload      from source       	「  」	「  」
    '~'	= ':reload-all'            	# 🗘∀ Discard, Reload all from source       	「  」	「  」
    'p'	= ':config-open-workspace' 	# 🛠🗋 Workspace config file                 	「  」	「  」

    ','	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」
    'O'	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」

  #‹ includeTemplate (joinPath .cfg "nSpaceQ.toml.tmpl") (dict "m" .m "i" .i "k" .k "q" "q") ›
  #‹ includeTemplate (joinPath .cfg "nSpaceQ.toml.tmpl") (dict "m" .m "i" .i "k" .k "q" "x") ›

  [keys	.'#‹.m›'.'#‹.k›'.'i'] ##‹.i› ☰®  Register/copy/paste etc.
    'i'	= 'select_register'                  	# ®  Select a register to copy/paste from '<reg> ??? make sticky? for further reg ops or use the main layer
   #'7'	= 'append_to_register 1'             	# ®1⎀ Append current line/selection to reg 1
   #'8'	= 'clear_register 1'                 	# ®1× x
   #'9'	= 'copy_to_register 1'               	# ®1🗐 x
   #'0'	= 'paste_from_register 1'            	# ®1📋 x
   #'1'	= 'append_to_register 2'             	# ®2⎀ Append current line/selection to reg 2
   #'2'	= 'clear_register 2'                 	# ®2× x
   #'3'	= 'copy_to_register 2'               	# ®2🗐 x
   #'4'	= 'paste_from_register 2'            	# ®2📋 x
    't'	= 'replace_selections_with_clipboard'	# 🗘▋📋 Replace sels by clipboard contents    	「☰␠⇧r」 <i class='fa fa-clipboard'></i>▋
    'x'	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside sel                	Ⓝ「⇧j」
    'v'	= 'paste_clipboard_before'           	# ⤸📋 Paste after  sels                      	「☰␠⇧p」 ⤸<i class='fa fa-clipboard'></i>
    'c'	= 'yank_joined_to_clipboard'         	# 📋∀▋ Copy all sels to clipboard (joined) ⨝📋	「☰␠ y」 <i class='fa fa-clipboard'></i> ∀❚ ∀▋
   #'a'	= ':clipboard-yank'                  	# Copy main   sel to system         clipboard
   #'a'	= ':clipboard-yank-join'             	# Copy joined sel to system         clipboard with sep \n
   #'a'	= ':primary-clipboard-yank'          	# Copy main   sel to system primary clipboard
   #'a'	= ':primary-clipboard-yank-join'     	# Copy joined sel to system primary clipboard with sep \n
   #'a'	= ':clipboard-paste-after'           	# Paste system  clipboard after   sels
   #'a'	= ':clipboard-paste-before'          	# Paste system  clipboard before  sels
   #'a'	= ':clipboard-paste-replace'         	# Paste system  clipboard replace sels
   #'a'	= ':primary-clipboard-paste-after'   	# Paste primary clipboard after   sels
   #'a'	= ':primary-clipboard-paste-before'  	# Paste primary clipboard before  sels
   #'a'	= ':primary-clipboard-paste-replace' 	# Paste primary clipboard replace sels
   #'a'	= ':show-clipboard-provider'         	# Show clipboard provider name in status bar
    'j'	= ':sort'                            	# 𝕒🢖𝕫 Sort ranges in sel 𝟙𝟚𝟛
    'k'	= ':rsort'                           	# 𝕫🢖𝕒 Sort ranges in sel in reverse order 𝟛𝟚𝟙
   #'d'	='list-matching-lines'               	# !!!missing
   #'f'	='delete-matching-lines'             	# !!!missing
   #'g'	='delete-non-matching-lines'         	# !!!missing
   #'t'	='delete-duplicate-lines'            	# !!!missing
   #'n'	='reformat-to-sentence-lines'        	# !!!missing
   #'o'	='copy-rectangle-to-register'        	# !!!missing
   #'r'	='query-replace-regexp'              	# !!!missing
   #'h'	='mark-defun'                        	# !!!missing
   #';'	='escape-quotes'                     	# Add \ before " in current line/selection

  #[keys 	.'#‹.m›'.'#‹.k›'.'d'] ##‹.i› ☰⟪ Bracket mode in Space mode (place cursor in between)
   #'RET'	= 'insert char'   	#
   #'SPC'	= 'insert unicode'	#
   #'d'  	= '()'            	# () parenthesis
   #'f'  	= '[]'            	# [] square bracket
   #'j'  	= '{}'            	# {} brace
   #'k'  	= '""'            	# "" regular double quote
   #'l'  	= "''"            	# '' regular single quote
   #'r'  	= '‹›'            	# ‹› single angle quote (single chevrons)
   #'t'  	= '«»'            	# «» double angle quote (double chevrons)
   #'n'  	= '【】'            	# 【】 black lenticular bracket
   #'m'  	= '「」'            	# 「」 corner bracket
   #'o'  	= '〔〕'            	# 〔〕 tortoise shell bracket
   #','  	= '〈〉'            	# 〈〉 angle bracket or math ⟨⟩
   #'.'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'<'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'g'  	= '‘’'            	# ‘’ curly single quote
   #'h'  	= '“”'            	# “” double curly quote
   #'y'  	= "`'"            	# `' emacs quote
   #';'  	= '=""'           	# ="" string assignment
   #'z'  	= '⸨⸩'            	# ⸨⸩ Double Parenthesis
   #'c'  	= 'date'          	# 📆📅current date
   #'p'  	= 'u+000C'        	# ␌ formfeed

  #‹ includeTemplate (joinPath .cfg "nWindow.toml.tmpl") (dict "m" .m "i" (print .i " ☰🗔@☰␠") "k" .k "ksp" ".'w'" "cfg" .cfg) ›

  [keys	.'#‹.m›'.'#‹.k›'.'u']       	##‹.i› 🌐 ☰ⓤ 🌳TS, 🄻LSP, 🄳DAP, and various ones
    'q'	= 'no_op'                   	#                                   	「  」  	「」
    'w'	= 'no_op'                   	#                                   	「  」  	「」
    'u'	= 'remove_primary_selection'	# ×          primary sel            	「 ⎇,」 	「」
    'i'	= 'keep_primary_selection'  	# ×∀ all but primary sel (keep only)	「  ,」 	「」
    'o'	= ':character-info'         	# 🔣ℹ Character info                 	「  」  	「」
    #  	 Δ                          	                                    	      	 
    'j'	= 'goto_next_change'        	# Δ🢖 Change            next         	「⧚  g」	「」 !!!→sticky
    'k'	= 'goto_prev_change'        	# 🢔Δ Change            previous     	「⧛  g」	「」 !!!→sticky
    'l'	= 'goto_first_change'       	# ⭰Δ Change             1st         	「⧛⇧ g」	「」 !!!→sticky
    ';'	= 'goto_last_change'        	# Δ⭲ Change            last         	「⧚⇧ g」	「」 !!!→sticky
    'b'	= ':reset-diff-change'      	# ×Δ Reset diff hunk                	「  」  	「」
    #  	 🌳TS                        	                                    	      	 
    'a'	= 'goto_prev_parameter'     	# 🢔α Argument/parameter previous    	「⧛  a」	「」 !!!→sticky
    's'	= 'goto_next_parameter'     	# α🢖 Argument/parameter next        	「⧚  a」	「」 !!!→sticky
    'd'	= 'goto_prev_function'      	# 🢔ƒ Function           previous    	「⧛  f」	「」 !!!→sticky
    'f'	= 'goto_next_function'      	# ƒ🢖 Function           next        	「⧚  f」	「」 !!!→sticky
    'z'	= 'goto_prev_comment'       	# 🢔ↄ Comment            previous    	「⧛  c」	「」 !!!→sticky
    'x'	= 'goto_next_comment'       	# ↄ🢖 Comment            next        	「⧚  c」	「」 !!!→sticky
    'c'	= 'goto_prev_class'         	# 🢔τ Type definition    previous    	「⧛  t」	「」 !!!→sticky
    'v'	= 'goto_next_class'         	# τ🢖 Type definition    next        	「⧛  t」	「」!!!→sticky
    't'	= 'goto_prev_test'          	# 🢔🧪 Test               previous    	「⧛⇧ t」	「」 !!!→sticky
    'y'	= 'goto_next_test'          	# 🧪🢖 Test               next        	「⧚⇧ t」	「」 !!!→sticky
    #  	 🄻LSP                       	                                    	      	 
    "'"	= ':format'                 	# ℱ∀ Format the file                	「  」  	「」
    'p'	= 'format_selections'       	# ℱ  Format sel               	「  =」 	「」
    'm'	= 'goto_next_diag'          	# 🛠🢖 Diagnostic next                	「⧚  d」	「」 !!!→sticky
    ','	= 'goto_prev_diag'          	# 🢔🛠 Diagnostic previous            	「⧛  d」	「」 !!!→sticky
    '.'	= 'goto_first_diag'         	# ⭰🛠 Diagnostic 1st @ doc           	「⧛⇧ d」	「」 !!!→sticky
    '/'	= 'goto_last_diag'          	# 🛠⭲ Diagnostic last @ doc          	「⧚⇧ d」	「」 !!!→sticky
    'g'	= 'code_action'             	# Ⓐ  Apply code action              	「☰␠ a」	「」
    'n'	= 'rename_symbol'           	# ✎  Rename symbol                  	「☰␠ r」	「」
    'r'	= ':lsp-workspace-command'  	# 🄲🗍 Workspace command picker       	「  」  	「」
    '\'	= ':lsp-stop'               	# ⏹🄻 Stop                           	「  」  	「」
    ']'	= ':lsp-restart'            	# 🔄🄻 Restart                        	「  」  	「」

    'h'	= ':toggle lsp.display-inlay-hints'         	# 💡 toggle inlay hints       	「  」  	「」
    'e'	= 'select_references_to_symbol_under_cursor'	# =🅂 Select symbol references	「☰␠ h」	「」
    #  	 🄳DAP                                       	                             	      	 
    '['	= 'dap_restart'                             	# 🔄🄳 Restart (DAP)           	「  」  	「」

  # [keys.'#‹.m›'.'#‹.k›'.'p']	##‹.i› ☰ⓟ TBD

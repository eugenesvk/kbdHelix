# 🧬Helix 23.05, ⌨ modiƒew 0.4

# 'key'	= 'command'	# Icon Comment 「default key for this command」	「default command for this key」
# —————————————————————————————————————————————————————————————————————————————————————————————————
[keys.normal] #Ⓝ
  #Ⓝ Test ——————————————————————————————————————————————————————————————————————
    'C-q'  	= ':quit!'                         	# Control-q → typable command :q! (:quit!)
    # 'G'  	= 'move_prev_word_end'             	# Backward a word                                                    	「⇧I.⎇b, ⎇◀」	「goto_line」
    # '0'  	= 'univeral_arg'                   	# ∀* number prefix to treat all the following numbers as # of repeats	「  」       	「0」  !!!missing ∀*
    # 'C-j'	= ['page_down','align_view_center']	# ⇟ Move      page down                                              	   「 ⎈d」   	「」
    # 'C-k'	= ['page_up','align_view_center']  	# ⇞ Move      page up                                                	   「 ⎈u」   	「」

    # 'C-K'	= "insert_char"	# ⇞ Move      page up	   「 ⎈u」	「」

  #Ⓝ Free ——————————————————————————————————————————————————————————————————————
    'C-u'	= 'no_op'           	#                        	「   」 	「half_page_up」
    'A-C'	= 'no_op'           	#                        	「⇧   」	「copy_selection_on_prev_line」
    'A-('	= 'no_op'           	#                        	「⇧⎇9」 	「rotate_selection_contents_backward」
    'A-)'	= 'no_op'           	#                        	「⇧⎇0」 	「rotate_selection_contents_forward」
    'C-i'	= 'no_op'           	#                        	「   」 	「jump_forward」
    'b'  	= 'no_op'           	#                        	「⇧   」	「replace_with_yanked」
    '~'  	= "no_op"           	#                        	「⇧   」	「switch_case」
    'A-`'	= "no_op"           	#                        	「   」 	「switch_to_uppercase」
    # 'X'	= 'change_selection'	# Δ (delete,enter Insert)	「⇧  c」	「extend_to_line_bounds」
    # 'Z'	=  'N/A'            	# ☰👁ₛ                    	「   」 	「view mode sticky」
  #Ⓝ Major modes ——————————————————————————————————————————————————————————————————————
    # 'i'	= 'insert_mode'	# ⤹⎀ Insert before sel                        	「  i」	「insert_mode」
    # 'e'	= 'select_mode'	# Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web)	「  v」	「move_next_word_end」  <i class='fa fa-arrows'></i>
  #Ⓝ Minor modes / menu dialogs ———————————————————————————————————————————————————————
    #'p'    	                   	 ☰👁 View mode            	Ⓝ「  z」  	「paste_after」
    #'P'    	                   	 ☰👁ₛ 'sticky', persistent	Ⓝ「⇧ z」  	「paste_before」
    #'Z'    	                   	 ☰👁ₛ 'sticky', persistent	Ⓝ「⇧ z」  	「paste_before」
    #'g'    	                   	 ⓖ☰⮊ Goto mode           	  Ⓝ「  g」	「」
    #'n'    	                   	 ☰🧩  Match mode          	Ⓝ「  m」  	「」 ☰<i class='fa fa-puzzle-piece'></i>
    #'C-w'  	                   	 ☰🗔  Window mode         	  Ⓝ「 ⎈w」	「」
    #'space'	                   	 ☰␠  Space mode          	  Ⓝ「  ␠」	「」
    #'['    	                   	 ☰⧛ Unimpaired           	  Ⓝ「  ]」	「」
    #']'    	                   	 ☰⧚                      	  Ⓝ「  [」	「」
    #'`'    	                   	 ☰𝔸𝕒 Case conversion     	  Ⓝ「  」 	「switch_to_lowercase」
    #':'    	= 'command_mode'   	# Ⓒ Enter command mode   	≝「⇧ ;」  	「command_mode」
    'R'     	= 'command_palette'	# ☰Ⓒ Command Palette     	「⇧ /」   	「replace_with_yanked」

  #Ⓝ         	Compat with non-modal editors        	 
  'C-o'      	= 'file_picker'                      	# 🗁 Open file picker       	「☰␠  f」	「jump_backward」
  'C-O'      	= 'file_picker_in_current_directory' 	# 🗁 Open file picker@curdir	「☰␠⇧ f」	「」
  'C-s'      	= ['commit_undo_checkpoint',':write']	# 💾 save file              	「  ⎈s」 	「save_selection」
  # 'C-S-s'  	= 'Save As'                          	# ???                      	「⇧⎈s」  	「」
  'C-n'      	= ':new'                             	# 🗋 new buffer             	「 ⎈n」  	「」
  # 'C-S-t'  	= 'open-last-closed'                 	# ???                      	「⇧⎈t」  	「」
  # 'C-+'    	= 'zoom-in'                          	# ??? 🔎⨭                   	「 ⎈+」  	「」
  # 'C-minus'	= 'zoom-out'                         	# ??? 🔎−                   	「 ⎈-」  	「」

  #Ⓝ   	Copy                                	 
  'c'  	= 'yank'                            	# 🗐▋ Copy main sel                      	「  c」  	「change_selection」 <i class='fa fa-copy'></i>
  'C-c'	= 'yank_main_selection_to_clipboard'	# 📋▋ Copy main sel into sys clipboard   	「☰␠,⇧y」	「toggle_comments」 <i class='fa fa-clipboard'></i>
  'C'  	= 'yank_main_selection_to_clipboard'	# 📋▋ Copy main sel into sys clipboard   	「⇧␠,y」 	「copy_selection_on_next_line」 <i class='fa fa-clipboard'></i>
  'A-c'	= 'yank_joined_to_clipboard'        	# ∀▋ Copy all sels to clipboard (joined)	「☰␠ y」 	「change_selection_noyank」 ⨝📋 ∀❚ ∀▋ <i class='fa fa-clipboard'></i>

  #Ⓝ Shell 	                 	 
    # '|'  	= 'shell_pipe'   	# |   Pipe each sel through shell command, replacing with output    	≝「⇧ \」	「shell_pipe」
    "A-\\" 	= 'shell_pipe_to'	# |ᵡ Pipe each sel into    shell command, ignoring       output     	「⇧⎇\」 	「」
    # 'A-|'	= 'shell_pipe_to'	#   Pipe each sel into    shell command, ignoring       output	≝「⇧⎇\」	「shell_pipe_to」

  #Ⓝ Move ——————————————————————————————————————————————————————————————————————
    #    	Cursor@Home
    'j'  	= 'move_visual_line_down'	# ▼                             	「h/◀」   	「move_visual_line_down」
    'k'  	= 'move_visual_line_up'  	# ▲                             	「j/▼」   	「move_visual_line_up」
    'l'  	= 'move_char_left'       	# ◀                             	「k/▲」   	「move_char_right」
    ';'  	= 'move_char_right'      	# ▶                             	「l/▶」   	「collapse_selection」
    'm'  	= 'half_page_down'       	# ⤈ Move half page down         	   「 ⎈d」	「☰🧩」
    ','  	= 'half_page_up'         	# ⤉ Move half page up           	   「 ⎈u」	「keep_primary_selection」
    'C-j'	= 'page_down'            	# ⇟ Move      page down         	   「 ⎈d」	「」
    'C-k'	= 'page_up'              	# ⇞ Move      page up           	   「 ⎈u」	「」
    'a'  	= 'extend_to_line_start' 	# ⤝▋ Move    line start + select	「ⓈHome」 	「append_mode」  # goto_line_start
    'A'  	= 'extend_to_line_end'   	# ▋⭲ Move    line end   + select	「ⓈEnd」  	「insert_at_line_end」  # goto_line_end
    'A-A'	= 'extend_to_first_nonwhitespace'	# 𝕒⤝▋ Move   line start + sel	「」      	「」!!!move to double tap a after https://github.com/helix-editor/helix/issues/1486 is implemented


    #Ⓝ          	Compat with non-modal editors
    'C-home'    	= 'goto_file_start'     	# ⇱ line number `<n>` else file start	「  g」	「」
    'C-end'     	= 'goto_last_line'      	# ⇲ file end                         	「  e」	「」
    'C-S-tab'   	= 'goto_previous_buffer'	# ⎗                                  	「⇧ⓖp」「」  !!!fail
    'C-tab'     	= 'goto_next_buffer'    	# ⎘                                  	「ⓖn」「」  !!!fail
    'C-pageup'  	= 'goto_previous_buffer'	# ⎗                                  	「   」	「」
    'C-pagedown'	= 'goto_next_buffer'    	# ⎘                                  	「   」	「」
    'A-pageup'  	= 'jump_backward'       	# ⎗̡                                 	「   」	「」
    'A-pagedown'	= 'jump_forward'        	# ⎘̡                                 	「   」	「」
    # 'C-j'     	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist   	「 ⎈o」	「」
    # 'C-;'     	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist   	「 ⎈i」	「」 !!!fail

    '1'  	= 'goto_previous_buffer'	# ⎗ !!!missing ∀*                 	「ⓖp」 	「<1>」
    '2'  	= 'goto_next_buffer'    	# ⎘ !!!missing ∀*                 	「ⓖn」 	「<2>」
    'A-1'	= 'goto_previous_buffer'	# ⎗                               	「ⓖp」 	「」
    'A-2'	= 'goto_next_buffer'    	# ⎘                               	「ⓖn」 	「」
    '3'  	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist	「 ⎈o」	「<3>」 !!!missing ∀*
    '4'  	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist	「 ⎈i」	「<4>」 !!!missing ∀*
    'A-3'	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist	「 ⎈o」	「」
    'A-4'	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist	「 ⎈i」	「」

    #Ⓝ       	word !!! sometimes prev≠next by a space
    'f'      	= 'move_next_word_end'         	# ω⭲ Move next end of word  	「  e」	「find_next_char」
    'A-f'    	= 'move_next_word_start'       	# ω⤞ Move next beg of word  	「  w」	「」
    'A-right'	= 'move_next_word_start'       	# ω⤞ Move next beg of word  	ⓘ「⎇▶」	「」
    'd'      	= 'move_prev_word_start'       	# ⤝ω Move prev beg of word  	「  b」	「delete_selection」
    'A-d'    	= 'move_prev_word_end'         	# ⭰ω Move prev end of word  	ⓘ「⎇b」	「delete_selection_noyank」
    'A-left' 	= 'move_prev_word_end'         	# ⭰ω Move prev end of word  	ⓘ「⎇◀」	「」
    'F'      	= 'move_next_long_word_end'    	# W⭲ Move next end of WORD  	「⇧ e」	「find_prev_char」
    'A-F'    	= 'move_next_long_word_start'  	# W⤞ Move next beg of WORD  	「⇧ w」	「find_prev_char」
    'C-f'    	= 'move_next_long_word_start'  	# W⤞ Move next beg of WORD  	「⇧ w」	「page_down」
    'C-right'	= 'move_next_long_word_start'  	# W⤞ Move next beg of WORD  	「⇧ w」	「」
    'D'      	= 'move_prev_long_word_start'  	# ⤝W  Move prev beg of WORD 	「⇧ b」	「」
    'A-D'    	= ['move_prev_long_word_start',	# ⭰W  Move preiv end of WORD	「⇧ b」	「」
             	  'extend_prev_word_start',    	# !!!move_prev_long_word_end	 
             	  'extend_next_word_start',]   	#    missing                	 
    'C-left' 	= ['move_prev_long_word_start',	# ⭰W Move prev end of WORD  	   「⇧ b」	「」
             	  'extend_prev_word_start',    	# !!!move_prev_long_word_end	 
             	  'extend_next_word_start',]   	#    missing                	 
    'C-d'    	= ['move_prev_long_word_start',	# ⭰W  Move prev end of WORD 	「⇧ b」	「half_page_down」
             	   'extend_prev_word_start',   	# !!!move_prev_long_word_end	 
             	   'extend_next_word_start']   	#    missing                	 
    # 'C-f'  	= ['collapse_selection',       	# W⤞ Move next end of WORD  	「⇧ w」	「page_down」
    #        	   'extend_next_long_word_end']	#                           	 
    # 'G'    	= 'goto_line'                  	# ⮊⎯ go to line #<n> (Ⓒ<n>⏎)	「⇧ g」	「goto_line」

    #Ⓝ      	Line
    # 'Home'	= 'goto_line_start'	# Move beg of line	「Home」	「goto_line_start」
    # 'End' 	= 'goto_line_end'  	# Move end of line	「End」 	「goto_line_end」

    #Ⓝ   	Block
    # '>'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start	「[p  」	「indent」
    # '?'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end  	「]p  」	「rsearch」
    # !!! remove after .Repeat can be rebound
    '{'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start           	「[p  」  	「」
    '}'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end             	「]p  」  	「」
    '>'	= 'search_prev'        	# 🢔◎ ◎͔ Select previous search match	   「⇧ n」	「indent」
    '?'	= 'search_next'        	# ◎🢖 ◎͕ Select next     search match	   「  n」	「rsearch」

    'r'	= 'repeat_last_motion'	# ∞ Repeat last motion (f/t/m)	「 ⎇.」	「replace」

    #Ⓝ   	Find
    'w'  	= 'find_next_char'    	# 🔎   Find       next     char      	「  f」   	「move_next_word_start」     	<i class='mss mss-Search-3'></i>
    'W'  	= 'find_prev_char'    	# 🔍   Find       previous char      	「⇧ f」   	「move_next_long_word_start」	<i class='fa fa-search'></i>
    'A-w'	= 'find_till_char'    	# 🔎₋₁ Find 'till next     char      	「  t」   	「」                         	<i class='mss mss-Search-3'></i>₋
    'A-W'	= 'till_prev_char'    	# 🔍₋₁ Find 'till previous char      	「⇧ t」   	「」                         	<i class='fa fa-search'></i>₋
    'S'  	= 'rsearch'           	# 🔍𝖗 for previous regex pattern     	「⇧ /」   	「split_selection」
    's'  	= 'search'            	# 🔎𝖗 for          regex pattern     	「⇧  /」  	「select_regex」
    '.'  	= 'search_prev'       	# 🢔◎ ◎͔ Select previous search match	   「⇧ n」	「repeat_last_change!!!」   !!! blocked by .Repeat
    '/'  	= 'search_next'       	# ◎🢖 ◎͕ Select next     search match	   「  n」	「search」
    # 'N'	= 'search_prev'       	# 🢔◎ ◎͔ Select previous search match	  「⇧ n」 	「search_prev」
    # 'n'	= 'search_next'       	# ◎🢖 ◎͕ Select next     search match	   「  n」	「search_next」
    '8'  	= 'search_selection'  	# 𝖗🢔▋ Use sel as the search pattern 	   「⇧ 8」	「<8>」   !!! blocked by ∀*
    '*'  	= 'search_selection'  	# 𝖗🢔▋ Use sel as the search pattern 	  「⇧ 8」 	「search_selection」
    #'*' 	= ['select_mode'      	#
    #  , 	'move_prev_word_start'	#
    #  , 	'move_next_word_end'  	#
    #  , 	'search_selection'    	#
    #  , 	'extend_search_next'  	#
    #  , 	'exit_select_mode'    	#
    #  ] 	                      	# = find_under_expand


  #Ⓝ Select ——————————————————————————————————————————————————————————————————————
    'e'	= 'select_mode'	# Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web) alt「  v」	「move_next_word_end」 <i class='fa fa-arrows'></i>

    #Ⓝ       	Compat with non-modal editors    	 
    'C-a'    	= ['save_selection','select_all']	# 🖈∀▋                                              	「⇧ 5」  「increment」
    'A-down' 	= 'copy_selection_on_next_line'  	# 🠷 Copy sel onto the next     line (add ‸cursor ↓)	「⇧ c」  「」
    'A-up'   	= 'copy_selection_on_prev_line'  	# 🠵 Copy sel onto the previous line (add ‸cursor ↑)	「⇧⎇c」 	「」
    'S-left' 	= 'extend_char_left'             	#                                                  	「Ⓢh/◀」	「」
    'S-down' 	= 'extend_line_down'             	#                                                  	「Ⓢj/▼」	「」
    'S-up'   	= 'extend_line_up'               	#                                                  	「Ⓢk/▲」	「」
    'S-right'	= 'extend_char_right'            	#                                                  	「Ⓢl/▶」	「」
    'C-z'    	= 'undo'                         	# ⎌ Undo change                                    	「  u」 	「」
    'C-Z'    	= 'redo'                         	# ↷ Redo change                                    	「⇧ u」 	「」!!!fail
    'C-y'    	= 'redo'                         	# ↷ Redo change                                    	「⇧ u」 	「」


    'A-g'	= 'jumplist_picker'	# ☰🖈 List jumplist          	「☰␠ j」	「」
    'C-g'	= 'save_selection' 	# 🖈 Save cur sel to jumplist	「  ⎈s」	「」
    'G'  	= 'save_selection' 	# 🖈 Save cur sel to jumplist	「  ⎈s」	「goto_line」

    'J'  	= 'extend_line_below'      	# ⮒ Select current line/extend to next    if selected	「  x」 	「join_selections」
    'A-r'	= 'extend_line'            	# ⭿ Select current line/extend to another if selected	「  」  	「」
    'E'  	= 'extend_to_line_bounds'  	# ━ Extend sel to line bounds (line-wise sel)⎯       	「⇧  x」	「move_next_long_word_end」
    'A-E'	= ['select_mode'           	# 🢔ω₌ "Extend" sel to same word prev                 	「   」 	「」
      ,  	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,  	 'move_prev_word_start'    	#
      ,  	 'search_selection'        	#
      ,  	 'make_search_word_bounded'	#
      ,  	 'extend_search_prev'      	#
      ,  	 'normal_mode'             	#
      ]  	                           	# = Sublime's find_under_expand
    'A-e'	= ['select_mode'           	# ₌ω🢖 "Extend" sel to same word next	「   」	「」
      ,  	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,  	 'move_prev_word_start'    	#
      ,  	 'search_selection'        	#
      ,  	 'make_search_word_bounded'	#
      ,  	 'extend_search_next'      	#
      ,  	 'normal_mode'             	#
      ]  	                           	# = Sublime's find_under_expand
    # '5'	= 'select_paragraph'       	# ¶▋ Select this paragraph	「   」	「<5>」  !!!missing ∀* !!!missing command
    # '%'	= 'select_all'             	# ∀▋ Select entire file   	「⇧ 5」	「select_all」

    'A-j'	= 'copy_selection_on_next_line'	# 🠷 Copy sel onto the next     line (add ‸cursor below) 	「⇧ c」	「」
    'A-k'	= 'copy_selection_on_prev_line'	# 🠵 Copy sel onto the previous line (add ‸cursor above) 	「⇧⎇c」	「」
    'A-J'	= 'copy_selection_on_next_line'	# ᵡ🠷 Cut  sel from the previous line (del ‸cursor above)	「⇧ c」	「」 !!!not implemented
    'A-K'	= 'copy_selection_on_prev_line'	# ᵡ🠵 Cut  sel from the next     line (del ‸cursor below)	「⇧⎇c」	「」
    'A-l'	= 'select_prev_sibling'        	# 🢔⸙ Select previous sibling node in syntax tree 🌳TS    	「⎇ p」	「」 🌳🌲🌴𐇲🎄⸙🌿
    'A-;'	= 'select_next_sibling'        	# ⸙🢖 Select next     sibling node in syntax tree 🌳TS    	「⎇ m」	「flip_selections」
    'M'  	= 'shrink_selection'           	# ⸙− Shrink syntax tree object sel          🌳TS ⸙₋      	「⎇ i」	「」
    '<'  	= 'expand_selection'           	# ⸙₊ Expand sel to parent syntax node       🌳TS ⸙₊      	「⎇ o」	「」
    'A-s'	= 'select_regex'               	# 𝖗▋ Select all regex matches inside sels               	「  s」	「split_selection_on_newline」
    'N'  	= 'split_selection'            	# ䷖𝖗 on regex matches                                   	「⇧ s」	「search_prev」
    'A-n'	= 'split_selection_on_newline' 	# ䷖␤ (﹨␤)                                               	「 ⎇s」	「」

    "'"    	= 'collapse_selection'        	# 🢖🢔 Collapse sel onto a single ‸cursor           	「  ;」 	「」
    "A-'"  	= 'flip_selections'           	# ⮀ Flip sel          ‸cursor and   _anchor       	「 ⎇;」 	「」
    'A-a'  	= 'flip_selections'           	# ⮀ Flip sel          ‸cursor and   _anchor       	⇧[ ⎇;」	「」
    # 'A-A'	= 'flip_selections'           	# ⮀ Flip sel          ‸cursor and   _anchor       	⇧[ ⎇;」	「」  !!! revert after https://github.com/helix-editor/helix/issues/1486 is implemented
    'A-p'  	= 'ensure_selections_forward' 	# ↠ Flip sel forward: ‸cursor after _anchor       	「⇧⎇;」 	「」
    'A-:'  	= 'ensure_selections_forward' 	# ↠ Flip sel forward: ‸cursor after _anchor       	「⇧⎇;」 	「」
    #'A-l' 	= 'rotate_selections_backward'	# ⟲ Rotate main sel backward (← with many columns)	「⇧ 9」 	「」
    #'A-;' 	= 'rotate_selections_forward' 	# ⟳ Rotate main sel forward  (→ with many columns)	「⇧ 0」 	「flip_selections」
    'A-m'  	= 'rotate_selections_forward' 	# ⟳ Rotate main sel forward  (↓ with many lines)  	「⇧ 0」 	「」
    'A-,'  	= 'rotate_selections_backward'	# ⟲ Rotate main sel backward (↑ with many lines)  	「⇧ 9」 	「remove_primary_selection」
    'A-u'  	= 'remove_primary_selection'  	# ᵡ         the primary sel                       	「 ⎇,」 	「earlier」
    'A-i'  	= 'keep_primary_selection'    	# ᵡ∀ all but the primary sel (keep only)          	「  ,」 	「」
    'A-U'  	= 'no_op'                     	# ᵡᵡ undo remove sel                              	「⇧ ⎇,」	「earlier」 !!!missing
    'K'    	= 'keep_selections'           	# ᵏ𝖗 sels not matching the regex (keep)           	「⇧ k」 	「keep_selections」
    'L'    	= 'remove_selections'         	# ᵡ𝖗 sels     matching the regex                  	「⇧⎇k」 	「」
    'A-Z'  	=['keep_primary_selection'    	# 🢗🢔 collapse everything to a single cursor       	「  」  	「」		 
      ,    	  'collapse_selection']       	                                                  	      	#

    'minus'	= 'trim_selections'             	# ✁Trim whitespace from the sel                    	「⇧ -」 	「」
    '_'    	= 'merge_consecutive_selections'	# ⛙ Merge consecutive sels ⨝                       	「⇧⎇ -」	「trim_selections」
    # '+'  	= 'dupe_selections'             	# 🗐Duplicate sel (currently nonfunctional/disabled)	「⇧ =」 	「dupe_selections」


  #Ⓝ Change ——————————————————————————————————————————————————————————————————————
    #            	Compat with non-modal editors
    'A-del'      	= 'delete_word_forward'              	# ⌦ω ᵡ word →                  	 ⓘ「  ⎇d」	「」
    'C-del'      	= ['extend_next_long_word_end',      	# ⌦W                           	「   」   	「」
                 	   'delete_selection']               	# ᵡ Word →                     	 
    'A-backspace'	= 'delete_word_backward'             	# ⌫ω ᵡ word ←                  	ⓘ「 ⎈w」	「」
    'C-backspace'	= ['extend_prev_long_word_start',    	# ⌫W                           	「   」 	「」
                 	   'delete_selection']               	# ᵡ Word ←                     	 
    # 'del'      	= 'delete_selection'                 	# ᵡ▋                           	「  d」	「」
    'S-del'      	= 'delete_selection_noyank'          	# 🕱▋                           	「 ⎇d」	「」
    'S-ret'      	= ['open_below','normal_mode']       	# ⭣␤ Open new line below sel   	「  o」	「」
    'ret'        	= ['open_above','normal_mode']       	# ⭡␤ Open new line above sel   	「⇧ o」	「」
    'C-ret'      	= ':reflow'                          	# ↪ Hard-wrap selected lines ䷖↪	「   」	「」
    'C-/'        	= 'toggle_comments'                  	# // un-/comment sels          	「 ⎈c」	「」 !!!fail
    # 'C-?'      	= 'toggle_comments_block'            	# /* un-/comment sels (block)  	「 ⎈c」	「」 !!!missing
    #            	line                                 	                               	     	 
    'C-J'        	= ['extend_to_line_bounds',          	# ━⮃ swap line ↓               	「 」  	「」!!! not implemented yet
                 	   'delete_selection',               	#                              	     	 github.com/helix-editor/helix/issues/2245
                 	   'paste_after']                    	#                              	     	 
    'C-K'        	= ['extend_to_line_bounds',          	# ━⮁ swap line ↑               	「 」  	「」
                 	   'delete_selection','move_line_up',	#                              	     	 
                 	   'paste_before']                   	#                              	     	 

    # '.'      	= 'N/A'                              	# ∞ Repeat last change        	「.」     	「n/a」
    '6'        	= 'delete_char_forward'              	# ⌦ !!!missing ∀*             	「 ⌦」    	「<5>」
    'x'        	= 'delete_selection'                 	# ᵡ▋                          	「  d」   	「extend_line_below」
    'A-x'      	= 'delete_selection_noyank'          	# 🕱▋ (...without copying)     	「 ⎇d」   	「」
    # 'A-c'    	= 'change_selection'                 	# Δ                           	「  c」   	「change_selection_noyank」
    'h'        	= 'delete_char_backward'             	# ⌫c ᵡ char ←                 	「⌫」     	「move_char_left」
    'H'        	= 'delete_char_forward'              	# ⌦c ᵡ char →                 	「⇧⌦」    	「」
    'A-h'      	= 'delete_word_backward'             	# ⌫ω ᵡ word ←                 	ⓘ「 ⎈w」  	「」
    'A-H'      	= 'delete_word_forward'              	# ⌦ω ᵡ word →                 	 ⓘ「  ⎇d」	「」
    'C-h'      	= ['move_prev_long_word_start',      	# ⌫W                          	「   」   	「」
               	   'delete_selection']               	# ᵡ Word ←                    	 
    'C-x'      	= ['yank_main_selection_to_clipboard'	                              	,
               	   'delete_selection']               	#                             	      	×📋 cut to clipboard <i class='fa fa-clipboard'></i>	「   」	「decrement」
    'backspace'	= 'delete_char_backward'             	# ⌫                           	「I.bs」	「」
    'X'        	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside sel  	「⇧ j」 	「extend_to_line_bounds」
    'A-X'      	= 'join_selections_space'            	# ᵡ␤,␠ Join lines,select space	「⇧⎇ j」	「」

    # 'backspace'	= 'delete_char_backward'	# ⌫c ᵡ char ←	「backspace」	「delete_char_backward」
    # 'C-h'      	= 'delete_char_backward'	# ⌫c ᵡ char ←	「C-h」      	「delete_char_backward」
    'del'        	= 'delete_char_forward' 	# ⌦c ᵡ char →	「delete」   	「delete_char_forward」
    # 'C-d'      	= 'delete_char_forward' 	# ⌦c ᵡ char →	「C-d」      	「delete_char_forward」

    't'  	= 'replace'                          	# 🗘c  Replace with a character               	   「  r」	「find_till_char」
    'T'  	= 'replace_with_yanked'              	# 🗘📋 Replace with copied text                	「⇧ r」   	「till_prev_char」  <i class='fa fa-copy'></i>
    'A-t'	= 'replace_selections_with_clipboard'	# 🗘📋 Replace sels by clipboard contents	「☰␠ ⇧r」 	「」 <i class='fa fa-clipboard'></i>

    #'`' 	= ''                   	# ☰𝔸𝕒 Case conversion mode	「  」  	「switch_to_lowercase」 !!!missing aliases
    'B'  	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)          	「⇧  `」	「」
    'C-b'	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	「 ⎇`」 	「」

    'A-.'	= 'unindent'	# ⇚ (selection)	「⇧,」	「repeat_last_motion」
    'A-/'	= 'indent'  	# ⇛ (selection)	「⇧.」	「」

    'q'	= 'record_macro'   	# ⏺ Start/stop  macro recording to the selected register  	≝「  q」	「record_macro」
    'Q'	= 'replay_macro'   	# ▶  Play back a recorded macro from the selected register	≝「⇧ q」 replay_macro]
    '"'	= 'select_register'	# ®  Select a register to copy/paste from                 	≝「  '<reg>」	「select_register」

    # 'b'	= 'repeat_last_change'   	# ∞ Repeat last change        	「  .」 	「move_prev_word_start」 !!!missing
    'i'  	= 'insert_mode'          	# ⤹⎀ Insert before sel        	≝「  i」	「insert_mode」
    'o'  	= 'append_mode'          	# ⎀⤸ Insert after sel (append)	「  a」 	「open_above」
    'I'  	= 'open_above'           	# ⭡␤ Open new line above sel  	「⇧ o」 	「insert_at_line_start」
    'O'  	= 'open_below'           	# ⭣␤ Open new line below sel  	「  o」 	「insert_at_line_end」
    'u'  	= 'undo'                 	# ⎌ Undo change               	「  u」 	「undo mode」
    'y'  	= 'redo'                 	# ↷ Redo change               	「⇧ u」 	「yank」
    'U'  	= 'earlier'              	# 🕘 Move backward in history  	「⇧ ⎇u」	「redo」   <i class='fa fa-history'></i>
    'Y'  	= 'later'                	# 🕒 Move forward  in history  	「⇧⎇u」 	「」 ⏱ <i class='fa fa-clock-o'></i>
    'v'  	= 'paste_after'          	# 📋⤹ Paste after sel          	「  p」 	「select_mode」 ⤹<i class='fa fa-copy'></i>
    'C-v'	= 'paste_clipboard_after'	# 📋⤹ Paste after sel          	「☰␠ p」	「」  <i class='fa fa-copy'></i>⤹
    'V'  	= 'paste_before'         	# ⤸📋 Paste before sel         	「⇧ p」 	「」  <i class='fa fa-clipboard'></i>⤹
    #'I' 	= 'insert_at_line_start' 	# ⎀⭰ Insert at line start     	≝「⇧ i」	「insert_at_line_start」
    #'A' 	= 'insert_at_line_end'   	# ⭲⎀ Insert at line end       	≝「⇧ a」	「insert_at_line_end」

    'A-I'	=["split_selection_on_newline"	# ⭰䷖ Line: split & insert @ start	「」	「」
     ,   	  "insert_at_line_start"]     	#                                	  	 
    'A-O'	=["split_selection_on_newline"	# ䷖⭲ Line: split & insert @ end  	「」	「」
     ,   	  "insert_at_line_end"]       	#                                	  	 

  #Ⓝ Select manipulation ————————————————————————————————————————————————————————————————————
    '('	= 'rotate_selection_contents_backward'	# ⟲ Rotate sel contents backward      	「⇧⎇9」 	「rotate_selections_backward」
    ')'	= 'rotate_selection_contents_forward' 	# ⟳ Rotate sel contents forward       	「⇧⎇0」 	「rotate_selections_forward」
    '7'	= 'align_selections'                  	# ⥂ Align sel in columns !!!missing ∀*	「⇧ 7」 	「<7>」
    '&'	= 'align_selections'                  	# ⥂ Align sel in columns              	≝「⇧ 7」	「align_selections」
    '='	= 'format_selections'                 	# ℱ Format sel (!!!missing) (LSP)     	≝「  =」	「format_selections」

  #Ⓝ   	Misc                        	 
  'z'  	= 'toggle_comments'         	# // un-/comment sels                         	「 ⎈c」	「☰👁」
  # 'Z'	= 'toggle_comments_block'   	# /* un-/comment sels (block)                 	「 」  	「」 !!!missing command
  'C-m'	= 'decrement'               	# ⊖ o̠ Decrement object (number) under ‸cursor	「 ⎈x」	「」 <span class='cd'>o&#800;</span>
  'C-,'	= 'increment'               	# ⊕ o̟ Increment object (number) under ‸cursor	「 ⎈a」	「」 <span class='cd'>o&#799;</span> !!!fails
  '\'  	= ':toggle soft-wrap.enable'	# ↪   toggle soft wrap                        	「」   	「」
  'C-l'	= 'suspend'                 	# ⏾ Suspend job💤                              	「⎈z」 	「」

  '$'	= 'shell_keep_pipe'	# $ᵏ| Pipe each sel into shell command, keep sels where command returned 0	≝「⇧ 4」	「shell_keep_pipe」

  #Ⓝ space mode
  # "'"	= 'last_picker'	# 「collapse_selection」 Open last fuzzy picker

  #Ⓝ Shell	#                      	#
  '!'     	= 'shell_insert_output'	# 🢔$ Run shell cmd, inserting output before each sel	「⇧  1」	≝「shell_insert_output」
  '@'     	= 'shell_append_output'	# $🢖 Run shell cmd, appending output after  each sel	「⇧⎇1」 	「」
  'A-!'   	= 'shell_append_output'	# $🢖 Run shell cmd, appending output after  each sel	「⇧⎇1」 	≝「shell_append_output」

  ###Ⓝ ☰Minor modes  Accessible from Normal mode, typically switch back to Normal mode after a command

  [keys.	'normal'.'F1']        	#Ⓝ ☰? Help mode                                            	「  」  	「」
   #'F1'	= 'show-keymap'         	# ⌨ Help !!!missing                                         	「  」  	「」
    'F2'	= ':tree-sitter-scopes' 	# 🌳 Tree sitter scopes (for theming and development)        	「  」  	「」
    'F3'	= ':tree-sitter-subtree'	# 🌳 Tree sitter subtree under cursor (for debugging queries)	「  」  	「」
    'c' 	= ':character-info'     	# 🔣ℹ Character info                                         	「  」  	「」


  [keys. 	'normal'.'`']       	#Ⓝ ☰𝔸𝕒 Case conversion mode	「   」 	「switch_to_lowercase」
    '`'  	= 'switch_case'        	# 𝕒⇋𝔸 (selection)          	「⇧ `」 	「」
    'j'  	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)           	「  `」 	「」
    'k'  	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)           	「 ⎇`」 	「」
    # 'l'	= 'switch_to_sentence' 	# 𝔸𝕒 𝔹𝕓 (selection)        	「 」   	「」 !!!missing
    # ';'	= 'switch_to_camel'    	# 𝕔𝕒𝕄𝕖𝕝 (selection)        	「 」   	「」 !!!missing
    # 'm'	= 'switch_to_mixed'    	# 𝕄𝕚ℂ𝕒 (selection)         	「 」   	「」 !!!missing
    # '-'	= 'switch_to_dash'     	# 𝕒-𝕓 (selection)          	「 」   	「」 !!!missing
    # '.'	= 'switch_to_dot'      	# 𝕒.𝕓 (selection)          	「 」   	「」 !!!missing


  [keys.      	'normal'.'p']     	#Ⓝ ☰👁 View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」

    # 'p'	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
  [keys.      	'normal'.'P']     	#Ⓝ 👁ₛ View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」

  [keys.      	'normal'.'Z']     	#Ⓝ 👁ₛ View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」


  [keys. 	'normal'.'g']            	#Ⓝ ⓖ☰⮊ Goto mode Jumps to various locations	「$!」     	「」
    'p'  	= 'no_op'                   	#                                          	   「   」 	「goto_previous_buffer」
    'b'  	= 'jumplist_picker'         	# ☰🖈 List jumplist                         	   「☰␠j」 	「goto_window_bottom」
    'a'  	= 'goto_first_nonwhitespace'	# 𝕒⤝ line start 1ₛₜ non-whitespace char ¬␣ 	   「  s」 	「goto_last_accessed_file」
    's'  	= 'goto_line_end'           	# ⭲ line end                               	   「  l」 	「goto_first_nonwhitespace」
    'h'  	= 'goto_line_start'         	# ⤝ line start                             	   ≝「  h」	「goto_line_start」
    'g'  	= 'goto_file_start'         	# ━№⇱ line number `<n>` else file start ⎯⭱ 	   ≝「  g」	「goto_file_start」
    'j'  	= 'move_line_down'          	# ━▼ line down (ignore wrap)               	   「  e」 	「」
    'k'  	= 'move_line_up'            	# ━▲ line up   (ignore wrap)               	   「  g」 	「goto_line_end」
    "'"  	= 'goto_last_line'          	# ⇲ file end   ⭳                           	   「  e」 	「」
    'l'  	= 'goto_prev_paragraph'     	# 🢔¶ Move paragraph start                  	「]p 」    	「goto_line_end」
    ';'  	= 'goto_next_paragraph'     	# ¶🢖 Move paragraph end                    	「[p 」    	「」
    '.'  	= 'goto_prev_paragraph'     	# 🢔¶ Move paragraph start                  	「[p  」   	「goto_last_modification」
    '/'  	= 'goto_next_paragraph'     	# ¶🢖 Move paragraph end                    	「]p  」   	「」
    'f'  	= 'goto_file'               	# files in the selection                   	   ≝「  f」	「goto_file」
    'm'  	= 'goto_window_bottom'      	# 🗔⭳ screen bottom                         	「  b」    	「goto_last_modified_file」
    ','  	= 'goto_window_top'         	# 🗔⭱ screen top                            	「  t」    	「」
    'n'  	= 'goto_window_center'      	# 🗔· screen middle                         	「  c」    	「goto_next_buffer」
    'D'  	= 'goto_declaration'        	# 🆔 declaration (LSP)                      	「⇧  d」   	「goto_declaration」
    'd'  	= 'goto_definition'         	# ≝ definition (LSP)                       	   ≝「  d」	「goto_definition」
    'F12'	= 'goto_definition'         	# ≝ definition (LSP)                       	   「  d」 	「」
    'i'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	   ≝「  i」	「goto_implementation」
    't'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	   「  i」 	「goto_window_top」
    'r'  	= 'goto_reference'          	# 🅁※ references (LSP)                      	≝「  r」   	「goto_reference」
    'e'  	= 'goto_type_definition'    	# τ≝ type definition (LSP)                 	   「  y」 	「goto_last_line」
    'y'  	= 'goto_type_definition'    	# τ≝ type definition (LSP)                 	   ≝「  y」	「goto_type_definition」
    'c'  	= 'goto_last_accessed_file' 	# 🕮␜ file last accessed/alternate          	「  a」    	「goto_window_center」
    'v'  	= 'goto_last_modified_file' 	# ✎␜ file last modified/alternate          	「  m」    	「」
    '1'  	= 'goto_previous_buffer'    	# buffer previous                          	   「  p」 	「」 !!!missing ∀*
    '2'  	= 'goto_next_buffer'        	# buffer next                              	   「  n」 	「」 !!!missing ∀*
    '3'  	= 'jump_backward'           	# ⎗̡ Jump backward on the jumplist         	   「   」 	「」 !!!missing ∀*
    '4'  	= 'jump_forward'            	# ⎘̡ Jump forward  on the jumplist         	   「   」 	「」 !!!missing ∀*
    'u'  	= 'goto_last_modification'  	# 🕘 last modification in current file      	「  .」    	「goto_line_start」 <i class='fa fa-history'></i>
    # "'"	= 'goto-char#'              	# c#                                       	   「   」 	「」 !!! not available

    'A'	= 'extend_to_first_nonwhitespace'	# 𝕒⤝▋ Extend	━line start	「」	「」!!!delete after https://github.com/helix-editor/helix/issues/1486 is implemented


  [keys.	'normal'.'n']            	#Ⓝ ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>	「$!」  	「」
    'n' 	= 'match_brackets'          	# 🢔()🢖 Goto matching   bracket (TS)                   	「  m」 	「」
    '.' 	= 'match_brackets'          	# 🢔(   Goto next left  bracket (TS)                   	「  」  	「」 !!!missing
    '/' 	= 'match_brackets'          	#   )🢖 Goto next right bracket (TS)                   	「  」  	「」 !!!missing
    'i' 	= 'surround_add'            	# (+)  Surround current selection with <char>         	「  s」 	「」
    't' 	= 'surround_replace'        	# (🗘) Replace surround character <from> with <to>     	「  r」 	「」
    'x' 	= 'surround_delete'         	# (ᵡ)  Delete  surround character <char>              	「  d」 	「」
    'e' 	= 'select_textobject_around'	# 🢔O🢖  Select around textobject                       	「  a」 	「」
    'a' 	= 'select_textobject_inner' 	# 🢖O🢔  Select inside textobject                       	「  i」 	「」


  [keys.     	'normal'.'C-w']	#Ⓝ ☰🗔  Window mode                    	Ⓝ「⎈ w」  	「」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'C-e'    	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'a'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    's'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	 「  w」  	「hsplit」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」


  [keys    	.'normal'.'space']                     	#Ⓝ ☰␠  Space mode              	Ⓝ「 ␠」  	「」
   #'space'	= 'insert_mode'                       	# ⁁⤸ Insert before sel             	「  i」  	「」 !!!panick! !!!missing
    'ret'  	= 'command_mode'                      	# Ⓒ Enter command mode             	「  ⎋」  	「」
    'F'    	= 'file_picker_in_current_directory'  	# 🗁 Open file   picker@curdir      	「☰␠⇧ f」	「file_picker_in_current_directory」
    'c'    	= 'yank_main_selection_to_clipboard'  	# 📋▋ Copy main sel to sys clipboard	「☰␠ ⇧y」	「」 <i class='fa fa-clipboard'></i>▋
    'x'    	= ['yank_main_selection_to_clipboard',	# ×📋 ▋                             	「   」  	「」 <i class='fa fa-clipboard'></i>
           	   'delete_selection']                	# cut to clipboard                 	「   」  	「」  create a new buffer and paste a buffer there !!! not available yet
    #      	line                                  	                                   	       	 
    'J'    	= ['extend_to_line_bounds',           	# ━⮃ swap line ↓                   	「 」    	「」!!! not implemented yet
           	   'delete_selection',                	#                                  	       	 github.com/helix-editor/helix/issues/2245
           	   'paste_after']                     	#                                  	       	 
    'K'    	= ['extend_to_line_bounds',           	# ━⮁ swap line ↑                   	「 」    	「」
           	   'delete_selection','move_line_up', 	#                                  	       	 
           	   'paste_before']                    	#                                  	       	 

    'p'	= 'no_op'                	#                                         	≝「   p」 	「paste_clipboard_after」
    'P'	= 'no_op'                	#                                         	≝「⇧ p」  	「paste_clipboard_before」
    'Y'	= 'no_op'                	#                                         	「   」   	「yank_main_selection_to_clipboard」
    'S'	= 'no_op'                	#                                         	「⇧   」  	「workspace_symbol_picker」
    'r'	= 'command_palette'      	# ☰Ⓒ Command Palette                      	「   」   	「rename_symbol]
    ';'	= 'command_mode'         	# Ⓒ Enter command mode                    	「⇧ ;」   	「」
    'j'	= 'extend_line'          	# ⮒ Select cur/next(if selected) line     	「  x」   	「」
    'k'	= 'keep_selections'      	# ᵏ𝖗 sels not matching the Re (keep)      	   「⇧ k」	「」
    'l'	= 'remove_selections'    	# ᵡ𝖗 sels     matching the Re             	   「⇧⎇k」	「」
    's'	= 'select_regex'         	# 𝖗▋ Select all Re matches in sels        	   「  s」	「symbol_picker」
    'a'	= ['save_selection',     	# 🖈∀▋                                     	「⇧ 5」   	「」
       	   'select_all']         	# Save cur pos, select everything         	 
    'h'	= ['kill_to_line_start', 	# ᵡ⎯                                      	「   」	「」
       	   'kill_to_line_end']   	# Delete this line                        	 
    'g'	= 'save_selection'       	# 🖈 Save cur sel to the jumplist          	「  ⎈s」	「」
    'e'	= 'extend_to_line_bounds'	# ━ Extend sel to line bounds⎯            	「  x」 	「」
   #'q'	= '???'                  	#                                         	「  q」 	「」
    't'	= 'replace_with_yanked'  	# 🗘📋 Replace with copied text             	「⇧ r」 	「」  <i class='fa fa-copy'></i>
    #  	🄻LSP                     	                                          	 
    'R'	= 'rename_symbol'        	# ✎ Rename symbol                         	「  r」 	「replace_selections_with_clipboard」
    'o'	= 'hover'                	# ? Show doc for item under cursor        	「  k」 	「」
    'y'	= 'code_action'          	# Ⓐ Apply code action)                    	「☰␠ a」	「yank_joined_to_clipboard」
    #  	                         	                                          	 
    '/'	= 'global_search'        	# 🔎🗁 Global search in workspace folder    	≝「☰␠ /」	「global_search」
    'v'	= 'paste_clipboard_after'	# 📋⤹ Paste after sels                     	「☰␠ p」 	「」
   #'z'	= 'list_kills'           	# 🕱☰ new buffer with clipboard content    	「   」  	「」	 !!!missing
    'n'	= 'split_selection'      	# ䷖𝖗 on regex matches                     	「⇧ s」  	「」
    'b'	= 'switch_to_lowercase'  	# 𝔸𝕒  (selection)                         	「  `」  	「buffer_picker」
    "'"	= 'flip_selections'      	# ⮀ Flip sel cursor and anchor            	「 ⎇;」  	「」
    '\'	= 'shell_pipe'           	# Pipe sel thru shell, replace with output	「⇧ \」  	「」
    #  	Numbers row              	                                          	 
   #"'"	= 'last_picker'          	# ☰☾ ∞Open last fuzzy picker              	「  」 	「」
    '6'	= 'switch_to_uppercase'  	# 𝕒𝔸 (selection)                          	「⇧⎇`」	「」 !!! change to Sentence Case
   #'7'	= 'toggle_spellcheck'    	# ⇝ spell check                           	「   」	「」  !!!missing
    #  	Modes                    	                                          	 
   #'u'	= 'mode_U'               	# ☰u TBD LSPs? or list_kills like z       	「   」	「」  !!!missing_aliases
   #'i'	= 'mode_Register'        	# ☰® Register/copy/paste etc.             	「   」	「」
   #'p'	= 'mode_P'               	# ☰p TBD                                  	「」「paste_clipboard_after」 !!!missing_aliases
   #'w'	= 'mode_window'          	# ☰🗔 Window mode                          	「☰␠ w」	「mode_window」 !!!missing_aliases
   #'f'	= 'mode_file'            	# ☰␜ File mode                            	「   」 	「file_picker」
   #'d'	= 'mode_bracket'         	# ☰⟪ Insert various brackets              	「   」 	「」
   #'m'	= 'mode_symbol'          	# ☰🅂 Symbol mode                          	「   」 	「」
   #','	= 'mode_diag'            	# ☰🛠 Diagnostics mode                     	「   」 	「」

  [keys	.'normal'.'space'.'m']           	#Ⓝ ☰🅂 Symbol mode in Space mode     	「☰␠ f」		「」
    'm'	= 'symbol_picker'               	# 🅂🗋 Document  symbols 🄻                	「☰␠ s」	「」 ⚛Ⓢ
    ','	= 'workspace_symbol_picker'     	# 🅂🗍 Workspace symbols 🄻                	「☰␠⇧s」	「」  ⚛Ⓢ
  [keys	.'normal'.'space'.',']           	#Ⓝ ☰🛠 Diagnostics mode in Space mode	「☰␠ f」		「」
    ','	= 'diagnostics_picker'          	# 🛠🗋 Document  diagnostics picker 🄻     	「☰␠ d」	「」
    'm'	= 'workspace_diagnostics_picker'	# 🛠🗍 Workspace diagnostics picker 🄻     	「☰␠⇧d」	「」


  [keys	.'normal'.'space'.'f']      	#Ⓝ ☰␜ File mode in Space mode          	「☰␠ f」		「」
    'j'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'k'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
   #'l'	= 'open file at cursor'    	# ❚␜ open file at cursor                   	「  」  	「  」
    'f'	= 'buffer_picker'          	# ☰b Open buffer picker                    	「  b」 	「file_picker」
   #'d'	= 'show in desktop'        	# show in desktop                          	「  」  	「  」
    's'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'S'	= ['commit_undo_checkpoint'	# 💾∀v all views                            	「  」  	「  」
      ,	  ':write-all']            	                                           	      	#
  'A-s'	= ':update'                	# 💾Δ save file if modified                 	「  」  	「  」
    'a'	= 'goto_last_accessed_file'	# 🕮 file last accessed/alternate           	「ⓖ a」 	「  」
   #'g'	= 'bookmark bmenu list'    	# ☰🖈bookmark bmenu list                    	「  」  	「  」
   #'h'	= 'bookmark set'           	# 🖈 bookmark set                           	「  」  	「  」
   #'u'	= 'open last closed'       	# open last closed                         	「  」  	「  」
   #'o'	= 'open file fast'         	# prompt toopen a file from bookmark       	「  」  	「  」
   #'r'	= 'rename_file'            	# ✎ rename current file                    	「  」  	「  」
   #'e'	= 'open in external app'   	# open in external app                     	「  」  	「  」
   #'w'	= 'find_file'              	# 🔎 Find file                              	「  」  	「  」<i class='mss mss-Search-3'></i>
   #'q'	= 'mode_fs_close'          	# ☰× Close buffers/files un/saved          	「  」  	「  」
    'v'	= 'goto_last_modified_file'	# ✎ file last modified/alternate           	「ⓖ m」 	「  」
   #'c'	= 'copy file path'         	# 📋C:\ copy file path                      	「  」  	「  」 <i class='fa fa-clipboard'>C:\
   #'t'	= 'list recently closed'   	# list recently closed                     	「  」  	「  」
   #'y'	= 'open recently closed'   	# open recently closed                     	「  」  	「  」
    'o'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
    'n'	= ':new'                   	# 🗋 new empty buffer                       	Ⓝ「⎈n」 	「  」
   #'b'	= 'recentf open files'     	# recentf open files                   「  」	「  」
   #'\'	= 'open in terminal'       	# open in terminal                         	「  」	「  」
    '`'	= ':reload'                	# 🗘 Discard, Reload      from source       	「  」	「  」
    '~'	= ':reload-all'            	# 🗘∀ Discard, Reload all from source       	「  」	「  」
    'p'	= ':config-open-workspace' 	# 🛠🗋 Workspace config file                 	「  」	「  」

    ','	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」
    'O'	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」

  [keys. 	'normal'.'space'.'f'.     	'q'] #Ⓝ ☰␜☰ᵡ Close mode in File mode in Space mode
    'r'  	= ':buffer-close-all'    	# ᵡ∀b buffer all
    'f'  	= ':buffer-close'        	# ᵡb buffer current
    'v'  	= ':buffer-close-others' 	# ᵡ∁b buffer others
    'e'  	= ':quit-all'            	# ᵡ∀v view  all
    'd'  	= ':quit'                	# ᵡv view   current
    'w'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    's'  	= ':write-quit'          	# 💾ᵡv view current
    'u'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    'j'  	= ':write-quit'          	# 💾ᵡv view current
    'b'  	= ':write-buffer-close'  	# 💾ᵡb buffer save & close. Accepts an optional path
    ';'  	= ':cquit'               	# ⎋ Quit with exit code (default 1)
  [keys. 	'normal'.'space'.'f'.     	'q'.'q'] #Ⓝ ☰␜☰ᵡ Close All mode in File mode in Space mode
    'r'  	= ':buffer-close-all!'   	# 🕱∀b buffer all (kill unsaved)
    'f'  	= ':buffer-close!'       	# 🕱b buffer current (kill unsaved)
    'v'  	= ':buffer-close-others!'	# 🕱∁b buffer others (kill unsaved)
    'e'  	= ':quit-all!'           	# 🕱∀v view  all
    'd'  	= ':quit!'               	# 🕱v view   current
    'w'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    's'  	= ':write-quit!'         	# 💾🕱v view current
    'u'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    'j'  	= ':write-quit!'         	# 💾🕱v view current
    'b'  	= ':write-buffer-close!' 	# 💾ᵡb buffer save & close (force). Accepts an optional path
    ';'  	= ':cquit!'              	# ⎋ Quit with exit code (default 1)

  [keys. 	'normal'.'space'.'f'.     	'x'] #Ⓝ ☰␜☰ᵡ Close mode in File mode in Space mode
    'r'  	= ':buffer-close-all'    	# ᵡ∀b buffer all
    'f'  	= ':buffer-close'        	# ᵡb buffer current
    'v'  	= ':buffer-close-others' 	# ᵡ∁b buffer others
    'e'  	= ':quit-all'            	# ᵡ∀v view  all
    'd'  	= ':quit'                	# ᵡv view   current
    'w'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    's'  	= ':write-quit'          	# 💾ᵡv view current
    'u'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    'j'  	= ':write-quit'          	# 💾ᵡv view current
    'b'  	= ':write-buffer-close'  	# 💾ᵡb buffer save & close. Accepts an optional path
    ';'  	= ':cquit'               	# ⎋ Quit with exit code (default 1)
  [keys. 	'normal'.'space'.'f'.     	'x'.'x'] #Ⓝ ☰␜☰ᵡ Close All mode in File mode in Space mode
    'r'  	= ':buffer-close-all!'   	# 🕱∀b buffer all (kill unsaved)
    'f'  	= ':buffer-close!'       	# 🕱b buffer current (kill unsaved)
    'v'  	= ':buffer-close-others!'	# 🕱∁b buffer others (kill unsaved)
    'e'  	= ':quit-all!'           	# 🕱∀v view  all
    'd'  	= ':quit!'               	# 🕱v view   current
    'w'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    's'  	= ':write-quit!'         	# 💾🕱v view current
    'u'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    'j'  	= ':write-quit!'         	# 💾🕱v view current
    'b'  	= ':write-buffer-close!' 	# 💾ᵡb buffer save & close (force). Accepts an optional path
    ';'  	= ':cquit!'              	# ⎋ Quit with exit code (default 1)


  [keys	.'normal'.'space'.'i'] #Ⓝ ☰®  Register/copy/paste etc.
    'i'	= 'select_register'                  	# ®  Select a register to copy/paste from '<reg> ??? make sticky? for further reg ops or use the main layer
   #'7'	= 'append_to_register 1'             	# ®1⎀ Append current line/selection to reg 1
   #'8'	= 'clear_register 1'                 	# ®1× x
   #'9'	= 'copy_to_register 1'               	# ®1🗐 x
   #'0'	= 'paste_from_register 1'            	# ®1📋 x
   #'1'	= 'append_to_register 2'             	# ®2⎀ Append current line/selection to reg 2
   #'2'	= 'clear_register 2'                 	# ®2× x
   #'3'	= 'copy_to_register 2'               	# ®2🗐 x
   #'4'	= 'paste_from_register 2'            	# ®2📋 x
    't'	= 'replace_selections_with_clipboard'	# 🗘▋📋 Replace sels by clipboard contents    	「☰␠⇧r」 <i class='fa fa-clipboard'></i>▋
    'x'	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside sel                	Ⓝ「⇧j」
    'v'	= 'paste_clipboard_before'           	# ⤸📋 Paste after  sels                      	「☰␠⇧p」 ⤸<i class='fa fa-clipboard'></i>
    'c'	= 'yank_joined_to_clipboard'         	# 📋∀▋ Copy all sels to clipboard (joined) ⨝📋	「☰␠ y」 <i class='fa fa-clipboard'></i> ∀❚ ∀▋
    'h'	= ':clear-register'                  	# ᵡ® Clear registers
   #'a'	= ':clipboard-yank'                  	# Copy main   sel to system         clipboard
   #'a'	= ':clipboard-yank-join'             	# Copy joined sel to system         clipboard with sep \n
   #'a'	= ':primary-clipboard-yank'          	# Copy main   sel to system primary clipboard
   #'a'	= ':primary-clipboard-yank-join'     	# Copy joined sel to system primary clipboard with sep \n
   #'a'	= ':clipboard-paste-after'           	# Paste system  clipboard after   sels
   #'a'	= ':clipboard-paste-before'          	# Paste system  clipboard before  sels
   #'a'	= ':clipboard-paste-replace'         	# Paste system  clipboard replace sels
   #'a'	= ':primary-clipboard-paste-after'   	# Paste primary clipboard after   sels
   #'a'	= ':primary-clipboard-paste-before'  	# Paste primary clipboard before  sels
   #'a'	= ':primary-clipboard-paste-replace' 	# Paste primary clipboard replace sels
   #'a'	= ':show-clipboard-provider'         	# Show clipboard provider name in status bar
    'j'	= ':sort'                            	# 𝕒🢖𝕫 Sort ranges in sel 𝟙𝟚𝟛
    'k'	= ':rsort'                           	# 𝕫🢖𝕒 Sort ranges in sel in reverse order 𝟛𝟚𝟙
   #'d'	='list-matching-lines'               	# !!!missing
   #'f'	='delete-matching-lines'             	# !!!missing
   #'g'	='delete-non-matching-lines'         	# !!!missing
   #'t'	='delete-duplicate-lines'            	# !!!missing
   #'n'	='reformat-to-sentence-lines'        	# !!!missing
   #'o'	='copy-rectangle-to-register'        	# !!!missing
   #'r'	='query-replace-regexp'              	# !!!missing
   #'h'	='mark-defun'                        	# !!!missing
   #';'	='escape-quotes'                     	# Add \ before " in current line/selection

  #[keys 	.'normal'.'space'.'d'] #Ⓝ ☰⟪ Bracket mode in Space mode (place cursor in between)
   #'RET'	= 'insert char'   	#
   #'SPC'	= 'insert unicode'	#
   #'d'  	= '()'            	# () parenthesis
   #'f'  	= '[]'            	# [] square bracket
   #'j'  	= '{}'            	# {} brace
   #'k'  	= '""'            	# "" regular double quote
   #'l'  	= "''"            	# '' regular single quote
   #'r'  	= '‹›'            	# ‹› single angle quote (single chevrons)
   #'t'  	= '«»'            	# «» double angle quote (double chevrons)
   #'n'  	= '【】'            	# 【】 black lenticular bracket
   #'m'  	= '「」'            	# 「」 corner bracket
   #'o'  	= '〔〕'            	# 〔〕 tortoise shell bracket
   #','  	= '〈〉'            	# 〈〉 angle bracket or math ⟨⟩
   #'.'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'<'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'g'  	= '‘’'            	# ‘’ curly single quote
   #'h'  	= '“”'            	# “” double curly quote
   #'y'  	= "`'"            	# `' emacs quote
   #';'  	= '=""'           	# ="" string assignment
   #'z'  	= '⸨⸩'            	# ⸨⸩ Double Parenthesis
   #'c'  	= 'date'          	# 📆📅current date
   #'p'  	= 'u+000C'        	# ␌ formfeed

  [keys.     	'normal'.'space'.'w']	#Ⓝ ☰🗔@☰␠  Window mode                    	Ⓝ「⎈ w」  	「」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'C-e'    	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'a'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    's'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	 「  w」  	「hsplit」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」


  [keys	.'normal'.'space'.'u']       	#Ⓝ 🌐 ☰ⓤ 🌳TS, 🄻LSP, 🄳DAP, and various ones
    'q'	= 'no_op'                   	#                                   	「  」  	「」
    'w'	= 'no_op'                   	#                                   	「  」  	「」
    'u'	= 'remove_primary_selection'	# ×          primary sel            	「 ⎇,」 	「」
    'i'	= 'keep_primary_selection'  	# ×∀ all but primary sel (keep only)	「  ,」 	「」
    'o'	= ':character-info'         	# 🔣ℹ Character info                 	「  」  	「」
    #  	 Δ                          	                                    	      	 
    'j'	= 'goto_next_change'        	# Δ🢖 Change            next         	「⧚  g」	「」 !!!→sticky
    'k'	= 'goto_prev_change'        	# 🢔Δ Change            previous     	「⧛  g」	「」 !!!→sticky
    'l'	= 'goto_first_change'       	# ⭰Δ Change             1st         	「⧛⇧ g」	「」 !!!→sticky
    ';'	= 'goto_last_change'        	# Δ⭲ Change            last         	「⧚⇧ g」	「」 !!!→sticky
    'b'	= ':reset-diff-change'      	# ×Δ Reset diff hunk                	「  」  	「」
    #  	 🌳TS                        	                                    	      	 
    'a'	= 'goto_prev_parameter'     	# 🢔α Argument/parameter previous    	「⧛  a」	「」 !!!→sticky
    's'	= 'goto_next_parameter'     	# α🢖 Argument/parameter next        	「⧚  a」	「」 !!!→sticky
    'd'	= 'goto_prev_function'      	# 🢔ƒ Function           previous    	「⧛  f」	「」 !!!→sticky
    'f'	= 'goto_next_function'      	# ƒ🢖 Function           next        	「⧚  f」	「」 !!!→sticky
    'z'	= 'goto_prev_comment'       	# 🢔ↄ Comment            previous    	「⧛  c」	「」 !!!→sticky
    'x'	= 'goto_next_comment'       	# ↄ🢖 Comment            next        	「⧚  c」	「」 !!!→sticky
    'c'	= 'goto_prev_class'         	# 🢔τ Type definition    previous    	「⧛  t」	「」 !!!→sticky
    'v'	= 'goto_next_class'         	# τ🢖 Type definition    next        	「⧛  t」	「」!!!→sticky
    't'	= 'goto_prev_test'          	# 🢔🧪 Test               previous    	「⧛⇧ t」	「」 !!!→sticky
    'y'	= 'goto_next_test'          	# 🧪🢖 Test               next        	「⧚⇧ t」	「」 !!!→sticky
    #  	 🄻LSP                       	                                    	      	 
    "'"	= ':format'                 	# ℱ∀ Format the file                	「  」  	「」
    'p'	= 'format_selections'       	# ℱ  Format sel               	「  =」 	「」
    'm'	= 'goto_next_diag'          	# 🛠🢖 Diagnostic next                	「⧚  d」	「」 !!!→sticky
    ','	= 'goto_prev_diag'          	# 🢔🛠 Diagnostic previous            	「⧛  d」	「」 !!!→sticky
    '.'	= 'goto_first_diag'         	# ⭰🛠 Diagnostic 1st @ doc           	「⧛⇧ d」	「」 !!!→sticky
    '/'	= 'goto_last_diag'          	# 🛠⭲ Diagnostic last @ doc          	「⧚⇧ d」	「」 !!!→sticky
    'g'	= 'code_action'             	# Ⓐ  Apply code action              	「☰␠ a」	「」
    'n'	= 'rename_symbol'           	# ✎  Rename symbol                  	「☰␠ r」	「」
    'r'	= ':lsp-workspace-command'  	# 🄲🗍 Workspace command picker       	「  」  	「」
    '\'	= ':lsp-stop'               	# ⏹🄻 Stop                           	「  」  	「」
    ']'	= ':lsp-restart'            	# 🔄🄻 Restart                        	「  」  	「」

    'h'	= ':toggle lsp.display-inlay-hints'         	# 💡 toggle inlay hints       	「  」  	「」
    'e'	= 'select_references_to_symbol_under_cursor'	# =🅂 Select symbol references	「☰␠ h」	「」
    #  	 🄳DAP                                       	                             	      	 
    '['	= 'dap_restart'                             	# 🔄🄳 Restart (DAP)           	「  」  	「」

  # [keys.'normal'.'space'.'p']	#Ⓝ ☰ⓟ TBD



  [keys.   	'normal'.'[']         	#Ⓝ ☰⧛ Unimpaired
    'j'    	= 'goto_prev_change'      	# 🢔Δ Change            	previous       	「  g」 	「」
    # 'G'  	= 'goto_first_change'     	# ⭰Δ Change            	1st            	≝「⇧ g」	「goto_first_change」
    'h'    	= 'goto_first_change'     	# ⭰Δ Change            	1st            	「⇧ g」 	「」
    'd'    	= 'goto_prev_diag'        	# 🢔🛠 Diagnostic        	previous  (LSP)	≝「  d」	「goto_prev_diag」
    # 'D'  	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	≝「⇧ d」	「goto_first_diag」
    'g'    	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	「⇧ d」 	「goto_prev_change」
    'f'    	= 'goto_prev_function'    	# 🢔ƒ Function          	previous (TS)  	≝「  f」	「goto_prev_function」
    's'    	= 'goto_prev_class'       	# 🢔τ Type definition   	previous (TS)  	「  t」 	「」
    'a'    	= 'goto_prev_parameter'   	# 🢔α Argument/parameter	previous (TS)  	≝「  a」	「goto_prev_parameter」
   #'c'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	≝「  c」	「goto_prev_comment」
    '/'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    'z'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    # 'T'  	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	≝「⇧ t」	「goto_prev_test」
    't'    	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	「⇧ t」 	「goto_prev_class」
    'p'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	≝「  p」	「goto_prev_paragraph」
    '['    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    '.'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    'space'	= 'add_newline_above'     	# ⭡␤ Add newline above 	               	≝「  ␠」	「add_newline_above」
    'm'    	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines above it
      ,    	  'delete_selection'      	# !!!missing n
      ,    	  'move_line_up'          	#
      ,    	  'paste_before']         	#

  [keys.	'normal'.'['.'c']             	#Ⓝ ☰⧛ℂ Unimpaired Config toggle ON
    'q' 	= ':set auto-save true'           	# 💾🙈 save focus lost
    'w' 	= ':set auto-format true'         	# ℱ💾 auto formatting on save
    'e' 	= ':set line-number absolute'     	# №⭳  Line number display: absolute #⭳
    'r' 	= ':set soft-wrap true'           	# ↪ Soft wrap lines
    't' 	= ':set search.wrap-around true'  	# 🔎↪  search should wrap after depleting the matches
    'a' 	= ':set auto-completion true'     	# ⎁  Auto pop up of auto-completion
    's' 	= ':set search.smart-case true'   	# 𝖗𝕒  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g' 	= ':set indent-guides.render true'	# ┊ Indent guides
    'z' 	= ':set completion-replace true'  	# ⎁ω completions replace word, not pre-cursor part
    'c' 	= ':set true-color true'          	# 🌈 Oerride auto detection of terminal truecolor
    'h' 	= ':set cursorline true'          	# 🟨━ Highlight all lines   with a cursor
    'j' 	= ':set cursorcolumn true'        	# 🟨┃ Highlight all columns with a cursor
    'd' 	= ':set auto-pairs true'          	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i' 	= ':set auto-info true'           	# 🛈  Display infoboxes
    'v' 	= ':set middle-click-paste true'  	# 🖰📋 Middle click paste support
    'm' 	= ':set mouse true'               	# 🖰 Mouse mode
    'u' 	= ':set undercurl true'           	# ‗ Override auto detection of terminal undercurl support
    'p' 	= ':set color-modes true'         	# 🚦 Color mode indicator depending on the mode itself
    'o' 	= ':config-open'                  	# 🧬 Config open   		「  」	「」
    'l' 	= ':config-reload'                	# 🧬🗘 Config reload		「  」	「」

  [keys. 	'normal'.'['.'c'.' ']             	#Ⓝ ☰⧛ℂ␠ Unimpaired Config toggle ON sub-space mode
    ' '  	= ':set whitespace.render.space all'  	# · show space
    'b'  	= ':set whitespace.render.nbsp all'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab all'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab all'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline all'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline all'	# ⏎ show newline

  [keys.	'normal'.'['.'c'.'.']            	#Ⓝ ☰⧛ℂ🙈 Unimpaired Config toggle ON hidden mode
    '.' 	= ':set file-picker.hidden true'     	# Ignore hidden files
    ',' 	= ':set file-picker.ignore true'     	# Read .ignore files
    'p' 	= ':set file-picker.parents true'    	# Read  ignore files from parent directories
    'i' 	= ':set file-picker.git-ignore true' 	# gi Read .gitignore files
    'g' 	= ':set file-picker.git-global true' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e' 	= ':set file-picker.git-exclude true'	# ge Read .git/info/exclude files
    'l' 	= ':set follow-links true'           	# Follow symlinks instead of ignoring them
    'k' 	= ':set deduplicate-links true'      	# Ignore symlinks that point at files already shown in the picker

  [keys.	'normal'.'['.'c'.'y']                           	#Ⓝ ☰⧛ℂ🄻 Unimpaired Config toggle ON LSP mode
    'k' 	= ':set lsp.enable true'                            	# False will completely disable language servers regardless of language settings
    'p' 	= ':set lsp.display-messages true'                  	# LSP progress messages below statusline
    'i' 	= ':set lsp.auto-signature-help true'               	# Enable automatic popup of signature help (parameter hints)
    'h' 	= ':set lsp.display-inlay-hints true'               	# 💡 Inlay hints
    'd' 	= ':set lsp.display-signature-help-docs true'       	# Docs under signature help popup
    's' 	= ':set lsp.snippets true'                          	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.
    'g' 	= ':set lsp.goto-reference-include-declaration true'	# Include declaration in the goto references popup


  [keys.   	'normal'.']']         	#Ⓝ ☰⧚
    'j'    	= 'goto_next_change'      	# Δ🢖 Change            	next            	「  g」 	「」
    # 'G'  	= 'goto_last_change'      	# Δ⭲ Change            	last            	≝「⇧ g」	「goto_last_change」
    'h'    	= 'goto_last_change'      	# Δ⭲ Change            	last            	「⇧ g」 	「」
    'd'    	= 'goto_next_diag'        	# 🛠🢖 Diagnostic        	next  (LSP)     	≝「  d」	「goto_next_diag」
    # 'D'  	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	≝「⇧ d」	「goto_last_diag」
    'g'    	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	「⇧ d」 	「goto_next_change」
    'f'    	= 'goto_next_function'    	# ƒ🢖 Function          	next (TS)       	≝「  f」	「goto_next_function」
    's'    	= 'goto_next_class'       	# τ🢖 Type definition   	next (TS)       	「  t」 	「」
    'a'    	= 'goto_next_parameter'   	# α🢖 Argument/parameter	next (TS)       	≝「  a」	「goto_next_parameter」
   #'c'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	≝「  c」	「goto_next_comment」
    '/'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    'z'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    # 'T'  	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	≝「⇧ t」	「goto_next_test」
    't'    	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	「⇧ t」 	「goto_next_class」
    'p'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「goto_next_paragraph」
    ']'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    '.'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    'space'	= 'add_newline_below'     	# ⭣␤ Add newline below 	                	≝「  ␠」	「add_newline_below」
    'm'    	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines below it
      ,    	  'delete_selection'      	# !!!missing n
      ,    	  'goto_line_end'         	#
      ,    	  'paste_after']          	#

  [keys. 	'normal'.']'.'c']                         	#Ⓝ ☰⧚ℂ Unimpaired Config toggle OFF
    'q'  	= ':set auto-save false'                      	# 💾🙈 save focus lost
    'w'  	= ':set auto-format false'                    	# ℱ💾 auto formatting on save
    'e'  	= ':set line-number relative'                 	# №⭳  Line number display: absolute #
    'r'  	= ':set soft-wrap false'                      	# ↪ Soft wrap lines
    't'  	= ':set search.wrap-around false'             	# 🔎↪  search should wrap after depleting the matches
    'a'  	= ':set auto-completion false'                	# ⎁  Auto pop up of auto-completion
    's'  	= ':set search.smart-case false'              	# 𝖗𝔸  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g'  	= ':set indent-guides.render false'           	# ┊ Indent guides
    'z'  	= ':set completion-replace false'             	# ⎁ω completions replace word, not pre-cursor part
    'c'  	= ':set false-color false'                    	# 🌈 Oerride auto detection of terminal falsecolor
    'h'  	= ':set cursorline false'                     	# 🟨━ Highlight all lines   with a cursor
    'j'  	= ':set cursorcolumn false'                   	# 🟨┃ Highlight all columns with a cursor
    'd'  	= ':set auto-pairs false'                     	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i'  	= ':set auto-info false'                      	# 🛈  Display infoboxes
    'v'  	= ':set middle-click-paste false'             	# 🖰📋 Middle click paste support
    'm'  	= ':set mouse false'                          	# 🖰 Mouse mode
    'u'  	= ':set undercurl false'                      	# ‗ Override auto detection of terminal undercurl support
    'p'  	= ':set color-modes false'                    	# 🚦 Color mode indicator depending on the mode itself
    'o'  	= ':config-open'                              	# 🧬 Config open   		「  」	「」
    'l'  	= ':config-reload'                            	# 🧬🗘 Config reload		「  」	「」

  [keys. 	'normal'.']'.'c'.' ']              	#Ⓝ ☰⧚ℂ␠ Unimpaired Config toggle OFFN sub-space mode
    ' '  	= ':set whitespace.render.space none'  	# · show space
    'b'  	= ':set whitespace.render.nbsp none'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab none'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab none'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline none'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline none'	# ⏎ show newline

  [keys.	'normal'.']'.'c'.'.']             	#Ⓝ ☰⧚ℂ🙈 Unimpaired Config toggle OFF hidden mode
    '.' 	= ':set file-picker.hidden false'     	# Ignore hidden files
    ',' 	= ':set file-picker.ignore false'     	# Read .ignore files
    'p' 	= ':set file-picker.parents false'    	# Read  ignore files from parent directories
    'i' 	= ':set file-picker.git-ignore false' 	# gi Read .gitignore files
    'g' 	= ':set file-picker.git-global false' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e' 	= ':set file-picker.git-exclude false'	# ge Read .git/info/exclude files
    'l' 	= ':set follow-links false'           	# Follow symlinks instead of ignoring them
    'k' 	= ':set deduplicate-links false'      	# Ignore symlinks that point at files already shown in the picker

  [keys.	'normal'.']'.'c'.'y']                            	#Ⓝ ☰⧚ℂ🄻 Unimpaired Config toggle OFF LSP mode
    'k' 	= ':set lsp.enable false'                            	# False will completely disable language servers regardless of language settings
    'p' 	= ':set lsp.display-messages false'                  	# LSP progress messages below statusline
    'i' 	= ':set lsp.auto-signature-help false'               	# Enable automatic popup of signature help (parameter hints)
    'h' 	= ':set lsp.display-inlay-hints false'               	# 💡 Inlay hints
    'd' 	= ':set lsp.display-signature-help-docs false'       	# Docs under signature help popup
    's' 	= ':set lsp.snippets false'                          	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.
    'g' 	= ':set lsp.goto-reference-include-declaration false'	# Exclude declaration from the goto references popup




  # [keys.prompt] #Ⓝ ⧁ Prompt
  #   # !!! Remapping currently not supported
  #   'A-b'	= "no_op"	#	「   」	「move_prev_word_end」
  #   'C-b'	= "no_op"	#	「   」	「Backward a char」
  #   'C-f'	= "no_op"	#	「   」	「Forward a char」
  #   'C-a'	= "no_op"	#	「   」	「Move prompt start」
  #   'C-e'	= "no_op"	#	「   」	「Move prompt end」
  #   'C-w'	= "no_op"	#	「   」	「Delete previous word」
  #   'A-d'	= "no_op"	#	「   」	「Delete next word」
  #   'C-h'	= "no_op"	#	「   」	「Delete previous char」
  #   'C-d'	= "no_op"	#	「   」	「Delete next char」
  #   'C-s'	= "no_op"	#	「   」	「Insert a word」
  #   'C-p'	= "no_op"	#	「   」	「Select previous history」
  #   'C-n'	= "no_op"	#	「   」	「Select next history」

  #   'Escape'	= "Close prompt" 	# Close prompt 	≝「$!」	「Close prompt」
  #   'C-c'   	= "Close prompt" 	# Close prompt 	≝「⎈ c」	「Close prompt]
  #   'Enter' 	= "Open selected"	# Open selected	≝「$!」	「Open selected」

  #   #⧁ Move ——————————————————————————————————————————————————————————————————————
  #   #        	Char                         	                          	 
  #   'A-l'    	= 'move_prev_char'           	# 🢔c Move   prev char     	「⎈ b」	「」
  #   'A-;'    	= 'move_next_char'           	# c🢖 Move   next char     	「⎈ f」	「」
  #   #        	Word                         	                          	 
  #   'A-d'    	= 'move_prev_word_start'     	# 🢔ω Move prev beg of word	「⎇ d」 	「delete next word」
  #   'A-f'    	= 'move_next_word_end'       	# ω🢖 Move next end of word	≝「⎇ f」	「Forward a word」
  #   'A-D'    	= 'move_prev_long_word_start'	# 🢔W Move prev beg of WORD	「⇧ b」 	「」
  #   'A-F'    	= 'move_next_long_word_start'	# W⤞ Move next end of WORD	「⇧ w」 	「」
  #   'C-left' 	= 'move_prev_long_word_start'	# 🢔W Move prev beg of WORD	「⇧ b」 	「」
  #   'C-right'	= 'move_next_long_word_start'	# W⤞ Move next end of WORD	「⇧ w」 	「」
  #   'Left'   	= "move_prev_char"           	# 🢔c Move prev        char	「  ◀」 	「」
  #   'Right'  	= "move_next_char"           	# c🢖 Move next        char	「  ▶」 	「」
  #   'A-left' 	= 'move_prev_word_end'       	# ⤝ω Move prev end of word	「⎇◀」  	「」
  #   'A-right'	= 'move_next_word_start'     	# ω⤞ Move next beg of word	「⎇▶」  	「」
  #   #        	Line                         	                          	 
  #   'A-a'    	= 'move_to_prompt_start'     	# ⤝▋ Move   line start    	「⤝」 	「Move prompt start」
  #   'A-A'    	= 'move_to_prompt_end'       	# ▋⭲ Move   line end      	「⭲」 	「Move prompt end」
  #   'End'    	= "Move prompt end"          	# ⤝▋ Move   line start    	≝「⤝」	「Move prompt start」
  #   'Home'   	= "Move prompt start"        	# ▋⭲ Move   line end      	≝「⭲」	「Move prompt end」

  #   #⧁ Change ——————————————————————————————————————————————————————————————————————
  #   'A-x'      	= 'delete_selection'       	# ᵡ▋                     	「  」	「」
  #   #          	Char                       	                         	 
  #   'A-h'      	= 'delete_char_backward'   	# ⌫c ᵡ char ←            	≝「⎈ h」	「delete_char_backward」
  #   'A-6'      	= 'delete_char_forward'    	# ⌦c ᵡ char →            	≝「⎈ d」	「delete_char_forward」
  #   'backspace'	= 'delete_char_backward'   	# ⌫c ᵡ char ←            	≝「⌫」  	「delete_char_backward」
  #   'del'      	= 'delete_char_forward'    	# ⌦c ᵡ char →            	≝「⌦」  	「delete_char_forward」
  #   #          	Word                       	                         	 
  #   #          	Line                       	                         	 
  #   'C-u'      	= "Delete to start of line"	# Delete to start of line	「   」	「」
  #   'C-k'      	= "Delete to end of line"  	# Delete to end of line  	「   」	「」

  #   'C-v'	= 'paste_before'	# ⤸📋 Paste before sel 「⎈ s」	「」 <i class='fa fa-clipboard'></i>⤹

  # [keys              	.prompt]                	#Ⓝ ⧁ Prompt !!! Remapping no supported
    # 'C-n'            	= 'no_op'               	#                            	「」    	「History next」
    # 'C-p'            	= 'no_op'               	#                            	「」    	「History previous」
    # 'C-b'            	= 'no_op'               	#                            	「」    	「move char backward」
    # 'C-f'            	= 'no_op'               	#                            	「」    	「move char forward」
    # 'C-a'            	= 'no_op'               	#                            	「」    	「move prompt start」
    # 'C-e'            	= 'no_op'               	#                            	「」    	「move prompt end」
    # 'C-w'            	= 'no_op'               	#                            	「」    	「del word left」
    # 'A-d'            	= 'no_op'               	#                            	「」    	「del word right」
    # 'C-h'            	= 'no_op'               	#                            	「」    	「del char left」
    # 'C-d'            	= 'no_op'               	#                            	「」    	「del char right」
    # 'C-u'            	= 'no_op'               	#                            	「」    	「del line start」
    # 'A-a'            	= 'extend_to_line_start'	# ⤝▋ Move line start + select	「   」 	「」
    # 'A-A'            	= 'extend_to_line_end'  	# ▋⭲ Move line end   + select	「   」 	「」
    # 'A-j'            	= 'N/A'                 	# 📜🢖 History next            	「⎈ n」 	「」
    # 'A-k'            	= 'N/A'                 	# 🢔📜 History previous        	「⎈ p」 	「」
    # 'Down'           	= 'N/A'                 	# 📜🢖 History next            	≝「 ▼」 	「History next」
    # 'Up'             	= 'N/A'                 	# 🢔📜 History previous        	≝「 ▲」 	「History previous」
    # 'Tab'            	= 'N/A'                 	# ⎁🢖 Completion next         	≝「 ⭾」 	「Completion next」
    # 'BackTab'        	= 'N/A'                 	# 🢔⎁ Completion previous     	≝「⇧$!」	「Completion previous」
    # 'Escape'         	= 'N/A'                 	# ⎋⧁ Close prompt            	≝「⎋」  	「Close prompt」
    # 'Enter'          	= 'N/A'                 	# Open selected              	≝「⏎」  	「Open selected」
    # 'C-c'            	= 'N/A'                 	# ⎋⧁ Close prompt            	≝「⎈ c」	「Close prompt」
    # 'A-b'            	= 'N/A'                 	# 🢔ω word backward           	≝「⎇b」 	「move word backward」
    # 'A-f'            	= 'N/A'                 	# ω🢖 word forward            	≝「⎇f」 	「move word forward」
    # 'C-left'         	= 'N/A'                 	# 🢔ω word backward           	≝「⎈◀」 	「move word backward」
    # 'C-Right'        	= 'N/A'                 	# ω🢖 word forward            	≝「⎈▶」 	「move word forward」
    # 'Left'           	= 'N/A'                 	# ◀ Backward a char          	≝「◀」  	「move char backward」
    # 'Right'          	= 'N/A'                 	# ▶ Forward a char           	≝「▶」  	「move char forward」
    # 'Home'           	= 'N/A'                 	# ⤝⧁ prompt start            	≝「⇤」  	「move prompt start」
    # 'End'            	= 'N/A'                 	# ⧁⭲ prompt end              	≝「⇥」  	「move prompt end」
    # 'Backspace'      	= 'N/A'                 	# ⌫ ᵡ char                   	≝「␈」  	「del char left」
    # 'Shift-Backspace'	= 'N/A'                 	# ⌫ ᵡ char                   	≝「⇧␈」 	「del char left」
    # 'C-l'            	= 'N/A'                 	# ⌫ ᵡ char                   	「⎈h」  	「」
    # 'C-;'            	= 'N/A'                 	# ⌦ ᵡ char                   	「⎈d」  	「」
    # 'Delete'         	= 'N/A'                 	# ⌦ ᵡ char                   	≝「␡」  	「del char right」
    # 'C-Backspace'    	= 'N/A'                 	# ⌫ω ᵡ word                  	≝「⎈␈」 	「del word left」
    # 'A-h'            	= 'N/A'                 	# ⌫ω ᵡ word                  	≝「⎈w」 	「del word left」
    # 'A-Backspace'    	= 'N/A'                 	# ⌫ω ᵡ word                  	≝「⎇␈」 	「del word left」
    # 'A-H'            	= 'N/A'                 	# ⌦ω ᵡ word                  	「⎇d」  	「」
    # 'A-del'          	= 'N/A'                 	# ⌦ω ᵡ word                  	≝「⎇␡」 	「del word right」
    # 'C-del'          	= 'N/A'                 	# ⌦ω ᵡ word                  	≝「⎈␡」 	「del word right」
    # 'C-j'            	= 'N/A'                 	# ⌫⤝━ ᵡ line start           	≝「⎈u」 	「del line start」
    # 'C-k'            	= 'N/A'                 	# ⌦━⭲ ᵡ line end             	≝「⎈d」 	「del line end」
    # 'C-s'            	= 'N/A'                 	# Insert a word under doc ‸cursor, may be changed to C-r C-w later
    # 'C-r'            	= 'N/A'                 	# Insert the content of the register selected by following input char


  # [keys        	.picker] 	#Ⓝ 🅟 Picker !!! Remapping no supported
    # 'C-k'      	= "no_op"	#                            	「   」 	「Previous entry」
    # 'C-p'      	= "no_op"	#                            	「   」 	「Previous entry」
    # 'C-j'      	= "no_op"	#                            	「   」 	「Next entry」
    # 'C-n'      	= "no_op"	#                            	「   」 	「Next entry」
    # 'C-s'      	= "no_op"	#                            	「   」 	「Open horizontally」
    # 'C-v'      	= "no_op"	#                            	「   」 	「Open vertically」
    # 'Escape'   	= "close"	# Close picker               	≝「$!」 	「Close picker」
    # 'C-c'      	= "close"	# Close picker               	≝「⎈ c」	「Close picker」
    # 'Down'     	= 'N/A'  	# i🢖 Entry Next              	≝「 ▼」 	「」
    # 'Up'       	= 'N/A'  	# 🢔i Entry Previous          	≝「 ▲」 	「」
    # 'A-j'      	= 'N/A'  	# i🢖 Entry Next              	「⎈ j」 	「」
    # 'A-k'      	= 'N/A'  	# 🢔i Entry Previous          	「⎈ k」 	「」
    # 'A-f'      	= 'N/A'  	# i🢖 Entry Next              	「⎈ p」 	「」
    # 'A-d'      	= 'N/A'  	# 🢔i Entry Previous          	「⎈ n」 	「」
    # 'A-f'      	= 'N/A'  	#  🗗→ Open right  (Vertical) 	「⎈ v」 	「」
    # 'A-m'      	= 'N/A'  	# 🗗↓ Open bottom (Horizontal)	「⎈ s」 	「」
    # 'C-t'      	= 'N/A'  	# Toggle preview
    # 'C-space'  	= 'N/A'  	# Filter options	≝「⎈ ␠」	「Filter options」
    # 'Enter'    	= 'N/A'  	# Open selected 	≝「  ⏎」	「Open selected」
    # 'Shift-Tab'	= 'N/A'  	# Previous entry	#'Up' 'C-p'
    # 'Tab'      	= 'N/A'  	# Next entry    	#'Down' 'C-n'
    # 'PageUp'   	= 'N/A'  	# Page up       	#'C-u'
    # 'PageDown' 	= 'N/A'  	# Page down     	#'C-d'
    # 'Home'     	= 'N/A'  	# Go to first entry
    # 'End'      	= 'N/A'  	# Go to last entry



# —————————————————————————————————————————————————————————————————————————————————————————————————
[keys.select] #Ⓢ Select/Extend mode
  #'esc'	= 'exit_select_mode'	#	「  ⎋」	「exit_select_mode」
  'e'   	= 'normal_mode'     	#	「  v」	「extend_next_word_end」
  #Ⓢ Test ——————————————————————————————————————————————————————————————————————
  #Ⓢ Free ——————————————————————————————————————————————————————————————————————

  # 'A'	= ['save_selection','select_all']	# 🖈∀▋	「⇧   」	「」


  #Ⓢ           	Compat with non-modal editors        	 
    'C-o'      	= 'file_picker'                      	# 🗁 File picker       	「☰␠  f」	「jump_backward」
    'C-O'      	= 'file_picker_in_current_directory' 	# 🗁 File picker@curdir	「☰␠⇧ f」	「」
    'C-s'      	= ['commit_undo_checkpoint',':write']	# save file           	「  ⎈s」 	「save_selection」 <i class='fa fa-save'></i>
    # 'C-S-s'  	= 'Save As'                          	# ???                 	⇧[⇧⎈s」 	「」
    'C-n'      	= ':new'                             	# 🗋 new buffer        	「 ⎈n」  	「」
    # 'C-S-t'  	= 'open-last-closed'                 	# ???                 	⇧[⇧⎈t」 	「」
    # 'C-plus' 	= 'zoom-in'                          	# ??? 🔎⨭              	「 ⎈+」  	「」
    # 'C-minus'	= 'zoom-out'                         	# ??? 🔎−              	「 ⎈-」  	「」

  #Ⓢ   	Misc               	 
  'z'  	= 'toggle_comments'	# un-/comment the selections              	「 ⎈c」	「☰👁」
  'C-/'	= 'toggle_comments'	# un-/comment the selections              	「 ⎈c」	「」 !!!fail
  'C-m'	= 'decrement'      	# ⊖ Decrement object (number) under cursor	「 ⎈x」	「」  o̠ <span class='cd'>o&#800;</span>
  'C-,'	= 'increment'      	# ⊕ Increment object (number) under cursor	「 ⎈a」	「」  o̟ <span class='cd'>o&#799;</span> !!!fails

  #Ⓢ   	Copy                                	 
  'c'  	= 'yank'                            	# 🗐 Copy selection <i class='fa fa-copy'></i>                                     	「  y」	「change_selection」
  'C-c'	= 'yank_main_selection_to_clipboard'	# 📋 Copy main selection into system clipboard <i class='fa fa-clipboard'></i>     	「☰␠⇧y」	「toggle_comments」
  'C'  	= 'yank_main_selection_to_clipboard'	# 📋 Copy main selection into system clipboard <i class='fa fa-clipboard'></i>     	「☰␠⇧y」	「copy_selection_on_next_line」
  'A-c'	= 'yank_joined_to_clipboard'        	# ∀▋📋 Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i>	「☰␠ y」	「」

  #Ⓢ Shell 	                 	 
    # '|'  	= 'shell_pipe'   	# Pipe each selection through shell command, replacing with output	「⇧ \」	「shell_pipe」
    "A-\\" 	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「 ⎇\」	「」
    # 'A-|'	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「⇧⎇\」	「shell_pipe_to」

  #Ⓢ Move ——————————————————————————————————————————————————————————————————————
    #Ⓢ Cursor@Home
    'j'  	= 'extend_visual_line_down'	# ▼                    	「  h」	「extend_visual_line_down」
    'k'  	= 'extend_visual_line_up'  	# ▲                    	「  j」	「extend_visual_line_up」
    'l'  	= 'extend_char_left'       	# ◀                    	「  k」	「extend_char_right」
    ';'  	= 'extend_char_right'      	# ▶                    	「  l」	「」
    'm'  	= 'half_page_down'         	# ⤈ Move half page down	「 ⎈d」	「☰🧩」
    ','  	= 'half_page_up'           	# ⤉ Move half page up  	「 ⎈u」	「keep_primary_selection」
    'C-j'	= 'page_down'              	# ⇟ Move      page down	「 ⎈d」	「」
    'C-k'	= 'page_up'                	# ⇞ Move      page up  	「 ⎈u」	「」

    #Ⓢ        	word
    'f'       	= 'extend_next_word_end'         	# ω⭲ Extend next end of word  	   「  e」	「extend_next_char」
    'A-f'     	= 'extend_next_word_start'       	# ω⤞ Extend next beg of word  	「  w」   	「」
    'A-right' 	= 'extend_next_word_start'       	# ω⤞ Extend next beg of word  	「  w」   	「」
    'd'       	= 'extend_prev_word_start'       	# ⤝ω Extend prev beg of word  	   「  b」	「」
    'A-d'     	= 'extend_prev_word_end'         	# ⭰ω Extend prev end of word  	「   」   	「」
    # 'A-left'	= 'extend_prev_word_end'         	# ⭰ω Extend prev end of word  	「   」   	「」
    'F'       	= 'extend_next_long_word_end'    	# W⭲ Extend next end of WORD  	  「⇧ e」 	「extend_prev_char」
    'A-F'     	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」   	「」
    'C-right' 	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」   	「」
    'D'       	= 'extend_prev_long_word_start'  	# ⤝W Extend prev beg of WORD  	  「⇧ b」 	「」
    'A-D'     	= ['extend_prev_long_word_start',	# ⭰W Extend prev end of WORD  	「⇧ b」   	「」
              	  'extend_prev_word_start',      	# !!!extend_prev_long_word_end	 
              	  'extend_next_word_start',]     	#    missing                  	 
    'C-left'  	= ['extend_prev_long_word_start',	# ⭰W Extend prev end of WORD  	   「⇧ b」	「」
              	  'extend_prev_word_start',      	# !!!move_prev_long_word_end  	 
              	  'extend_next_word_start',]     	#    extend_prev_long_word_end	 
    # 'r'     	= 'extend_next_word_start'       	# W⤞ Extend next beg of WORD  	「⇧ w」	「」
    # 'R'     	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」	「」
    # 'A-r'   	= 'extend_next_word_start'       	# W⤞ Extend next beg of WORD  	「⇧ w」	「」
    # 'A-R'   	= 'extend_next_long_word_start'  	# W⤞ Extend next beg of WORD  	「⇧ w」	「」

    #Ⓢ      	Line
    # 'home'	= 'extend_to_line_start'	# ⤝▋ Extend     line start	「home」	「extend_to_line_start」
    # 'end' 	= 'extend_to_line_end'  	# ▋⭲ Extend     line end  	「end」 	「extend_to_line_end」
    'a'     	= 'extend_to_line_start'	# ⤝▋ Extend     line start	「Home」	「」
    'A'     	= 'extend_to_line_end'  	# ▋⭲ Extend     line end  	「End」 	「」

    #Ⓢ   	Paragraph
    # '>'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start	「[p  」	「」
    # '?'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end  	「]p  」	「」
    # !!! remove after .Repeat can be rebound
    '{'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start           	「[p  」	「」
    '}'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end             	「]p  」	「」
    '>'	= 'extend_search_prev' 	# 🢔◎ ◎͔ Extend previous search match	「⇧ n」 	「」
    '?'	= 'extend_search_next' 	# ◎🢖 ◎͕ Extend next     search match	「  n」 	「」

    'r'	= 'repeat_last_motion'	# ∞ Repeat last motion (f/t/m)	「 ⎇.」	「replace」

    #Ⓢ   	Search
    'w'  	= 'extend_next_char'     	# 🔍   Extend       next     char                               	「  f」 	「extend_next_word_start」
    'W'  	= 'extend_prev_char'     	# 🔎   Extend       previous char                               	「⇧ f」 	「extend_next_long_word_start」
    'A-w'	= 'extend_till_char'     	# 🔍₋₁ Extend 'till next     char                               	「  t」 	「」
    'A-W'	= 'extend_till_prev_char'	# 🔎₋₁ Extend 'till previous char                               	「⇧ t」 	「」
    'S'  	= 'rsearch'              	# 🔍𝖗 for previous regex pattern                                	「⇧ /」 	「split_selection」
    's'  	= 'search'               	# 🔎𝖗 for          regex pattern                                	「⇧  /」	「select_regex」
    '.'  	= 'extend_search_prev'   	# 🢔◎ ◎͔ Extend previous search match                           	「⇧ n」 	「goto_last_modification!!!」
    '/'  	= 'extend_search_next'   	# ◎🢖 ◎͕ Extend next     search match                           	「  n」 	「search」
    '8'  	= 'search_selection'     	# 𝖗🢔▋ Use current selection as the search pattern !!!missing ∀*	「⇧ 8」 	「<8>」

    #Ⓢ          	Compat with non-modal editors
    'C-home'    	= 'goto_file_start'     	# ⇱ line number `<n>` else file start	「  g」	「」
    'C-end'     	= 'goto_last_line'      	# ⇲ file end                         	「  e」	「」
    'C-S-tab'   	= 'goto_previous_buffer'	# ⎗                                  	⇧[ⓖp」	「」 !!!fail
    'C-tab'     	= 'goto_next_buffer'    	# ⎘                                  	「ⓖn」	「」 !!!fail
    'C-pageup'  	= 'goto_previous_buffer'	# ⎗                                  	「   」	「」
    'C-pagedown'	= 'goto_next_buffer'    	# ⎘                                  	「   」	「」
    'A-pageup'  	= 'jump_backward'       	# ⎗̡                                 	「   」	「」
    'A-pagedown'	= 'jump_forward'        	# ⎘̡                                 	「   」	「」
    # 'C-j'     	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist   	「 ⎈o」	「」
    # 'C-;'     	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist   	「 ⎈i」	「」  !!!fail

    '1'  	= 'goto_previous_buffer'	# ⎗ !!!missing ∀*                               	「ⓖp」	「<1>」
    '2'  	= 'goto_next_buffer'    	# ⎘ !!!missing ∀*                               	「ⓖn」	「<2>」
    'A-1'	= 'goto_previous_buffer'	# ⎗                                             	「ⓖp」	「」
    'A-2'	= 'goto_next_buffer'    	# ⎘                                             	「ⓖn」	「」
    '3'  	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist !!!missing ∀*	「 ⎈o」	「<3>」
    '4'  	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist !!!missing ∀*	「 ⎈i」	「<4>」
    'A-3'	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist              	「 ⎈o」	「」
    'A-4'	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist              	「 ⎈i」	「」

  #Ⓢ Select ——————————————————————————————————————————————————————————————————————
    #Ⓢ       	Compat with non-modal editors    	 
    'C-a'    	= ['save_selection','select_all']	# 🖈∀▋                                                       	「⇧ 5」 	「increment」
    'A-down' 	= 'copy_selection_on_next_line'  	# 🠷 Copy selection onto the next     line (add cursor below)	「⇧ c」 	「」
    'A-up'   	= 'copy_selection_on_prev_line'  	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」 	「」
    'S-left' 	= 'extend_char_left'             	#                                                           	「Ⓢh/◀」	「」
    'S-down' 	= 'extend_line_down'             	#                                                           	「Ⓢj/▼」	「」
    'S-up'   	= 'extend_line_up'               	#                                                           	「Ⓢk/▲」	「」
    'S-right'	= 'extend_char_right'            	#                                                           	「Ⓢl/▶」	「」


    'A-g'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	「  ⎈s」	「」
    'C-g'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	「  ⎈s」	「」
    'G'  	= 'save_selection'	# 🖈 Save the current selection to the jumplist	「  ⎈s」	「goto_line」

    'J'  	= 'extend_line'            	# ⮒ Select current line, if already selected, extend to next line	「⇧  x」	「join_selections」
    'E'  	= 'extend_to_line_bounds'  	# ━ Extend selection to line bounds (line-wise selection)⎯       	「⇧ x」 	「move_next_long_word_end」
    'A-e'	= ['select_mode'           	# ω₌ "Extend" selection to same word                             	「   」 	「」
      ,  	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,  	 'move_prev_word_start'    	#
      ,  	 'search_selection'        	#
      ,  	 'make_search_word_bounded'	#
      ,  	 'extend_search_next'      	#
      ]  	                           	# = Sublime's find_under_expand
    # "" 	= 'expand_selection'       	# Expand selection to parent syntax node !!!pick a key 🌳TS 	「   」	「expand_selection」
    # '5'	= 'select_paragraph'       	# ¶▋ Select this paragraph !!!missing ∀* !!!not implemented	「  」 	「<5>」
    # '%'	= 'select_all'             	# ∀▋ Select entire file                                    	「⇧ 5」	「select_all」

    'A-j'	= 'copy_selection_on_next_line'	# 🠷 Copy selection onto the next     line (add cursor below)	「⇧ c」	「」
    'A-k'	= 'copy_selection_on_prev_line'	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」	「」
    'A-l'	= 'select_prev_sibling'        	# 🢔⸙ Select previous sibling node in syntax tree 🌳TS        	「⎇ p」	「」 🌳🌲🌴𐇲🎄⸙🌿
    'A-;'	= 'select_next_sibling'        	# ⸙🢖 Select next     sibling node in syntax tree 🌳TS        	「⎇ m」	「flip_selections」
    'M'  	= 'shrink_selection'           	# ⸙− Shrink syntax tree object selection          🌳TS ⸙₋    	「⎇ i」	「」
    '<'  	= 'expand_selection'           	# ⸙₊ Expand selection to parent syntax node       🌳TS ⸙₊    	「⎇ o」	「」
    'A-s'	= 'select_regex'               	# 𝖗▋ Select all regex matches inside selections             	「  s」	「split_selection_on_newline」
    'N'  	= 'split_selection'            	# ䷖𝖗 on regex matches                                       	「⇧ s」	「search_prev」
    'A-n'	= 'split_selection_on_newline' 	# ䷖␤ (﹨␤)                                                   	「 ⎇s」	「」

    "'"    	= 'collapse_selection'        	# 🢖🢔 Collapse selection onto a single cursor            	「  ;」 	「」
    "A-'"  	= 'flip_selections'           	# ⮀ Flip selection cursor and anchor                    	「 ⎇;」 	「」
    'A-a'  	= 'flip_selections'           	# ⮀ Flip selection cursor and anchor                    	「⇧ ⎇;」	「」
    # 'A-A'	= 'flip_selections'           	# ⮀ Flip selection cursor and anchor                    	「⇧ ⎇;」	「」 !!! revert after https://github.com/helix-editor/helix/issues/1486 is implemented
    'A-p'  	= 'ensure_selections_forward' 	# ↠ Flip selection forward: cursor after anchor         	「⇧⎇;」 	「」
    # 'A-:'	= 'ensure_selections_forward' 	# ↠ Flip selection forward: cursor after anchor         	「⇧⎇;」 	「」
    #'A-l' 	= 'rotate_selections_backward'	# ⟲ Rotate main selection backward (← with many columns)	「⇧ 9」 	「」
    #'A-;' 	= 'rotate_selections_forward' 	# ⟳ Rotate main selection forward  (→ with many columns)	「⇧ 0」 	「flip_selections」
    'A-m'  	= 'rotate_selections_forward' 	# ⟳ Rotate main selection forward  (↓ with many lines)  	「⇧ 0」 	「」
    'A-,'  	= 'rotate_selections_backward'	# ⟲ Rotate main selection backward (↑ with many lines)  	「⇧ 9」 	「remove_primary_selection」
    'A-u'  	= 'remove_primary_selection'  	# ᵡ         the primary selection                       	「 ⎇,」 	「earlier」
    'A-i'  	= 'keep_primary_selection'    	# ᵡ∀ all but the primary selection (keep only)          	「  ,」 	「」
    'A-U'  	= 'no_op'                     	# ᵡᵡ undo remove selection                              	「⇧ ⎇,」	「earlier」 !!!missing
    'K'    	= 'keep_selections'           	# ᵏ𝖗 selections not matching the regex (keep)           	「⇧ k」 	「keep_selections」
    'L'    	= 'remove_selections'         	# ᵡ𝖗 selections     matching the regex                  	「⇧⎇k」 	「」
    'A-Z'  	=['keep_primary_selection'    	# 🢖∀🢔 collapse everything to a single cursor            	「  」  	「」		 
      ,    	  'collapse_selection'        	                                                        	      	#
      ,    	  'exit_select_mode']         	                                                        	      	#

    'minus'	= 'trim_selections'             	# ✁Trim whitespace from the selection                    	「⇧ -」 	「」
    '_'    	= 'merge_consecutive_selections'	# ⛙ Merge consecutive selections ⨝                       	「⇧⎇ -」	「trim_selections」
    # '+'  	= 'dupe_selections'             	# 🗐Duplicate selection (currently nonfunctional/disabled)	「⇧ =」 	「dupe_selections」

  #Ⓢ Change ——————————————————————————————————————————————————————————————————————
    #            	Compat with non-modal editors
    'A-del'      	= 'delete_word_forward'          	# ⌦ω ᵡ word →                     	 ⓘ「  ⎇d」	「」
    'C-del'      	= ['extend_next_long_word_end',  	# ⌦W                              	「   」   	「」
                 	   'delete_selection']           	# ᵡ Word →                        	 
    'A-backspace'	= 'delete_word_backward'         	# ⌫ω ᵡ word ←                     	ⓘ「 ⎈w」	「」
    'C-backspace'	= ['extend_prev_long_word_start',	# ⌫W                              	「   」 	「」
                 	   'delete_selection']           	# ᵡ Word ←                        	 
    # 'del'      	= 'delete_selection'             	# ᵡ▋                              	「  d」	「」
    'S-del'      	= 'delete_selection_noyank'      	# 🕱▋                              	「 ⎇d」	「」
    'S-ret'      	= 'open_below'                   	# ⭣␤ Open new line below selection	「  o」	「」
    'ret'        	= 'open_above'                   	# ⭡␤ Open new line above selection	「⇧ o」	「」
    'C-ret'      	= ':reflow'                      	# ↪ Hard-wrap selected lines ䷖↪   	「   」	「」

    # '.'      	= 'N/A'                              	# ∞ Repeat last change            	「.」     	「n/a」
    '6'        	= 'delete_char_forward'              	# ⌦ !!!missing ∀*                 	「 ⌦」    	「<5>」
    'x'        	= 'delete_selection'                 	# ᵡ▋                              	「  d」   	「extend_line」
    'A-x'      	= 'delete_selection_noyank'          	# 🕱▋ (...without yanking)         	「 ⎇d」   	「」
    # 'A-c'    	= 'change_selection'                 	# Δ                               	「  c」   	「change_selection_noyank」
    'h'        	= 'delete_char_backward'             	# ⌫c ᵡ char ←                     	「⌫」     	「move_char_left」
    'H'        	= 'delete_char_forward'              	# ⌦c ᵡ char →                     	「⇧⌦」    	「」
    'A-h'      	= 'delete_word_backward'             	# ⌫ω ᵡ word ←                     	ⓘ「 ⎈w」  	「」
    'A-H'      	= 'delete_word_forward'              	# ⌦ω ᵡ word →                     	 ⓘ「  ⎇d」	「」
    'C-h'      	= ['extend_prev_long_word_start',    	# ⌫W                              	「   」   	「」
               	   'delete_selection']               	# ᵡ Word ←                        	 
    'C-x'      	= ['yank_main_selection_to_clipboard'	                                  	,
               	   'delete_selection']               	#                                 	      	×📋 cut to clipboard <i class='fa fa-clipboard'></i>	「   」	「decrement」
    'backspace'	= 'delete_char_backward'             	# ⌫                               	「I.bs」	「」
    'X'        	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside selection	「⇧ j」 	「extend_to_line_bounds」

    # 'backspace'	= 'delete_char_backward'	# ⌫c ᵡ char ←	「backspace」	「delete_char_backward」
    # 'C-h'      	= 'delete_char_backward'	# ⌫c ᵡ char ←	「C-h」      	「delete_char_backward」
    'del'        	= 'delete_char_forward' 	# ⌦c ᵡ char →	「delete」   	「delete_char_forward」
    # 'C-d'      	= 'delete_char_forward' 	# ⌦c ᵡ char →	「C-d」      	「delete_char_forward」

    't'	= 'replace'            	# 🗘  Replace with a character	「  r」	「find_till_char」
    'T'	= 'replace_with_yanked'	# 🗘ʸ Replace with yanked text	「⇧ r」	「till_prev_char」

    'B'  	= 'switch_case'        	# 𝕒⇋𝔸 (selection)	「⇧ `」	「move_prev_long_word_start」
    'C-b'	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)	「⇧⎇`」	「」
    # '~'	= 'switch_case'        	# 𝕒⇋𝔸 (selection)	「⇧ `」	「switch_case」
    # '`'	= 'switch_to_lowercase'	# 𝕒𝔸  (selection)	「  `」	「switch_to_lowercase」
    # '`'	= 'switch_case'        	# 𝕒⇋𝔸 (selection)	「⇧ `」	「switch_to_lowercase」
    # '~'	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)	「⇧⎇`」	「switch_case」
    '⎈'  	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)	「⇧⎇`」	「」
    'A-`'	= 'switch_to_lowercase'	# 𝔸𝕒  (selection)	「   `」	「switch_to_uppercase」

    'A-.'	= 'unindent'	# ⇚ (selection)	「⇧,」	「repeat_last_motion」
    'A-/'	= 'indent'  	# ⇛ (selection)	「⇧.」	「」

    # 'q'	= 'record_macro'   	# ⏺ Start/stop macro recording to the selected register	「  q」	「record_macro」
    # 'Q'	= 'replay_macro'   	#⇧[⇧ q] replay_macro]                                  	▶  Play back a recorded macro from the selected register
    # '"'	= 'select_register'	# ®  Select a register to yank to or paste from        	「  '<reg>」	「select_register」

    # 'b'	= 'N/Arepeat_last_change' 	# ∞ Repeat last change !!! no command yet                   	「⇧  .」	「move_prev_word_start」
    # '.'	=  'N/Arepeat_last_change'	# ∞ Repeat last change                                      	「  .」 	「n/arepeat_last_change」
    # 'i'	= 'insert_mode'           	# ⤹⎀ Insert before selection                                	「  i」 	「insert_mode」
    'o'  	= 'append_mode'           	# ⎀⤸ Insert after selection (append)                        	「  a」 	「open_above」
    'I'  	= 'open_above'            	# ⭡␤ Open new line above selection                          	「⇧ o」 	「insert_at_line_start」
    'O'  	= 'open_below'            	# ⭣␤ Open new line below selection                          	「  o」 	「insert_at_line_end」
    'u'  	= 'undo'                  	# ⎌ Undo change                                             	「  u」 	「undo mode」
    'y'  	= 'redo'                  	# ↷ Redo change                                             	「⇧ u」 	「yank」
    'U'  	= 'earlier'               	# 🕘 Move backward in history   <i class='fa fa-history'></i>	「⇧ ⎇u」	「redo」
    'Y'  	= 'later'                 	# 🕒 Move forward in history ⏱ <i class='fa fa-clock-o'></i> 	「⇧⎇u」 	「」
    'C-y'	= 'redo'                  	# ↷ Redo change                                             	「⇧ u」 	「」
    'v'  	= 'paste_after'           	# 📋⤹ Paste after selection                                  	「  p」 	「select_mode」
    'C-v'	= 'paste_clipboard_after' 	# 📋⤹ Paste after selection                                  	「☰␠ p」	「」
    'V'  	= 'paste_before'          	# ⤸📋 Paste before selection                                 	「⇧ p」 	「」
    'C-z'	= 'suspend'               	# ⎌ Undo change                                             	「  u」 	「」
    'C-Z'	= 'redo'                  	# ↷ Redo change !!!fail                                     	「⇧ u」 	「」
    # 'I'	= 'insert_at_line_start'  	# ⤝⎀ Insert at the start of the line                        	「⇧ i」 	「insert_at_line_start」
    # 'A'	= 'insert_at_line_end'    	# ⎀⭲ Insert at the end of the line                          	「⇧ a」 	「insert_at_line_end」

  #Ⓢ Select manipulation ————————————————————————————————————————————————————————————————————
    '('  	= 'rotate_selection_contents_backward'	# ⟲ Rotate selection contents backward	「⇧⎇9」	「rotate_selections_backward」
    ')'  	= 'rotate_selection_contents_forward' 	# ⟳ Rotate selection contents forward	「⇧⎇0」	「rotate_selections_forward」
    '7'  	= 'align_selections'                  	# ⥂ Align selection in columns !!!missing ∀*	「⇧ 7」	「<7>」
    # '&'	= 'align_selections'                  	# ⥂ Align selection in columns	「⇧ 7」	「align_selections」
    # '='	= 'format_selections'                 	# ℱ Format selection (currently nonfunctional/disabled) (LSP)	「  =」	「format_selections」

  #Ⓢ Shell	#                      	#
  # '!'   	= 'shell_insert_output'	# 🢔$ Run shell command, inserting output before each selection	「⇧  1」	「shell_insert_output」
  '@'     	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧⎇1」	「」
  # 'A-!' 	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧⎇1」	「shell_append_output」


  ##Ⓢ ☰Minor modes
  [keys.	'select'.'F1']        	#Ⓢ ☰? Help mode                                            	「  」  	「」
   #'F1'	= 'show-keymap'         	# ⌨ Help !!!missing                                         	「  」  	「」
    'F2'	= ':tree-sitter-scopes' 	# 🌳 Tree sitter scopes (for theming and development)        	「  」  	「」
    'F3'	= ':tree-sitter-subtree'	# 🌳 Tree sitter subtree under cursor (for debugging queries)	「  」  	「」
    'c' 	= ':character-info'     	# 🔣ℹ Character info                                         	「  」  	「」


  [keys.      	'select'.'p']     	#Ⓢ ☰👁 View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」

    # 'p'	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
  [keys.      	'select'.'P']     	#Ⓢ 👁ₛ View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」

  [keys.      	'select'.'Z']     	#Ⓢ 👁ₛ View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」


  [keys. 	'select'.'g']            	#Ⓢ ⓖ☰⮊ Goto mode Jumps to various locations	「$!」     	「」
    'p'  	= 'no_op'                   	#                                          	   「   」 	「goto_previous_buffer」
    'b'  	= 'jumplist_picker'         	# ☰🖈 List jumplist                         	   「☰␠j」 	「goto_window_bottom」
    'a'  	= 'goto_first_nonwhitespace'	# 𝕒⤝ line start 1ₛₜ non-whitespace char ¬␣ 	   「  s」 	「goto_last_accessed_file」
    's'  	= 'goto_line_end'           	# ⭲ line end                               	   「  l」 	「goto_first_nonwhitespace」
    'h'  	= 'goto_line_start'         	# ⤝ line start                             	   ≝「  h」	「goto_line_start」
    'g'  	= 'goto_file_start'         	# ━№⇱ line number `<n>` else file start ⎯⭱ 	   ≝「  g」	「goto_file_start」
    'j'  	= 'move_line_down'          	# ━▼ line down (ignore wrap)               	   「  e」 	「」
    'k'  	= 'move_line_up'            	# ━▲ line up   (ignore wrap)               	   「  g」 	「goto_line_end」
    "'"  	= 'goto_last_line'          	# ⇲ file end   ⭳                           	   「  e」 	「」
    'l'  	= 'goto_prev_paragraph'     	# 🢔¶ Move paragraph start                  	「]p 」    	「goto_line_end」
    ';'  	= 'goto_next_paragraph'     	# ¶🢖 Move paragraph end                    	「[p 」    	「」
    '.'  	= 'goto_prev_paragraph'     	# 🢔¶ Move paragraph start                  	「[p  」   	「goto_last_modification」
    '/'  	= 'goto_next_paragraph'     	# ¶🢖 Move paragraph end                    	「]p  」   	「」
    'f'  	= 'goto_file'               	# files in the selection                   	   ≝「  f」	「goto_file」
    'm'  	= 'goto_window_bottom'      	# 🗔⭳ screen bottom                         	「  b」    	「goto_last_modified_file」
    ','  	= 'goto_window_top'         	# 🗔⭱ screen top                            	「  t」    	「」
    'n'  	= 'goto_window_center'      	# 🗔· screen middle                         	「  c」    	「goto_next_buffer」
    'D'  	= 'goto_declaration'        	# 🆔 declaration (LSP)                      	「⇧  d」   	「goto_declaration」
    'd'  	= 'goto_definition'         	# ≝ definition (LSP)                       	   ≝「  d」	「goto_definition」
    'F12'	= 'goto_definition'         	# ≝ definition (LSP)                       	   「  d」 	「」
    'i'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	   ≝「  i」	「goto_implementation」
    't'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	   「  i」 	「goto_window_top」
    'r'  	= 'goto_reference'          	# 🅁※ references (LSP)                      	≝「  r」   	「goto_reference」
    'e'  	= 'goto_type_definition'    	# τ≝ type definition (LSP)                 	   「  y」 	「goto_last_line」
    'y'  	= 'goto_type_definition'    	# τ≝ type definition (LSP)                 	   ≝「  y」	「goto_type_definition」
    'c'  	= 'goto_last_accessed_file' 	# 🕮␜ file last accessed/alternate          	「  a」    	「goto_window_center」
    'v'  	= 'goto_last_modified_file' 	# ✎␜ file last modified/alternate          	「  m」    	「」
    '1'  	= 'goto_previous_buffer'    	# buffer previous                          	   「  p」 	「」 !!!missing ∀*
    '2'  	= 'goto_next_buffer'        	# buffer next                              	   「  n」 	「」 !!!missing ∀*
    '3'  	= 'jump_backward'           	# ⎗̡ Jump backward on the jumplist         	   「   」 	「」 !!!missing ∀*
    '4'  	= 'jump_forward'            	# ⎘̡ Jump forward  on the jumplist         	   「   」 	「」 !!!missing ∀*
    'u'  	= 'goto_last_modification'  	# 🕘 last modification in current file      	「  .」    	「goto_line_start」 <i class='fa fa-history'></i>
    # "'"	= 'goto-char#'              	# c#                                       	   「   」 	「」 !!! not available

    'A'	= 'extend_to_first_nonwhitespace'	# 𝕒⤝▋ Extend	━line start	「」	「」!!!delete after https://github.com/helix-editor/helix/issues/1486 is implemented


  [keys.	'select'.'n']            	#Ⓢ ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>	「$!」  	「」
    'n' 	= 'match_brackets'          	# 🢔()🢖 Goto matching   bracket (TS)                   	「  m」 	「」
    '.' 	= 'match_brackets'          	# 🢔(   Goto next left  bracket (TS)                   	「  」  	「」 !!!missing
    '/' 	= 'match_brackets'          	#   )🢖 Goto next right bracket (TS)                   	「  」  	「」 !!!missing
    'i' 	= 'surround_add'            	# (+)  Surround current selection with <char>         	「  s」 	「」
    't' 	= 'surround_replace'        	# (🗘) Replace surround character <from> with <to>     	「  r」 	「」
    'x' 	= 'surround_delete'         	# (ᵡ)  Delete  surround character <char>              	「  d」 	「」
    'e' 	= 'select_textobject_around'	# 🢔O🢖  Select around textobject                       	「  a」 	「」
    'a' 	= 'select_textobject_inner' 	# 🢖O🢔  Select inside textobject                       	「  i」 	「」


  [keys.     	'select'.'C-w']	#Ⓢ ☰🗔  Window mode                    	Ⓝ「⎈ w」  	「」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'C-e'    	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'a'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    's'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	 「  w」  	「hsplit」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」


  [keys    	.'select'.'space']                     	#Ⓢ ☰␠  Space mode              	Ⓝ「 ␠」  	「」
   #'space'	= 'insert_mode'                       	# ⁁⤸ Insert before sel             	「  i」  	「」 !!!panick! !!!missing
    'ret'  	= 'command_mode'                      	# Ⓒ Enter command mode             	「  ⎋」  	「」
    'F'    	= 'file_picker_in_current_directory'  	# 🗁 Open file   picker@curdir      	「☰␠⇧ f」	「file_picker_in_current_directory」
    'c'    	= 'yank_main_selection_to_clipboard'  	# 📋▋ Copy main sel to sys clipboard	「☰␠ ⇧y」	「」 <i class='fa fa-clipboard'></i>▋
    'x'    	= ['yank_main_selection_to_clipboard',	# ×📋 ▋                             	「   」  	「」 <i class='fa fa-clipboard'></i>
           	   'delete_selection']                	# cut to clipboard                 	「   」  	「」  create a new buffer and paste a buffer there !!! not available yet
    #      	line                                  	                                   	       	 
    'J'    	= ['extend_to_line_bounds',           	# ━⮃ swap line ↓                   	「 」    	「」!!! not implemented yet
           	   'delete_selection',                	#                                  	       	 github.com/helix-editor/helix/issues/2245
           	   'paste_after']                     	#                                  	       	 
    'K'    	= ['extend_to_line_bounds',           	# ━⮁ swap line ↑                   	「 」    	「」
           	   'delete_selection','move_line_up', 	#                                  	       	 
           	   'paste_before']                    	#                                  	       	 

    'p'	= 'no_op'                	#                                         	≝「   p」 	「paste_clipboard_after」
    'P'	= 'no_op'                	#                                         	≝「⇧ p」  	「paste_clipboard_before」
    'Y'	= 'no_op'                	#                                         	「   」   	「yank_main_selection_to_clipboard」
    'S'	= 'no_op'                	#                                         	「⇧   」  	「workspace_symbol_picker」
    'r'	= 'command_palette'      	# ☰Ⓒ Command Palette                      	「   」   	「rename_symbol]
    ';'	= 'command_mode'         	# Ⓒ Enter command mode                    	「⇧ ;」   	「」
    'j'	= 'extend_line'          	# ⮒ Select cur/next(if selected) line     	「  x」   	「」
    'k'	= 'keep_selections'      	# ᵏ𝖗 sels not matching the Re (keep)      	   「⇧ k」	「」
    'l'	= 'remove_selections'    	# ᵡ𝖗 sels     matching the Re             	   「⇧⎇k」	「」
    's'	= 'select_regex'         	# 𝖗▋ Select all Re matches in sels        	   「  s」	「symbol_picker」
    'a'	= ['save_selection',     	# 🖈∀▋                                     	「⇧ 5」   	「」
       	   'select_all']         	# Save cur pos, select everything         	 
    'h'	= ['kill_to_line_start', 	# ᵡ⎯                                      	「   」	「」
       	   'kill_to_line_end']   	# Delete this line                        	 
    'g'	= 'save_selection'       	# 🖈 Save cur sel to the jumplist          	「  ⎈s」	「」
    'e'	= 'extend_to_line_bounds'	# ━ Extend sel to line bounds⎯            	「  x」 	「」
   #'q'	= '???'                  	#                                         	「  q」 	「」
    't'	= 'replace_with_yanked'  	# 🗘📋 Replace with copied text             	「⇧ r」 	「」  <i class='fa fa-copy'></i>
    #  	🄻LSP                     	                                          	 
    'R'	= 'rename_symbol'        	# ✎ Rename symbol                         	「  r」 	「replace_selections_with_clipboard」
    'o'	= 'hover'                	# ? Show doc for item under cursor        	「  k」 	「」
    'y'	= 'code_action'          	# Ⓐ Apply code action)                    	「☰␠ a」	「yank_joined_to_clipboard」
    #  	                         	                                          	 
    '/'	= 'global_search'        	# 🔎🗁 Global search in workspace folder    	≝「☰␠ /」	「global_search」
    'v'	= 'paste_clipboard_after'	# 📋⤹ Paste after sels                     	「☰␠ p」 	「」
   #'z'	= 'list_kills'           	# 🕱☰ new buffer with clipboard content    	「   」  	「」	 !!!missing
    'n'	= 'split_selection'      	# ䷖𝖗 on regex matches                     	「⇧ s」  	「」
    'b'	= 'switch_to_lowercase'  	# 𝔸𝕒  (selection)                         	「  `」  	「buffer_picker」
    "'"	= 'flip_selections'      	# ⮀ Flip sel cursor and anchor            	「 ⎇;」  	「」
    '\'	= 'shell_pipe'           	# Pipe sel thru shell, replace with output	「⇧ \」  	「」
    #  	Numbers row              	                                          	 
   #"'"	= 'last_picker'          	# ☰☾ ∞Open last fuzzy picker              	「  」 	「」
    '6'	= 'switch_to_uppercase'  	# 𝕒𝔸 (selection)                          	「⇧⎇`」	「」 !!! change to Sentence Case
   #'7'	= 'toggle_spellcheck'    	# ⇝ spell check                           	「   」	「」  !!!missing
    #  	Modes                    	                                          	 
   #'u'	= 'mode_U'               	# ☰u TBD LSPs? or list_kills like z       	「   」	「」  !!!missing_aliases
   #'i'	= 'mode_Register'        	# ☰® Register/copy/paste etc.             	「   」	「」
   #'p'	= 'mode_P'               	# ☰p TBD                                  	「」「paste_clipboard_after」 !!!missing_aliases
   #'w'	= 'mode_window'          	# ☰🗔 Window mode                          	「☰␠ w」	「mode_window」 !!!missing_aliases
   #'f'	= 'mode_file'            	# ☰␜ File mode                            	「   」 	「file_picker」
   #'d'	= 'mode_bracket'         	# ☰⟪ Insert various brackets              	「   」 	「」
   #'m'	= 'mode_symbol'          	# ☰🅂 Symbol mode                          	「   」 	「」
   #','	= 'mode_diag'            	# ☰🛠 Diagnostics mode                     	「   」 	「」

  [keys	.'select'.'space'.'m']           	#Ⓢ ☰🅂 Symbol mode in Space mode     	「☰␠ f」		「」
    'm'	= 'symbol_picker'               	# 🅂🗋 Document  symbols 🄻                	「☰␠ s」	「」 ⚛Ⓢ
    ','	= 'workspace_symbol_picker'     	# 🅂🗍 Workspace symbols 🄻                	「☰␠⇧s」	「」  ⚛Ⓢ
  [keys	.'select'.'space'.',']           	#Ⓢ ☰🛠 Diagnostics mode in Space mode	「☰␠ f」		「」
    ','	= 'diagnostics_picker'          	# 🛠🗋 Document  diagnostics picker 🄻     	「☰␠ d」	「」
    'm'	= 'workspace_diagnostics_picker'	# 🛠🗍 Workspace diagnostics picker 🄻     	「☰␠⇧d」	「」


  [keys	.'select'.'space'.'f']      	#Ⓢ ☰␜ File mode in Space mode          	「☰␠ f」		「」
    'j'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'k'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
   #'l'	= 'open file at cursor'    	# ❚␜ open file at cursor                   	「  」  	「  」
    'f'	= 'buffer_picker'          	# ☰b Open buffer picker                    	「  b」 	「file_picker」
   #'d'	= 'show in desktop'        	# show in desktop                          	「  」  	「  」
    's'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'S'	= ['commit_undo_checkpoint'	# 💾∀v all views                            	「  」  	「  」
      ,	  ':write-all']            	                                           	      	#
  'A-s'	= ':update'                	# 💾Δ save file if modified                 	「  」  	「  」
    'a'	= 'goto_last_accessed_file'	# 🕮 file last accessed/alternate           	「ⓖ a」 	「  」
   #'g'	= 'bookmark bmenu list'    	# ☰🖈bookmark bmenu list                    	「  」  	「  」
   #'h'	= 'bookmark set'           	# 🖈 bookmark set                           	「  」  	「  」
   #'u'	= 'open last closed'       	# open last closed                         	「  」  	「  」
   #'o'	= 'open file fast'         	# prompt toopen a file from bookmark       	「  」  	「  」
   #'r'	= 'rename_file'            	# ✎ rename current file                    	「  」  	「  」
   #'e'	= 'open in external app'   	# open in external app                     	「  」  	「  」
   #'w'	= 'find_file'              	# 🔎 Find file                              	「  」  	「  」<i class='mss mss-Search-3'></i>
   #'q'	= 'mode_fs_close'          	# ☰× Close buffers/files un/saved          	「  」  	「  」
    'v'	= 'goto_last_modified_file'	# ✎ file last modified/alternate           	「ⓖ m」 	「  」
   #'c'	= 'copy file path'         	# 📋C:\ copy file path                      	「  」  	「  」 <i class='fa fa-clipboard'>C:\
   #'t'	= 'list recently closed'   	# list recently closed                     	「  」  	「  」
   #'y'	= 'open recently closed'   	# open recently closed                     	「  」  	「  」
    'o'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
    'n'	= ':new'                   	# 🗋 new empty buffer                       	Ⓝ「⎈n」 	「  」
   #'b'	= 'recentf open files'     	# recentf open files                   「  」	「  」
   #'\'	= 'open in terminal'       	# open in terminal                         	「  」	「  」
    '`'	= ':reload'                	# 🗘 Discard, Reload      from source       	「  」	「  」
    '~'	= ':reload-all'            	# 🗘∀ Discard, Reload all from source       	「  」	「  」
    'p'	= ':config-open-workspace' 	# 🛠🗋 Workspace config file                 	「  」	「  」

    ','	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」
    'O'	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」

  [keys. 	'select'.'space'.'f'.     	'q'] #Ⓢ ☰␜☰ᵡ Close mode in File mode in Space mode
    'r'  	= ':buffer-close-all'    	# ᵡ∀b buffer all
    'f'  	= ':buffer-close'        	# ᵡb buffer current
    'v'  	= ':buffer-close-others' 	# ᵡ∁b buffer others
    'e'  	= ':quit-all'            	# ᵡ∀v view  all
    'd'  	= ':quit'                	# ᵡv view   current
    'w'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    's'  	= ':write-quit'          	# 💾ᵡv view current
    'u'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    'j'  	= ':write-quit'          	# 💾ᵡv view current
    'b'  	= ':write-buffer-close'  	# 💾ᵡb buffer save & close. Accepts an optional path
    ';'  	= ':cquit'               	# ⎋ Quit with exit code (default 1)
  [keys. 	'select'.'space'.'f'.     	'q'.'q'] #Ⓢ ☰␜☰ᵡ Close All mode in File mode in Space mode
    'r'  	= ':buffer-close-all!'   	# 🕱∀b buffer all (kill unsaved)
    'f'  	= ':buffer-close!'       	# 🕱b buffer current (kill unsaved)
    'v'  	= ':buffer-close-others!'	# 🕱∁b buffer others (kill unsaved)
    'e'  	= ':quit-all!'           	# 🕱∀v view  all
    'd'  	= ':quit!'               	# 🕱v view   current
    'w'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    's'  	= ':write-quit!'         	# 💾🕱v view current
    'u'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    'j'  	= ':write-quit!'         	# 💾🕱v view current
    'b'  	= ':write-buffer-close!' 	# 💾ᵡb buffer save & close (force). Accepts an optional path
    ';'  	= ':cquit!'              	# ⎋ Quit with exit code (default 1)

  [keys. 	'select'.'space'.'f'.     	'x'] #Ⓢ ☰␜☰ᵡ Close mode in File mode in Space mode
    'r'  	= ':buffer-close-all'    	# ᵡ∀b buffer all
    'f'  	= ':buffer-close'        	# ᵡb buffer current
    'v'  	= ':buffer-close-others' 	# ᵡ∁b buffer others
    'e'  	= ':quit-all'            	# ᵡ∀v view  all
    'd'  	= ':quit'                	# ᵡv view   current
    'w'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    's'  	= ':write-quit'          	# 💾ᵡv view current
    'u'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    'j'  	= ':write-quit'          	# 💾ᵡv view current
    'b'  	= ':write-buffer-close'  	# 💾ᵡb buffer save & close. Accepts an optional path
    ';'  	= ':cquit'               	# ⎋ Quit with exit code (default 1)
  [keys. 	'select'.'space'.'f'.     	'x'.'x'] #Ⓢ ☰␜☰ᵡ Close All mode in File mode in Space mode
    'r'  	= ':buffer-close-all!'   	# 🕱∀b buffer all (kill unsaved)
    'f'  	= ':buffer-close!'       	# 🕱b buffer current (kill unsaved)
    'v'  	= ':buffer-close-others!'	# 🕱∁b buffer others (kill unsaved)
    'e'  	= ':quit-all!'           	# 🕱∀v view  all
    'd'  	= ':quit!'               	# 🕱v view   current
    'w'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    's'  	= ':write-quit!'         	# 💾🕱v view current
    'u'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    'j'  	= ':write-quit!'         	# 💾🕱v view current
    'b'  	= ':write-buffer-close!' 	# 💾ᵡb buffer save & close (force). Accepts an optional path
    ';'  	= ':cquit!'              	# ⎋ Quit with exit code (default 1)


  [keys	.'select'.'space'.'i'] #Ⓢ ☰®  Register/copy/paste etc.
    'i'	= 'select_register'                  	# ®  Select a register to copy/paste from '<reg> ??? make sticky? for further reg ops or use the main layer
   #'7'	= 'append_to_register 1'             	# ®1⎀ Append current line/selection to reg 1
   #'8'	= 'clear_register 1'                 	# ®1× x
   #'9'	= 'copy_to_register 1'               	# ®1🗐 x
   #'0'	= 'paste_from_register 1'            	# ®1📋 x
   #'1'	= 'append_to_register 2'             	# ®2⎀ Append current line/selection to reg 2
   #'2'	= 'clear_register 2'                 	# ®2× x
   #'3'	= 'copy_to_register 2'               	# ®2🗐 x
   #'4'	= 'paste_from_register 2'            	# ®2📋 x
    't'	= 'replace_selections_with_clipboard'	# 🗘▋📋 Replace sels by clipboard contents    	「☰␠⇧r」 <i class='fa fa-clipboard'></i>▋
    'x'	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside sel                	Ⓝ「⇧j」
    'v'	= 'paste_clipboard_before'           	# ⤸📋 Paste after  sels                      	「☰␠⇧p」 ⤸<i class='fa fa-clipboard'></i>
    'c'	= 'yank_joined_to_clipboard'         	# 📋∀▋ Copy all sels to clipboard (joined) ⨝📋	「☰␠ y」 <i class='fa fa-clipboard'></i> ∀❚ ∀▋
    'h'	= ':clear-register'                  	# ᵡ® Clear registers
   #'a'	= ':clipboard-yank'                  	# Copy main   sel to system         clipboard
   #'a'	= ':clipboard-yank-join'             	# Copy joined sel to system         clipboard with sep \n
   #'a'	= ':primary-clipboard-yank'          	# Copy main   sel to system primary clipboard
   #'a'	= ':primary-clipboard-yank-join'     	# Copy joined sel to system primary clipboard with sep \n
   #'a'	= ':clipboard-paste-after'           	# Paste system  clipboard after   sels
   #'a'	= ':clipboard-paste-before'          	# Paste system  clipboard before  sels
   #'a'	= ':clipboard-paste-replace'         	# Paste system  clipboard replace sels
   #'a'	= ':primary-clipboard-paste-after'   	# Paste primary clipboard after   sels
   #'a'	= ':primary-clipboard-paste-before'  	# Paste primary clipboard before  sels
   #'a'	= ':primary-clipboard-paste-replace' 	# Paste primary clipboard replace sels
   #'a'	= ':show-clipboard-provider'         	# Show clipboard provider name in status bar
    'j'	= ':sort'                            	# 𝕒🢖𝕫 Sort ranges in sel 𝟙𝟚𝟛
    'k'	= ':rsort'                           	# 𝕫🢖𝕒 Sort ranges in sel in reverse order 𝟛𝟚𝟙
   #'d'	='list-matching-lines'               	# !!!missing
   #'f'	='delete-matching-lines'             	# !!!missing
   #'g'	='delete-non-matching-lines'         	# !!!missing
   #'t'	='delete-duplicate-lines'            	# !!!missing
   #'n'	='reformat-to-sentence-lines'        	# !!!missing
   #'o'	='copy-rectangle-to-register'        	# !!!missing
   #'r'	='query-replace-regexp'              	# !!!missing
   #'h'	='mark-defun'                        	# !!!missing
   #';'	='escape-quotes'                     	# Add \ before " in current line/selection

  #[keys 	.'select'.'space'.'d'] #Ⓢ ☰⟪ Bracket mode in Space mode (place cursor in between)
   #'RET'	= 'insert char'   	#
   #'SPC'	= 'insert unicode'	#
   #'d'  	= '()'            	# () parenthesis
   #'f'  	= '[]'            	# [] square bracket
   #'j'  	= '{}'            	# {} brace
   #'k'  	= '""'            	# "" regular double quote
   #'l'  	= "''"            	# '' regular single quote
   #'r'  	= '‹›'            	# ‹› single angle quote (single chevrons)
   #'t'  	= '«»'            	# «» double angle quote (double chevrons)
   #'n'  	= '【】'            	# 【】 black lenticular bracket
   #'m'  	= '「」'            	# 「」 corner bracket
   #'o'  	= '〔〕'            	# 〔〕 tortoise shell bracket
   #','  	= '〈〉'            	# 〈〉 angle bracket or math ⟨⟩
   #'.'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'<'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'g'  	= '‘’'            	# ‘’ curly single quote
   #'h'  	= '“”'            	# “” double curly quote
   #'y'  	= "`'"            	# `' emacs quote
   #';'  	= '=""'           	# ="" string assignment
   #'z'  	= '⸨⸩'            	# ⸨⸩ Double Parenthesis
   #'c'  	= 'date'          	# 📆📅current date
   #'p'  	= 'u+000C'        	# ␌ formfeed

  [keys.     	'select'.'space'.'w']	#Ⓢ ☰🗔@☰␠  Window mode                    	Ⓝ「⎈ w」  	「」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'C-e'    	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'a'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    's'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	 「  w」  	「hsplit」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」


  [keys	.'select'.'space'.'u']       	#Ⓢ 🌐 ☰ⓤ 🌳TS, 🄻LSP, 🄳DAP, and various ones
    'q'	= 'no_op'                   	#                                   	「  」  	「」
    'w'	= 'no_op'                   	#                                   	「  」  	「」
    'u'	= 'remove_primary_selection'	# ×          primary sel            	「 ⎇,」 	「」
    'i'	= 'keep_primary_selection'  	# ×∀ all but primary sel (keep only)	「  ,」 	「」
    'o'	= ':character-info'         	# 🔣ℹ Character info                 	「  」  	「」
    #  	 Δ                          	                                    	      	 
    'j'	= 'goto_next_change'        	# Δ🢖 Change            next         	「⧚  g」	「」 !!!→sticky
    'k'	= 'goto_prev_change'        	# 🢔Δ Change            previous     	「⧛  g」	「」 !!!→sticky
    'l'	= 'goto_first_change'       	# ⭰Δ Change             1st         	「⧛⇧ g」	「」 !!!→sticky
    ';'	= 'goto_last_change'        	# Δ⭲ Change            last         	「⧚⇧ g」	「」 !!!→sticky
    'b'	= ':reset-diff-change'      	# ×Δ Reset diff hunk                	「  」  	「」
    #  	 🌳TS                        	                                    	      	 
    'a'	= 'goto_prev_parameter'     	# 🢔α Argument/parameter previous    	「⧛  a」	「」 !!!→sticky
    's'	= 'goto_next_parameter'     	# α🢖 Argument/parameter next        	「⧚  a」	「」 !!!→sticky
    'd'	= 'goto_prev_function'      	# 🢔ƒ Function           previous    	「⧛  f」	「」 !!!→sticky
    'f'	= 'goto_next_function'      	# ƒ🢖 Function           next        	「⧚  f」	「」 !!!→sticky
    'z'	= 'goto_prev_comment'       	# 🢔ↄ Comment            previous    	「⧛  c」	「」 !!!→sticky
    'x'	= 'goto_next_comment'       	# ↄ🢖 Comment            next        	「⧚  c」	「」 !!!→sticky
    'c'	= 'goto_prev_class'         	# 🢔τ Type definition    previous    	「⧛  t」	「」 !!!→sticky
    'v'	= 'goto_next_class'         	# τ🢖 Type definition    next        	「⧛  t」	「」!!!→sticky
    't'	= 'goto_prev_test'          	# 🢔🧪 Test               previous    	「⧛⇧ t」	「」 !!!→sticky
    'y'	= 'goto_next_test'          	# 🧪🢖 Test               next        	「⧚⇧ t」	「」 !!!→sticky
    #  	 🄻LSP                       	                                    	      	 
    "'"	= ':format'                 	# ℱ∀ Format the file                	「  」  	「」
    'p'	= 'format_selections'       	# ℱ  Format sel               	「  =」 	「」
    'm'	= 'goto_next_diag'          	# 🛠🢖 Diagnostic next                	「⧚  d」	「」 !!!→sticky
    ','	= 'goto_prev_diag'          	# 🢔🛠 Diagnostic previous            	「⧛  d」	「」 !!!→sticky
    '.'	= 'goto_first_diag'         	# ⭰🛠 Diagnostic 1st @ doc           	「⧛⇧ d」	「」 !!!→sticky
    '/'	= 'goto_last_diag'          	# 🛠⭲ Diagnostic last @ doc          	「⧚⇧ d」	「」 !!!→sticky
    'g'	= 'code_action'             	# Ⓐ  Apply code action              	「☰␠ a」	「」
    'n'	= 'rename_symbol'           	# ✎  Rename symbol                  	「☰␠ r」	「」
    'r'	= ':lsp-workspace-command'  	# 🄲🗍 Workspace command picker       	「  」  	「」
    '\'	= ':lsp-stop'               	# ⏹🄻 Stop                           	「  」  	「」
    ']'	= ':lsp-restart'            	# 🔄🄻 Restart                        	「  」  	「」

    'h'	= ':toggle lsp.display-inlay-hints'         	# 💡 toggle inlay hints       	「  」  	「」
    'e'	= 'select_references_to_symbol_under_cursor'	# =🅂 Select symbol references	「☰␠ h」	「」
    #  	 🄳DAP                                       	                             	      	 
    '['	= 'dap_restart'                             	# 🔄🄳 Restart (DAP)           	「  」  	「」

  # [keys.'select'.'space'.'p']	#Ⓢ ☰ⓟ TBD


  [keys.   	'select'.'[']         	#Ⓢ ☰⧛ Unimpaired
    'j'    	= 'goto_prev_change'      	# 🢔Δ Change            	previous       	「  g」 	「」
    # 'G'  	= 'goto_first_change'     	# ⭰Δ Change            	1st            	≝「⇧ g」	「goto_first_change」
    'h'    	= 'goto_first_change'     	# ⭰Δ Change            	1st            	「⇧ g」 	「」
    'd'    	= 'goto_prev_diag'        	# 🢔🛠 Diagnostic        	previous  (LSP)	≝「  d」	「goto_prev_diag」
    # 'D'  	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	≝「⇧ d」	「goto_first_diag」
    'g'    	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	「⇧ d」 	「goto_prev_change」
    'f'    	= 'goto_prev_function'    	# 🢔ƒ Function          	previous (TS)  	≝「  f」	「goto_prev_function」
    's'    	= 'goto_prev_class'       	# 🢔τ Type definition   	previous (TS)  	「  t」 	「」
    'a'    	= 'goto_prev_parameter'   	# 🢔α Argument/parameter	previous (TS)  	≝「  a」	「goto_prev_parameter」
   #'c'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	≝「  c」	「goto_prev_comment」
    '/'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    'z'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    # 'T'  	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	≝「⇧ t」	「goto_prev_test」
    't'    	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	「⇧ t」 	「goto_prev_class」
    'p'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	≝「  p」	「goto_prev_paragraph」
    '['    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    '.'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    'space'	= 'add_newline_above'     	# ⭡␤ Add newline above 	               	≝「  ␠」	「add_newline_above」
    'm'    	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines above it
      ,    	  'delete_selection'      	# !!!missing n
      ,    	  'move_line_up'          	#
      ,    	  'paste_before']         	#

  [keys.	'select'.'['.'c']             	#Ⓢ ☰⧛ℂ Unimpaired Config toggle ON
    'q' 	= ':set auto-save true'           	# 💾🙈 save focus lost
    'w' 	= ':set auto-format true'         	# ℱ💾 auto formatting on save
    'e' 	= ':set line-number absolute'     	# №⭳  Line number display: absolute #⭳
    'r' 	= ':set soft-wrap true'           	# ↪ Soft wrap lines
    't' 	= ':set search.wrap-around true'  	# 🔎↪  search should wrap after depleting the matches
    'a' 	= ':set auto-completion true'     	# ⎁  Auto pop up of auto-completion
    's' 	= ':set search.smart-case true'   	# 𝖗𝕒  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g' 	= ':set indent-guides.render true'	# ┊ Indent guides
    'z' 	= ':set completion-replace true'  	# ⎁ω completions replace word, not pre-cursor part
    'c' 	= ':set true-color true'          	# 🌈 Oerride auto detection of terminal truecolor
    'h' 	= ':set cursorline true'          	# 🟨━ Highlight all lines   with a cursor
    'j' 	= ':set cursorcolumn true'        	# 🟨┃ Highlight all columns with a cursor
    'd' 	= ':set auto-pairs true'          	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i' 	= ':set auto-info true'           	# 🛈  Display infoboxes
    'v' 	= ':set middle-click-paste true'  	# 🖰📋 Middle click paste support
    'm' 	= ':set mouse true'               	# 🖰 Mouse mode
    'u' 	= ':set undercurl true'           	# ‗ Override auto detection of terminal undercurl support
    'p' 	= ':set color-modes true'         	# 🚦 Color mode indicator depending on the mode itself
    'o' 	= ':config-open'                  	# 🧬 Config open   		「  」	「」
    'l' 	= ':config-reload'                	# 🧬🗘 Config reload		「  」	「」

  [keys. 	'select'.'['.'c'.' ']             	#Ⓢ ☰⧛ℂ␠ Unimpaired Config toggle ON sub-space mode
    ' '  	= ':set whitespace.render.space all'  	# · show space
    'b'  	= ':set whitespace.render.nbsp all'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab all'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab all'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline all'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline all'	# ⏎ show newline

  [keys.	'select'.'['.'c'.'.']            	#Ⓢ ☰⧛ℂ🙈 Unimpaired Config toggle ON hidden mode
    '.' 	= ':set file-picker.hidden true'     	# Ignore hidden files
    ',' 	= ':set file-picker.ignore true'     	# Read .ignore files
    'p' 	= ':set file-picker.parents true'    	# Read  ignore files from parent directories
    'i' 	= ':set file-picker.git-ignore true' 	# gi Read .gitignore files
    'g' 	= ':set file-picker.git-global true' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e' 	= ':set file-picker.git-exclude true'	# ge Read .git/info/exclude files
    'l' 	= ':set follow-links true'           	# Follow symlinks instead of ignoring them
    'k' 	= ':set deduplicate-links true'      	# Ignore symlinks that point at files already shown in the picker

  [keys.	'select'.'['.'c'.'y']                           	#Ⓢ ☰⧛ℂ🄻 Unimpaired Config toggle ON LSP mode
    'k' 	= ':set lsp.enable true'                            	# False will completely disable language servers regardless of language settings
    'p' 	= ':set lsp.display-messages true'                  	# LSP progress messages below statusline
    'i' 	= ':set lsp.auto-signature-help true'               	# Enable automatic popup of signature help (parameter hints)
    'h' 	= ':set lsp.display-inlay-hints true'               	# 💡 Inlay hints
    'd' 	= ':set lsp.display-signature-help-docs true'       	# Docs under signature help popup
    's' 	= ':set lsp.snippets true'                          	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.
    'g' 	= ':set lsp.goto-reference-include-declaration true'	# Include declaration in the goto references popup


  [keys.   	'select'.']']         	#Ⓢ ☰⧚
    'j'    	= 'goto_next_change'      	# Δ🢖 Change            	next            	「  g」 	「」
    # 'G'  	= 'goto_last_change'      	# Δ⭲ Change            	last            	≝「⇧ g」	「goto_last_change」
    'h'    	= 'goto_last_change'      	# Δ⭲ Change            	last            	「⇧ g」 	「」
    'd'    	= 'goto_next_diag'        	# 🛠🢖 Diagnostic        	next  (LSP)     	≝「  d」	「goto_next_diag」
    # 'D'  	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	≝「⇧ d」	「goto_last_diag」
    'g'    	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	「⇧ d」 	「goto_next_change」
    'f'    	= 'goto_next_function'    	# ƒ🢖 Function          	next (TS)       	≝「  f」	「goto_next_function」
    's'    	= 'goto_next_class'       	# τ🢖 Type definition   	next (TS)       	「  t」 	「」
    'a'    	= 'goto_next_parameter'   	# α🢖 Argument/parameter	next (TS)       	≝「  a」	「goto_next_parameter」
   #'c'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	≝「  c」	「goto_next_comment」
    '/'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    'z'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    # 'T'  	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	≝「⇧ t」	「goto_next_test」
    't'    	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	「⇧ t」 	「goto_next_class」
    'p'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「goto_next_paragraph」
    ']'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    '.'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    'space'	= 'add_newline_below'     	# ⭣␤ Add newline below 	                	≝「  ␠」	「add_newline_below」
    'm'    	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines below it
      ,    	  'delete_selection'      	# !!!missing n
      ,    	  'goto_line_end'         	#
      ,    	  'paste_after']          	#

  [keys. 	'select'.']'.'c']                         	#Ⓢ ☰⧚ℂ Unimpaired Config toggle OFF
    'q'  	= ':set auto-save false'                      	# 💾🙈 save focus lost
    'w'  	= ':set auto-format false'                    	# ℱ💾 auto formatting on save
    'e'  	= ':set line-number relative'                 	# №⭳  Line number display: absolute #
    'r'  	= ':set soft-wrap false'                      	# ↪ Soft wrap lines
    't'  	= ':set search.wrap-around false'             	# 🔎↪  search should wrap after depleting the matches
    'a'  	= ':set auto-completion false'                	# ⎁  Auto pop up of auto-completion
    's'  	= ':set search.smart-case false'              	# 𝖗𝔸  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g'  	= ':set indent-guides.render false'           	# ┊ Indent guides
    'z'  	= ':set completion-replace false'             	# ⎁ω completions replace word, not pre-cursor part
    'c'  	= ':set false-color false'                    	# 🌈 Oerride auto detection of terminal falsecolor
    'h'  	= ':set cursorline false'                     	# 🟨━ Highlight all lines   with a cursor
    'j'  	= ':set cursorcolumn false'                   	# 🟨┃ Highlight all columns with a cursor
    'd'  	= ':set auto-pairs false'                     	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i'  	= ':set auto-info false'                      	# 🛈  Display infoboxes
    'v'  	= ':set middle-click-paste false'             	# 🖰📋 Middle click paste support
    'm'  	= ':set mouse false'                          	# 🖰 Mouse mode
    'u'  	= ':set undercurl false'                      	# ‗ Override auto detection of terminal undercurl support
    'p'  	= ':set color-modes false'                    	# 🚦 Color mode indicator depending on the mode itself
    'o'  	= ':config-open'                              	# 🧬 Config open   		「  」	「」
    'l'  	= ':config-reload'                            	# 🧬🗘 Config reload		「  」	「」

  [keys. 	'select'.']'.'c'.' ']              	#Ⓢ ☰⧚ℂ␠ Unimpaired Config toggle OFFN sub-space mode
    ' '  	= ':set whitespace.render.space none'  	# · show space
    'b'  	= ':set whitespace.render.nbsp none'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab none'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab none'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline none'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline none'	# ⏎ show newline

  [keys.	'select'.']'.'c'.'.']             	#Ⓢ ☰⧚ℂ🙈 Unimpaired Config toggle OFF hidden mode
    '.' 	= ':set file-picker.hidden false'     	# Ignore hidden files
    ',' 	= ':set file-picker.ignore false'     	# Read .ignore files
    'p' 	= ':set file-picker.parents false'    	# Read  ignore files from parent directories
    'i' 	= ':set file-picker.git-ignore false' 	# gi Read .gitignore files
    'g' 	= ':set file-picker.git-global false' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e' 	= ':set file-picker.git-exclude false'	# ge Read .git/info/exclude files
    'l' 	= ':set follow-links false'           	# Follow symlinks instead of ignoring them
    'k' 	= ':set deduplicate-links false'      	# Ignore symlinks that point at files already shown in the picker

  [keys.	'select'.']'.'c'.'y']                            	#Ⓢ ☰⧚ℂ🄻 Unimpaired Config toggle OFF LSP mode
    'k' 	= ':set lsp.enable false'                            	# False will completely disable language servers regardless of language settings
    'p' 	= ':set lsp.display-messages false'                  	# LSP progress messages below statusline
    'i' 	= ':set lsp.auto-signature-help false'               	# Enable automatic popup of signature help (parameter hints)
    'h' 	= ':set lsp.display-inlay-hints false'               	# 💡 Inlay hints
    'd' 	= ':set lsp.display-signature-help-docs false'       	# Docs under signature help popup
    's' 	= ':set lsp.snippets false'                          	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.
    'g' 	= ':set lsp.goto-reference-include-declaration false'	# Exclude declaration from the goto references popup




# —————————————————————————————————————————————————————————————————————————————————————————————————
[keys.insert] #ⓘ
  'A-}'	= 'normal_mode'     	# mapped to 🠿i⃣ in Karabiner
  ';'  	= {j='normal_mode' }	# Maps `;k` to exit insert mode !!!flashes dialog during typing
  #ⓘ Test ——————————————————————————————————————————————————————————————————————
    # 'j'     	= {f='normal_mode','j'={'f'=[':insert-output /bin/echo -n j','move_char_right','normal_mode']}}
    # 'Escape'	= 'normal_mode'	# Switch to normal mode	「Escape」
    # 'A-x'   	= 'normal_mode'	# Maps Alt-X to enter normal mode
  #ⓘ Free ——————————————————————————————————————————————————————————————————————
    'C-p'  	= 'no_op'	# move to previous line  	「   」	「move_line_up」
    'A-b'  	= 'no_op'	#                        	「   」	「move_prev_word_end」
    # 'C-a'	= ''     	# ???useful vs selections	「C-a」	「goto_line_start」

  #ⓘ   	Compat with non-modal editors        	 
  'C-o'	= 'file_picker'                      	# 🗁 File picker       	「☰␠  f」	「jump_backward」
  'C-O'	= 'file_picker_in_current_directory' 	# 🗁 File picker@curdir	「☰␠⇧ f」	「」
  'C-s'	= ['commit_undo_checkpoint',':write']	# 💾 save file         	「  ⎈s」 	「commit_undo_checkpoint」
  'C-n'	= ':new'                             	# 🗋 new buffer        	「 ⎈n」  	「」

  #ⓘ   	Copy                                	 
  'A-c'	= 'yank'                            	# 🗐▋ Copy main selection <i class='fa fa-copy'></i>                                    	「  c」  	「change_selection」
  'C-c'	= 'yank_main_selection_to_clipboard'	# 📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>         	「☰␠,⇧y」	「toggle_comments」
  'A-C'	= 'yank_joined_to_clipboard'        	# ∀▋ Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i> ∀❚ ∀▋	「☰␠ y」 	「」

  #ⓘ Shell  	                 	 
    'A-|'   	= 'shell_pipe'   	# Pipe each selection through shell command, replacing with output	「⇧Ⓝ \」	「shell_pipe」
    # "A-\\"	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	Ⓝ「 ⎇\」	「」
    # 'A-|' 	= 'shell_pipe_to'	# Pipe each selection into    shell command, ignoring       output	「⇧Ⓝ⎇\」	「shell_pipe_to」

  #ⓘ Move ——————————————————————————————————————————————————————————————————————
    #ⓘ           	Cursor@Home
    'A-j'        	= 'move_visual_line_down'	# ▼                              	ⓘ「 ⎈n」 	「move_visual_line_down」
    'A-k'        	= 'move_visual_line_up'  	# ▲                              	ⓘ「 ⎈p」 	「move_visual_line_up」
    'A-l'        	= 'move_char_left'       	# ◀                              	ⓘ「 ⎈b」 	「move_char_right」
    'A-;'        	= 'move_char_right'      	# ▶                              	ⓘ「 ⎈f」 	「collapse_selection」
    'A-m'        	= 'half_page_down'       	# ⤈ Move half page down          	Ⓝ「 ⎈d」 	「☰🧩」
    'A-,'        	= 'half_page_up'         	# ⤉ Move half page up            	Ⓝ「 ⎈u」 	「keep_primary_selection」
    'A-a'        	= 'extend_to_line_start' 	# ⭰▋ Move     line start + select	「ⓈHome」	「append_mode」 # goto_line_start
    'A-A'        	= 'extend_to_line_end'   	# ⭲▋ Move     line end   + select	「ⓈEnd」  「insert_at_line_end」 # goto_line_end
    #ⓘ           	Compat with non-modal editors
    'C-home'     	= 'goto_file_start'            	# ⇱ line number `<n>` else file start	「  g」	「」
    'C-end'      	= 'goto_last_line'             	# ⇲ file end                         	「  e」	「」
    'C-S-tab'    	= 'goto_previous_buffer'       	# ⎗                                  	「⇧ⓖp」「」  !!!fail
    'C-tab'      	= 'goto_next_buffer'           	# ⎘                                  	「ⓖn」「」  !!!fail
    'C-pageup'   	= 'goto_previous_buffer'       	# ⎗                                  	「   」 	「」
    'C-pagedown' 	= 'goto_next_buffer'           	# ⎘                                  	「   」 	「」
    'A-pageup'   	= 'jump_backward'              	# ⎗̡                                 	「   」 	「」
    'A-pagedown' 	= 'jump_forward'               	# ⎘̡                                 	「   」 	「」
    # 'C-left'   	= 'move_prev_long_word_start'  	#                                    	「   」 	「」
    # 'C-right'  	= 'move_next_long_word_start'  	#                                    	「   」 	「」
    'S-A-left'   	= 'extend_prev_word_start'     	# ω← Extend previous word start      	「Ⓢ  b」	「」
    'S-A-right'  	= 'extend_next_word_end'       	# ω⇥ Extend next     word end        	「Ⓢ  e」	「」
    # 'S-A-right'	= 'extend_next_word_start'     	# ω→ Extend next     word start      	「Ⓢ  w」	「」
    'S-C-left'   	= 'extend_prev_long_word_start'	# W← Extend previous WORD start      	「Ⓢ ⇧b」	「」
    'S-C-right'  	= 'extend_next_long_word_start'	# W→ Extend next     WORD start      	「Ⓢ ⇧W」	「」
    # 'S-C-right'	= 'extend_next_long_word_end'  	# W⇥ Extend next    WORD end         	「Ⓢ ⇧E」	「」

    # 'C-b'	= 'move_char_left'	#	⌫c ᵡ char ←	「 ⎈b」	「move_char_left」

    #ⓘ   	File/jumplist
    'A-1'	= 'goto_previous_buffer'	# ⎗                               	「ⓖp」    	「」
    'A-2'	= 'goto_next_buffer'    	# ⎘                               	「ⓖn」    	「」
    'A-3'	= 'jump_backward'       	# ⎗̡ Jump backward on the jumplist	   Ⓝ「⎈o」	「」
    'A-4'	= 'jump_forward'        	# ⎘̡ Jump forward  on the jumplist	   Ⓝ「⎈i」	「」

    #ⓘ       	Word
    'A-d'    	= 'move_prev_word_start'       	# 🢔ω  Move prev beg of word         	   Ⓝ「 b」	「delete_word_forward」
    'A-f'    	= 'move_next_word_end'         	# ω🢖  Move next end of word         	   Ⓝ「 e」	「move_next_word_start」
    'A-D'    	= 'move_prev_long_word_start'  	# 🢔W Move prev beg of WORD          	  「⇧Ⓝ b」	「」
    'A-F'    	= 'move_next_long_word_end'    	# W🢖 Move next end of WORD          	  「⇧Ⓝ e」	「」
    'C-d'    	= ['move_prev_long_word_start',	# ⤝W  Move prev end of WORD         	「⇧ b」   	「half_page_down」
             	   'extend_prev_word_start',   	#                                   	 
             	   'extend_next_word_start']   	# !!!move_prev_long_word_end missing	 
    'C-f'    	= 'move_next_long_word_start'  	# W⤞ Move next end of WORD          	「⇧ w」	「page_down」
    # 'C-f'  	= ['collapse_selection',       	# W⤞ Move next end of WORD          	「⇧ w」	「page_down」
    #        	   'extend_next_long_word_end']	#                                   	 
    'C-left' 	= 'move_prev_long_word_start'  	# 🢔W  Move prev beg of WORD         	   「⇧ b」	「」
    'C-right'	= 'move_next_long_word_start'  	# W⤞ Move next end of WORD          	「⇧ w」   	「」
    'A-left' 	= 'move_prev_word_end'         	# ⤝ω Move prev end of word          	≝ⓘ「⎇◀」  	「move_prev_word_end」
    'A-right'	= 'move_next_word_start'       	# ω⤞ Move next beg of word          	≝ⓘ「⎇▶」  	「move_next_word_start」
    # 'A-d'  	= 'move_prev_word_end'         	# ⤝ω Move prev end of word          	ⓘ「⎇b」   	「」
    # 'A-f'  	= 'move_next_word_start'       	# ω⤞ Move next beg of word          	ⓘ「⎇f」   	「」

    #ⓘ     	Line
    # 'A-G'	= 'goto_line'   	# ⮊⎯ go to line # <n> (set <n> in advance), use Ⓒ<n>⏎	「⇧Ⓝ g」	「」
    'A-G'  	= 'command_mode'	# Ⓒ Enter command mode                               	「⇧Ⓝ ;」	「」
    'A-:'  	= 'command_mode'	# Ⓒ Enter command mode                               	「⇧Ⓝ ;」	「」

    #ⓘ   	Block
    'A->'	= 'goto_prev_paragraph'	# 🢔¶ Move paragraph start	Ⓝ「⇧ [」	「indent」
    'A-?'	= 'goto_next_paragraph'	# ¶🢖 Move paragraph end  	Ⓝ「⇧ ]」	「rsearch」

    'A-r'	= 'repeat_last_motion'	# ∞ Repeat last motion (f/t/m)	Ⓝ「 ⎇.」	「replace」

    #ⓘ   	Find
    'A-w'	= 'find_next_char'  	# 🔎   Find       next     char           	Ⓝ「  f」   	「move_next_word_start」     	<i class='mss mss-Search-3'></i>
    'A-W'	= 'find_prev_char'  	# 🔍   Find       previous char           	「⇧Ⓝ f」   	「move_next_long_word_start」	<i class='fa fa-search'></i>
    'A-S'	= 'rsearch'         	# 🔍𝖗 for previous regex pattern          	Ⓝ「⇧ /」   	「split_selection」
    'A-s'	= 'search'          	# 🔎𝖗 for          regex pattern          	「⇧Ⓝ  /」  	「select_regex」
    'A-.'	= 'search_prev'     	# 🢔◎ ◎͔ Select previous search match     	   Ⓝ「⇧ n」	「repeat_last_change!!!」   !!! blocked by .Repeat
    'A-/'	= 'search_next'     	# ◎🢖 ◎͕ Select next     search match     	   Ⓝ「  n」	「search」
    'A-8'	= 'search_selection'	# 𝖗🢔▋ Use selection as the search pattern	   Ⓝ「⇧ 8」	「<8>」   !!! blocked by ∀*

  #ⓘ Select ——————————————————————————————————————————————————————————————————————
    'A-e'	= 'select_mode'	# Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web)	「  v」	「move_next_word_end」 <i class='fa fa-arrows'></i>

    # Compat with non-modal editors
    # 'C-a'  	= ['save_selection','select_all']	# 🖈∀▋                                                       	Ⓝ「⇧ 5」  「increment」 ???better than ⭰× × to line ⭰
    'A-down' 	= 'copy_selection_on_next_line'  	# 🠷 Copy selection onto the next     line (add cursor below)	Ⓝ「⇧ c」  「」
    'A-up'   	= 'copy_selection_on_prev_line'  	# 🠵 Copy selection onto the previous line (add cursor above)	「⇧⎇c」 	「」
    'S-left' 	= 'extend_char_left'             	#                                                           	「Ⓢh/◀」	「」
    'S-down' 	= 'extend_line_down'             	#                                                           	「Ⓢj/▼」	「」
    'S-up'   	= 'extend_line_up'               	#                                                           	「Ⓢk/▲」	「」
    'S-right'	= 'extend_char_right'            	#                                                           	「Ⓢl/▶」	「」

    'C-g'  	= 'save_selection'	# 🖈 Save the current selection to the jumplist	Ⓝ「  ⎈s」	「」
    # 'A-G'	= 'save_selection'	# 🖈 Save the current selection to the jumplist	Ⓝ「  ⎈s」	「」


    'A-E'  	= 'extend_to_line_bounds'  	# ━ Extend selection to line bounds (line-wise selection)⎯	「⇧Ⓝ  x」	「move_next_long_word_end」
    'C-e'  	= ['select_mode'           	# =ω "Extend" selection to same word ω₌ ω≡                	「   」  	「goto_line_end_newline」
      ,    	 'move_next_word_end'      	# 1st since word_start command might select previous word
      ,    	 'move_prev_word_start'    	#
      ,    	 'search_selection'        	#
      ,    	 'make_search_word_bounded'	#
      ,    	 'extend_search_next'      	#
      ,    	 'insert_mode'             	#
      ]    	                           	# = Sublime's find_under_expand
    'A-J'  	= 'extend_line_below'      	# ⮒ Select current line, if already selected, extend to next line	Ⓝ「  x」	「join_selections」
    # 'A-5'	= 'select_paragraph'       	# ¶▋ Select this paragraph                                       	Ⓝ「   」	「<5>」  !!!missing ∀* !!!missing command
    'A-%'  	= 'select_all'             	# ∀▋ Select entire file                                          	「⇧Ⓝ 5」	「select_all」

    'A-M'     	= 'shrink_selection'           	# ⸙− Shrink syntax tree object selection    🌳TS ⸙₋          	Ⓝ「 ⎇i」	「」
    'A-<'     	= 'expand_selection'           	# ⸙₊ Expand selection to parent syntax node 🌳TS ⸙₊          	Ⓝ「 ⎇o」	「」
    'A-N'     	= 'split_selection'            	# ䷖𝖗 on regex matches                                       	「⇧Ⓝ s」	「search_prev」
    'A-S-down'	= 'copy_selection_on_next_line'	# 🠷 Copy selection onto the next     line (add cursor below)	Ⓝ「⇧ c」	「」
    'A-S-up'  	= 'copy_selection_on_prev_line'	# 🠵 Copy selection onto the previous line (add cursor above)	Ⓝ「⇧⎇c」	「」

    "A-'"	= 'collapse_selection'	# 🢖🢔 Collapse selection onto a single cursor 	Ⓝ「  ;」	「」
    'A-K'	= 'keep_selections'   	# ᵏ𝖗 selections not matching the regex (keep)	「⇧Ⓝ k」	「keep_selections」
    'A-L'	= 'remove_selections' 	# ᵡ𝖗 selections     matching the regex       	「⇧Ⓝ⎇k」	「」

    'A-minus'	= 'trim_selections'             	# ✁Trim whitespace from the selection                    	Ⓝ「⇧ -」	「」
    'A-_'    	= 'merge_consecutive_selections'	# ⛙ Merge consecutive selections ⨝                       	「⇧⎇ -」	「trim_selections」
    # 'A-+'  	= 'dupe_selections'             	# 🗐Duplicate selection (currently nonfunctional/disabled)	「⇧Ⓝ =」	「dupe_selections」

  #ⓘ Change ——————————————————————————————————————————————————————————————————————
    # 'A-b'	= 'repeat_last_change'               	# ∞ Repeat last change	「⇧Ⓝ  .」	「move_prev_word_start」  !!!missing
    #ⓘ     	line                                 	                      	       	 
    'C-J'  	= ['extend_to_line_bounds',          	# ━⮃ swap line ↓      	「 」    	「」!!! not implemented yet
           	   'delete_selection',               	#                     	       	 github.com/helix-editor/helix/issues/2245
           	   'paste_after']                    	#                     	       	 
    'C-K'  	= ['extend_to_line_bounds',          	# ━⮁ swap line ↑      	「 」    	「」
           	   'delete_selection','move_line_up',	#                     	       	 
           	   'paste_before']                   	#                     	       	 

    'S-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	「⇧  o」 	「」
    'A-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	  「  o」	「insert_newline」
    'C-ret'	= 'open_below'            	# ⭣␤ Open new line below selection	  「  o」	「insert_newline」
    'ret'  	=['commit_undo_checkpoint'	#  ␤ Insert new line              	 ≝ⓘ「 ⏎」	「insert_newline」
      ,    	  'insert_newline']       	# after saving an undo checkpoint

    #            	Delete
    #ⓘ           	char
    "backspace"  	= 'delete_char_backward'	# ⌫c ᵡ char ←    	≝「 ⌫」	「delete_char_backward」
    'C-l'        	= 'delete_char_backward'	# ⌫c ᵡ char ←    	「 ⎈h」	「」
    'C-;'        	= 'delete_char_forward' 	# ⌦c ᵡ char →    	「 ⎈d」	「」 !!!fails
    'A-6'        	= 'delete_char_forward' 	# ⌦ !!!missing ∀*	Ⓝ「 ⌦」	「<5>」
    'A-H'        	= 'delete_char_forward' 	# ⌦c ᵡ char →    	「⇧ ⌦」	「」
    #ⓘ           	word                    	                 	 
    #            	Compat with non-modal editors
    'A-del'      	= 'delete_word_forward'          	# ⌦ω ᵡ word →	 ⓘ「  ⎇d」	「」
    'C-del'      	= ['extend_next_long_word_end',  	# ⌦W         	「   」   	「」
                 	   'delete_selection']           	# ᵡ Word →   	 
    'A-backspace'	= 'delete_word_backward'         	# ⌫ω ᵡ word ←	≝「 ⎈w」	「」
    'C-backspace'	= ['extend_prev_long_word_start',	# ⌫W         	「   」 	「」
                 	   'delete_selection']           	# ᵡ Word ←   	 
    #            	                                 	             	 
    'C-h'        	= ['extend_prev_long_word_start',	# ⌫W         	「   」	「delete_char_backward」
                 	   'delete_selection']           	#     ᵡ Word ←
    'A-h'        	= 'delete_word_backward'         	# ⌫ω ᵡ word ←   	ⓘ「 ⎈w」  	「」
    #'A-H'       	= 'delete_word_forward'          	# ⌦ω ᵡ word →   	 ⓘ「  ⎇d」	「」
    'C-a'        	= 'kill_to_line_start'           	# ⭰ᵡ ᵡ to line ⭰	ⓘ「 ⎈u」  	「goto_line_start」  ??? better than ∀▋select_all
    'C-A'        	= 'kill_to_line_end'             	# ᵡ⭲ ᵡ to line ⭲	ⓘ「 ⎈k」  	「」
    'C-j'        	= 'kill_to_line_start'           	# ⭰ᵡ ᵡ to line ⭰	ⓘ「 ⎈u」  	「insert_newline」
    'C-k'        	= 'kill_to_line_end'             	# ᵡ⭲ ᵡ to line ⭲	ⓘ「 ⎈k」  	「kill_to_line_end」

    #ⓘ        	line                                 	                	   	 
    'A-i'     	= ['extend_to_line_bounds',          	# ━⮃ swap line ↓	「 」	「」!!! not implemented yet
              	   'delete_selection',               	#               	   	 github.com/helix-editor/helix/issues/2245
              	   'paste_after']                    	#               	   	 
    'A-o'     	= ['extend_to_line_bounds',          	# ━⮁ swap line ↑	「 」	「」
              	   'delete_selection','move_line_up',	#               	   	 
              	   'paste_before']                   	#               	   	 
    # 'A-i'   	= ['extend_line',                    	# ━⮃ swap line ↓	   	 
    #         	   'delete_selection',               	#               	   	 
    #         	   'paste_after',                    	#               	   	 
    #         	   'move_line_down']                 	#               	「 」	「」
    # 'A-o'   	= ['extend_line',                    	# ━⮁ swap line ↑	「 」	「」
    #         	   'yank',                           	#               	   	 
    #         	   'move_line_up',                   	#               	   	 
    #         	   'open_above',                     	#               	   	 
    #         	   'replace_with_yanked',            	#               	   	 
    #         	   'move_line_down','move_line_down',	#               	   	 
    #         	   'extend_line',                    	#               	   	 
    #         	   'delete_selection',               	#               	   	 
    #         	   'move_line_up','move_line_up']    	#               	   	 
    'C-A-down'	= ['extend_line',                    	# ━↓ dupe line ↓	「 」	「」!!! not implemented yet
              	   'yank',                           	#               	   	 
              	   'move_line_down',                 	#               	   	 
              	   'open_above',                     	#               	   	 
              	   'normal_mode',                    	#               	   	 
              	   'replace_with_yanked',            	#               	   	 
              	   'insert_mode']                    	# ━↑ dupe line ↑	「 」	「」
    'C-A-up'  	= ['extend_line',                    	#               	   	 
              	   'yank',                           	#               	   	 
              	   'open_above',                     	#               	   	 
              	   'normal_mode',                    	#               	   	 
              	   'replace_with_yanked',            	#               	   	 
              	   'insert_mode']                    	#

    #ⓘ     	selection                             	                                  	       	 
    'A-x'  	= 'delete_selection'                  	# ᵡ▋                              	Ⓝ「  d」 	「extend_line」
    'del'  	= 'delete_selection'                  	# ᵡ▋                              	Ⓝ「d」   	「delete_char_forward」 ??? might be better to delete word/till line ends after selection
    'S-del'	= 'delete_selection_noyank'           	# 🕱▋                              	  「 ⎇d」	「」
    'A-X'  	= 'join_selections'                   	# ᵡ␤ ⨝ Join lines inside selection	「⇧ j」  	「extend_to_line_bounds」
    'C-x'  	= ['yank_main_selection_to_clipboard',	#                                 	×📋     	「   」	「completion」
           	   'delete_selection']                	#                                 	cut to clipboard <i class='fa fa-clipboard'></i>

    'A-t'	= 'replace'            	# 🗘c  Replace with a character	Ⓝ「  r」	「find_till_char」
    'A-T'	= 'replace_with_yanked'	# 🗘📋 Replace with copied text 	「⇧Ⓝ r」	「till_prev_char」  <i class='fa fa-copy'></i>

    #ⓘ     	Misc               	                                           	 
    'C-/'  	= 'toggle_comments'	# un-/comment the selections               	「 ⎈c」 	「」
    'C-m'  	= 'decrement'      	# ⊖ o̠ Decrement object/number under cursor	「 ⎈x」 	「」 <span class='cd'>o&#800;</span>
    'C-,'  	= 'increment'      	# ⊕ o̟ Increment object/number under cursor	「 ⎈a」 	「」 <span class='cd'>o&#799;</span> !!!fails
    # 'C-r'	= 'insert_register'	# 📋r Paste register                        	ⓘ「 ⎈r」	「insert_register」
    'C-i'  	= 'completion'     	# ⎁ Autocomplete                           	「   」 	「」

    #'A-`'	= ''                   	# ☰𝔸𝕒 Case conversion mode	Ⓝ「  」  	「switch_to_lowercase」 !!!missing aliases
    'A-⎈' 	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	Ⓝ「 ⎇`」 	「」
    'A-B' 	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)          	「⇧Ⓝ  `」	「」
    'C-b' 	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)          	Ⓝ「 ⎇`」 	「」

    # 'A-q'	= 'record_macro'   	# ⏺ Start/stop macro recording to the selected register   	Ⓝ「  q」	「record_macro」
    # 'A-Q'	= 'replay_macro'   	# ▶  Play back a recorded macro from the selected register	「⇧Ⓝ q」 replay_macro]
    'A-"'  	= 'select_register'	# ®  Select a register to copy/paste from                 	Ⓝ「  '<reg>」	「select_register」

    'A-I'	= 'open_above'           	# ⭡␤ Open new line above selection	「⇧Ⓝ o」 	「insert_at_line_start」
    'A-O'	= 'open_below'           	# ⭣␤ Open new line below selection	Ⓝ「  o」 	「insert_at_line_end」
    'A-u'	= 'undo'                 	# ⎌ Undo change                   	Ⓝ「  u」 	「undo mode」
    'A-y'	= 'redo'                 	# ↷ Redo change                   	Ⓝ「⇧ u」 	「yank」
    'A-U'	= 'earlier'              	# 🕘 Move backward in history      	「⇧Ⓝ ⎇u」	「redo」 <i class='fa fa-history'></i>
    'A-Y'	= 'later'                	# 🕒 Move forward in history ⏱     	「⇧Ⓝ⎇u」 	「」 <i class='fa fa-clock-o'></i>
    'C-y'	= 'redo'                 	# ↷ Redo change                   	Ⓝ「⇧ u」 	「」
    'A-v'	= 'paste_after'          	# 📋⤹ Paste after selection        	Ⓝ「  p」 	「select_mode」 ⤹<i class='fa fa-copy'></i>
    'C-v'	= 'paste_clipboard_after'	# 📋⤹ Paste after selection        	Ⓝ「␠ p」 	「」  <i class='fa fa-copy'></i>⤹
    'A-V'	= 'paste_before'         	# ⤸📋 Paste before selection       	Ⓝ「⇧ p」 	「」  <i class='fa fa-clipboard'></i>⤹
    'C-z'	= 'undo'                 	# ⎌ Undo change                   	Ⓝ「  u」 	「」
    'C-Z'	= 'redo'                 	# ↷ Redo change !!!fail           	「⇧Ⓝ u」 	「」

    #ⓘ   	Select manipulation ————————————————————————————————————————————————————————————————————
    'A-('	= 'rotate_selection_contents_backward'	# ⟲ Rotate selection contents backward                       	「⇧Ⓝ⎇9」	「rotate_selections_backward」
    'A-)'	= 'rotate_selection_contents_forward' 	# ⟳ Rotate selection contents forward                        	「⇧Ⓝ⎇0」	「rotate_selections_forward」
    'A-7'	= 'align_selections'                  	# ⥂ Align selection in columns !!!missing ∀*                 	Ⓝ「⇧ 7」	「<7>」
    'A-&'	= 'align_selections'                  	# ⥂ Align selection in columns                               	「⇧Ⓝ 7」	「align_selections」
    'A-='	= 'format_selections'                 	# ℱ Format selection (currently nonfunctional/disabled) (LSP)	Ⓝ「  =」	「format_selections」

    'A-$'	= 'shell_keep_pipe'	# $ᵏ| Pipe each selection into shell command, keep selections where command returned 0	Ⓝ「⇧ 4」	「shell_keep_pipe」

    #ⓘ   	Shell
    'A-!'	= 'shell_insert_output'	# 🢔$ Run shell command, inserting output before each selection	「⇧$!」	「shell_insert_output」
    'A-@'	= 'shell_append_output'	# $🢖 Run shell command, appending output after  each selection	「⇧$!」	「」

  #ⓘ Misc ——————————————————————————————————————————————————————————————————————
    'A-R' 	= 'command_palette'         	# ☰Ⓒ Command Palette  	「⇧ /」	「」
    "A-\\"	= ':toggle soft-wrap.enable'	# ↪   toggle soft wrap	「  」 	「」
    'C-u' 	= 'signature_help'          	# α﹖ Signature help 🄻 	「   」	「kill_to_line_start」ƒα﹖

  ### ☰Minor modes
  [keys.	'insert'.'F1']        	#ⓘ ☰? Help mode                                            	「  」  	「」
   #'F1'	= 'show-keymap'         	# ⌨ Help !!!missing                                         	「  」  	「」
    'F2'	= ':tree-sitter-scopes' 	# 🌳 Tree sitter scopes (for theming and development)        	「  」  	「」
    'F3'	= ':tree-sitter-subtree'	# 🌳 Tree sitter subtree under cursor (for debugging queries)	「  」  	「」
    'c' 	= ':character-info'     	# 🔣ℹ Character info                                         	「  」  	「」


  [keys. 	'insert'.'A-`']       	#ⓘ ☰𝔸𝕒 Case conversion mode	「   」 	「switch_to_lowercase」
    '`'  	= 'switch_case'        	# 𝕒⇋𝔸 (selection)          	「⇧ `」 	「」
    'j'  	= 'switch_to_lowercase'	# 𝔸𝕒 (selection)           	「  `」 	「」
    'k'  	= 'switch_to_uppercase'	# 𝕒𝔸 (selection)           	「 ⎇`」 	「」
    # 'l'	= 'switch_to_sentence' 	# 𝔸𝕒 𝔹𝕓 (selection)        	「 」   	「」 !!!missing
    # ';'	= 'switch_to_camel'    	# 𝕔𝕒𝕄𝕖𝕝 (selection)        	「 」   	「」 !!!missing
    # 'm'	= 'switch_to_mixed'    	# 𝕄𝕚ℂ𝕒 (selection)         	「 」   	「」 !!!missing
    # '-'	= 'switch_to_dash'     	# 𝕒-𝕓 (selection)          	「 」   	「」 !!!missing
    # '.'	= 'switch_to_dot'      	# 𝕒.𝕓 (selection)          	「 」   	「」 !!!missing

    'A-`'	= 'switch_case'	# 𝕒⇋𝔸 (selection)	「⇧ `」	「」

  [keys.      	'insert'.'A-p']     	#ⓘ ☰👁 View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」

    # 'p'  	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
    # 'A-p'	= 'view_mode_sticky'	# ☰👁ₛ 'sticky', persistent	「   」	「」
  [keys.      	'insert'.'A-P']     	#ⓘ 👁ₛ View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」

  [keys.      	'insert'.'A-Z']     	#ⓘ 👁ₛ View mode scroll/       	「$!」      	「paste_after」
    #         	                     	 /manipulate w/o Δselection    	          	#
    'z'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    'c'       	= 'no_op'            	#                              	「   」     	「align_view_center」
    't'       	= 'no_op'            	#                              	「   」     	「align_view_top」
    'b'       	= 'no_op'            	#                              	「   」     	「align_view_bottom」
    'C-d'     	= 'no_op'            	#                              	「   」     	「half_page_down」
    'C-u'     	= 'no_op'            	#                              	「   」     	「half_page_up」
    'C-f'     	= 'no_op'            	#                              	「   」     	「page_down」
    'C-b'     	= 'no_op'            	#                              	「   」     	「page_up」
    #         	                     	 ↓ Align line to...            	          	#
    'u'       	= 'align_view_bottom'	# 🗔⭳ ... Screen bottom         	「  b」     	「」
    'i'       	= 'align_view_top'   	# 🗔⭱ ... Screen top            	「  t」     	「」
    'n'       	= 'align_view_center'	# 🗔·| ... center       (vert)  	「  z」     	「align_view_center」
    'h'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「align_view_middle」
    'l'       	= 'align_view_middle'	# 🗔·⎯ ... Screen middle (horiz)	「  m」     	「」
    'down'    	= 'scroll_down'      	# ▼ Scroll ↓                   	「down」    	「scroll_down」
    'up'      	= 'scroll_up'        	# ▲ Scroll ↑                   	「up」      	「scroll_up」
    'j'       	= 'scroll_down'      	# ▼ Scroll ↓                   	「  j」     	「scroll_down」
    'k'       	= 'scroll_up'        	# ▲ Scroll ↑                   	「  k」     	「scroll_up」
    'm'       	= 'half_page_down'   	# ⤈ Move half page ↓           	「  d」     	「align_view_middle」
    ','       	= 'half_page_up'     	# ⤉ Move half page ↑           	「  u」     	「」
    'J'       	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'K'       	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'C-j'     	= 'page_down'        	# ⇟ Move      page ↓           	「  f」     	「」
    'C-k'     	= 'page_up'          	# ⇞ Move      page ↑           	「  b」     	「」
    'pagedown'	= 'page_down'        	# ⇟ Move      page ↓           	「pageup」  	「page_down」
    'pageup'  	= 'page_up'          	# ⇞ Move      page ↑           	「pagedown」	「page_up」


  [keys. 	'insert'.'A-g']            	#ⓘ ⓖ☰⮊ Goto mode Jumps to various locations	「$!」     	「」
    'p'  	= 'no_op'                   	#                                          	   「   」 	「goto_previous_buffer」
    'b'  	= 'jumplist_picker'         	# ☰🖈 List jumplist                         	   「☰␠j」 	「goto_window_bottom」
    'a'  	= 'goto_first_nonwhitespace'	# 𝕒⤝ line start 1ₛₜ non-whitespace char ¬␣ 	   「  s」 	「goto_last_accessed_file」
    's'  	= 'goto_line_end'           	# ⭲ line end                               	   「  l」 	「goto_first_nonwhitespace」
    'h'  	= 'goto_line_start'         	# ⤝ line start                             	   ≝「  h」	「goto_line_start」
    'g'  	= 'goto_file_start'         	# ━№⇱ line number `<n>` else file start ⎯⭱ 	   ≝「  g」	「goto_file_start」
    'j'  	= 'move_line_down'          	# ━▼ line down (ignore wrap)               	   「  e」 	「」
    'k'  	= 'move_line_up'            	# ━▲ line up   (ignore wrap)               	   「  g」 	「goto_line_end」
    "'"  	= 'goto_last_line'          	# ⇲ file end   ⭳                           	   「  e」 	「」
    'l'  	= 'goto_prev_paragraph'     	# 🢔¶ Move paragraph start                  	「]p 」    	「goto_line_end」
    ';'  	= 'goto_next_paragraph'     	# ¶🢖 Move paragraph end                    	「[p 」    	「」
    '.'  	= 'goto_prev_paragraph'     	# 🢔¶ Move paragraph start                  	「[p  」   	「goto_last_modification」
    '/'  	= 'goto_next_paragraph'     	# ¶🢖 Move paragraph end                    	「]p  」   	「」
    'f'  	= 'goto_file'               	# files in the selection                   	   ≝「  f」	「goto_file」
    'm'  	= 'goto_window_bottom'      	# 🗔⭳ screen bottom                         	「  b」    	「goto_last_modified_file」
    ','  	= 'goto_window_top'         	# 🗔⭱ screen top                            	「  t」    	「」
    'n'  	= 'goto_window_center'      	# 🗔· screen middle                         	「  c」    	「goto_next_buffer」
    'D'  	= 'goto_declaration'        	# 🆔 declaration (LSP)                      	「⇧  d」   	「goto_declaration」
    'd'  	= 'goto_definition'         	# ≝ definition (LSP)                       	   ≝「  d」	「goto_definition」
    'F12'	= 'goto_definition'         	# ≝ definition (LSP)                       	   「  d」 	「」
    'i'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	   ≝「  i」	「goto_implementation」
    't'  	= 'goto_implementation'     	# 🄸 implementation (LSP)                   	   「  i」 	「goto_window_top」
    'r'  	= 'goto_reference'          	# 🅁※ references (LSP)                      	≝「  r」   	「goto_reference」
    'e'  	= 'goto_type_definition'    	# τ≝ type definition (LSP)                 	   「  y」 	「goto_last_line」
    'y'  	= 'goto_type_definition'    	# τ≝ type definition (LSP)                 	   ≝「  y」	「goto_type_definition」
    'c'  	= 'goto_last_accessed_file' 	# 🕮␜ file last accessed/alternate          	「  a」    	「goto_window_center」
    'v'  	= 'goto_last_modified_file' 	# ✎␜ file last modified/alternate          	「  m」    	「」
    '1'  	= 'goto_previous_buffer'    	# buffer previous                          	   「  p」 	「」 !!!missing ∀*
    '2'  	= 'goto_next_buffer'        	# buffer next                              	   「  n」 	「」 !!!missing ∀*
    '3'  	= 'jump_backward'           	# ⎗̡ Jump backward on the jumplist         	   「   」 	「」 !!!missing ∀*
    '4'  	= 'jump_forward'            	# ⎘̡ Jump forward  on the jumplist         	   「   」 	「」 !!!missing ∀*
    'u'  	= 'goto_last_modification'  	# 🕘 last modification in current file      	「  .」    	「goto_line_start」 <i class='fa fa-history'></i>
    # "'"	= 'goto-char#'              	# c#                                       	   「   」 	「」 !!! not available

    'A'	= 'extend_to_first_nonwhitespace'	# 𝕒⤝▋ Extend	━line start	「」	「」!!!delete after https://github.com/helix-editor/helix/issues/1486 is implemented


  [keys.	'insert'.'A-n']            	#ⓘ ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>	「$!」  	「」
    'n' 	= 'match_brackets'          	# 🢔()🢖 Goto matching   bracket (TS)                   	「  m」 	「」
    '.' 	= 'match_brackets'          	# 🢔(   Goto next left  bracket (TS)                   	「  」  	「」 !!!missing
    '/' 	= 'match_brackets'          	#   )🢖 Goto next right bracket (TS)                   	「  」  	「」 !!!missing
    'i' 	= 'surround_add'            	# (+)  Surround current selection with <char>         	「  s」 	「」
    't' 	= 'surround_replace'        	# (🗘) Replace surround character <from> with <to>     	「  r」 	「」
    'x' 	= 'surround_delete'         	# (ᵡ)  Delete  surround character <char>              	「  d」 	「」
    'e' 	= 'select_textobject_around'	# 🢔O🢖  Select around textobject                       	「  a」 	「」
    'a' 	= 'select_textobject_inner' 	# 🢖O🢔  Select inside textobject                       	「  i」 	「」


  [keys.     	'insert'.'C-w']	#ⓘ ☰🗔  Window mode                    	Ⓝ「⎈ w」  	「」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'C-e'    	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'a'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    's'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	 「  w」  	「hsplit」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」


  [keys    	.'insert'.'A-space']                     	#ⓘ ☰␠  Space mode              	Ⓝ「 ␠」  	「」
   #'space'	= 'insert_mode'                       	# ⁁⤸ Insert before sel             	「  i」  	「」 !!!panick! !!!missing
    'ret'  	= 'command_mode'                      	# Ⓒ Enter command mode             	「  ⎋」  	「」
    'F'    	= 'file_picker_in_current_directory'  	# 🗁 Open file   picker@curdir      	「☰␠⇧ f」	「file_picker_in_current_directory」
    'c'    	= 'yank_main_selection_to_clipboard'  	# 📋▋ Copy main sel to sys clipboard	「☰␠ ⇧y」	「」 <i class='fa fa-clipboard'></i>▋
    'x'    	= ['yank_main_selection_to_clipboard',	# ×📋 ▋                             	「   」  	「」 <i class='fa fa-clipboard'></i>
           	   'delete_selection']                	# cut to clipboard                 	「   」  	「」  create a new buffer and paste a buffer there !!! not available yet
    #      	line                                  	                                   	       	 
    'J'    	= ['extend_to_line_bounds',           	# ━⮃ swap line ↓                   	「 」    	「」!!! not implemented yet
           	   'delete_selection',                	#                                  	       	 github.com/helix-editor/helix/issues/2245
           	   'paste_after']                     	#                                  	       	 
    'K'    	= ['extend_to_line_bounds',           	# ━⮁ swap line ↑                   	「 」    	「」
           	   'delete_selection','move_line_up', 	#                                  	       	 
           	   'paste_before']                    	#                                  	       	 

    'p'	= 'no_op'                	#                                         	≝「   p」 	「paste_clipboard_after」
    'P'	= 'no_op'                	#                                         	≝「⇧ p」  	「paste_clipboard_before」
    'Y'	= 'no_op'                	#                                         	「   」   	「yank_main_selection_to_clipboard」
    'S'	= 'no_op'                	#                                         	「⇧   」  	「workspace_symbol_picker」
    'r'	= 'command_palette'      	# ☰Ⓒ Command Palette                      	「   」   	「rename_symbol]
    ';'	= 'command_mode'         	# Ⓒ Enter command mode                    	「⇧ ;」   	「」
    'j'	= 'extend_line'          	# ⮒ Select cur/next(if selected) line     	「  x」   	「」
    'k'	= 'keep_selections'      	# ᵏ𝖗 sels not matching the Re (keep)      	   「⇧ k」	「」
    'l'	= 'remove_selections'    	# ᵡ𝖗 sels     matching the Re             	   「⇧⎇k」	「」
    's'	= 'select_regex'         	# 𝖗▋ Select all Re matches in sels        	   「  s」	「symbol_picker」
    'a'	= ['save_selection',     	# 🖈∀▋                                     	「⇧ 5」   	「」
       	   'select_all']         	# Save cur pos, select everything         	 
    'h'	= ['kill_to_line_start', 	# ᵡ⎯                                      	「   」	「」
       	   'kill_to_line_end']   	# Delete this line                        	 
    'g'	= 'save_selection'       	# 🖈 Save cur sel to the jumplist          	「  ⎈s」	「」
    'e'	= 'extend_to_line_bounds'	# ━ Extend sel to line bounds⎯            	「  x」 	「」
   #'q'	= '???'                  	#                                         	「  q」 	「」
    't'	= 'replace_with_yanked'  	# 🗘📋 Replace with copied text             	「⇧ r」 	「」  <i class='fa fa-copy'></i>
    #  	🄻LSP                     	                                          	 
    'R'	= 'rename_symbol'        	# ✎ Rename symbol                         	「  r」 	「replace_selections_with_clipboard」
    'o'	= 'hover'                	# ? Show doc for item under cursor        	「  k」 	「」
    'y'	= 'code_action'          	# Ⓐ Apply code action)                    	「☰␠ a」	「yank_joined_to_clipboard」
    #  	                         	                                          	 
    '/'	= 'global_search'        	# 🔎🗁 Global search in workspace folder    	≝「☰␠ /」	「global_search」
    'v'	= 'paste_clipboard_after'	# 📋⤹ Paste after sels                     	「☰␠ p」 	「」
   #'z'	= 'list_kills'           	# 🕱☰ new buffer with clipboard content    	「   」  	「」	 !!!missing
    'n'	= 'split_selection'      	# ䷖𝖗 on regex matches                     	「⇧ s」  	「」
    'b'	= 'switch_to_lowercase'  	# 𝔸𝕒  (selection)                         	「  `」  	「buffer_picker」
    "'"	= 'flip_selections'      	# ⮀ Flip sel cursor and anchor            	「 ⎇;」  	「」
    '\'	= 'shell_pipe'           	# Pipe sel thru shell, replace with output	「⇧ \」  	「」
    #  	Numbers row              	                                          	 
   #"'"	= 'last_picker'          	# ☰☾ ∞Open last fuzzy picker              	「  」 	「」
    '6'	= 'switch_to_uppercase'  	# 𝕒𝔸 (selection)                          	「⇧⎇`」	「」 !!! change to Sentence Case
   #'7'	= 'toggle_spellcheck'    	# ⇝ spell check                           	「   」	「」  !!!missing
    #  	Modes                    	                                          	 
   #'u'	= 'mode_U'               	# ☰u TBD LSPs? or list_kills like z       	「   」	「」  !!!missing_aliases
   #'i'	= 'mode_Register'        	# ☰® Register/copy/paste etc.             	「   」	「」
   #'p'	= 'mode_P'               	# ☰p TBD                                  	「」「paste_clipboard_after」 !!!missing_aliases
   #'w'	= 'mode_window'          	# ☰🗔 Window mode                          	「☰␠ w」	「mode_window」 !!!missing_aliases
   #'f'	= 'mode_file'            	# ☰␜ File mode                            	「   」 	「file_picker」
   #'d'	= 'mode_bracket'         	# ☰⟪ Insert various brackets              	「   」 	「」
   #'m'	= 'mode_symbol'          	# ☰🅂 Symbol mode                          	「   」 	「」
   #','	= 'mode_diag'            	# ☰🛠 Diagnostics mode                     	「   」 	「」

  [keys	.'insert'.'A-space'.'m']           	#ⓘ ☰🅂 Symbol mode in Space mode     	「☰␠ f」		「」
    'm'	= 'symbol_picker'               	# 🅂🗋 Document  symbols 🄻                	「☰␠ s」	「」 ⚛Ⓢ
    ','	= 'workspace_symbol_picker'     	# 🅂🗍 Workspace symbols 🄻                	「☰␠⇧s」	「」  ⚛Ⓢ
  [keys	.'insert'.'A-space'.',']           	#ⓘ ☰🛠 Diagnostics mode in Space mode	「☰␠ f」		「」
    ','	= 'diagnostics_picker'          	# 🛠🗋 Document  diagnostics picker 🄻     	「☰␠ d」	「」
    'm'	= 'workspace_diagnostics_picker'	# 🛠🗍 Workspace diagnostics picker 🄻     	「☰␠⇧d」	「」


  [keys	.'insert'.'A-space'.'f']      	#ⓘ ☰␜ File mode in Space mode          	「☰␠ f」		「」
    'j'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'k'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
   #'l'	= 'open file at cursor'    	# ❚␜ open file at cursor                   	「  」  	「  」
    'f'	= 'buffer_picker'          	# ☰b Open buffer picker                    	「  b」 	「file_picker」
   #'d'	= 'show in desktop'        	# show in desktop                          	「  」  	「  」
    's'	= ['commit_undo_checkpoint'	# 💾 save file                              	「  」  	「  」
      ,	  ':write']                	                                           	      	#
    'S'	= ['commit_undo_checkpoint'	# 💾∀v all views                            	「  」  	「  」
      ,	  ':write-all']            	                                           	      	#
  'A-s'	= ':update'                	# 💾Δ save file if modified                 	「  」  	「  」
    'a'	= 'goto_last_accessed_file'	# 🕮 file last accessed/alternate           	「ⓖ a」 	「  」
   #'g'	= 'bookmark bmenu list'    	# ☰🖈bookmark bmenu list                    	「  」  	「  」
   #'h'	= 'bookmark set'           	# 🖈 bookmark set                           	「  」  	「  」
   #'u'	= 'open last closed'       	# open last closed                         	「  」  	「  」
   #'o'	= 'open file fast'         	# prompt toopen a file from bookmark       	「  」  	「  」
   #'r'	= 'rename_file'            	# ✎ rename current file                    	「  」  	「  」
   #'e'	= 'open in external app'   	# open in external app                     	「  」  	「  」
   #'w'	= 'find_file'              	# 🔎 Find file                              	「  」  	「  」<i class='mss mss-Search-3'></i>
   #'q'	= 'mode_fs_close'          	# ☰× Close buffers/files un/saved          	「  」  	「  」
    'v'	= 'goto_last_modified_file'	# ✎ file last modified/alternate           	「ⓖ m」 	「  」
   #'c'	= 'copy file path'         	# 📋C:\ copy file path                      	「  」  	「  」 <i class='fa fa-clipboard'>C:\
   #'t'	= 'list recently closed'   	# list recently closed                     	「  」  	「  」
   #'y'	= 'open recently closed'   	# open recently closed                     	「  」  	「  」
    'o'	= 'file_picker'            	# 🗁 Open file   picker                     	「☰␠ f」	「  」
    'n'	= ':new'                   	# 🗋 new empty buffer                       	Ⓝ「⎈n」 	「  」
   #'b'	= 'recentf open files'     	# recentf open files                   「  」	「  」
   #'\'	= 'open in terminal'       	# open in terminal                         	「  」	「  」
    '`'	= ':reload'                	# 🗘 Discard, Reload      from source       	「  」	「  」
    '~'	= ':reload-all'            	# 🗘∀ Discard, Reload all from source       	「  」	「  」
    'p'	= ':config-open-workspace' 	# 🛠🗋 Workspace config file                 	「  」	「  」

    ','	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」
    'O'	= 'file_picker_in_current_buffer_directory'	# 🗁 Open file   picker @ bufdir	「   」	「」

  [keys. 	'insert'.'A-space'.'f'.     	'q'] #ⓘ ☰␜☰ᵡ Close mode in File mode in Space mode
    'r'  	= ':buffer-close-all'    	# ᵡ∀b buffer all
    'f'  	= ':buffer-close'        	# ᵡb buffer current
    'v'  	= ':buffer-close-others' 	# ᵡ∁b buffer others
    'e'  	= ':quit-all'            	# ᵡ∀v view  all
    'd'  	= ':quit'                	# ᵡv view   current
    'w'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    's'  	= ':write-quit'          	# 💾ᵡv view current
    'u'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    'j'  	= ':write-quit'          	# 💾ᵡv view current
    'b'  	= ':write-buffer-close'  	# 💾ᵡb buffer save & close. Accepts an optional path
    ';'  	= ':cquit'               	# ⎋ Quit with exit code (default 1)
  [keys. 	'insert'.'A-space'.'f'.     	'q'.'q'] #ⓘ ☰␜☰ᵡ Close All mode in File mode in Space mode
    'r'  	= ':buffer-close-all!'   	# 🕱∀b buffer all (kill unsaved)
    'f'  	= ':buffer-close!'       	# 🕱b buffer current (kill unsaved)
    'v'  	= ':buffer-close-others!'	# 🕱∁b buffer others (kill unsaved)
    'e'  	= ':quit-all!'           	# 🕱∀v view  all
    'd'  	= ':quit!'               	# 🕱v view   current
    'w'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    's'  	= ':write-quit!'         	# 💾🕱v view current
    'u'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    'j'  	= ':write-quit!'         	# 💾🕱v view current
    'b'  	= ':write-buffer-close!' 	# 💾ᵡb buffer save & close (force). Accepts an optional path
    ';'  	= ':cquit!'              	# ⎋ Quit with exit code (default 1)

  [keys. 	'insert'.'A-space'.'f'.     	'x'] #ⓘ ☰␜☰ᵡ Close mode in File mode in Space mode
    'r'  	= ':buffer-close-all'    	# ᵡ∀b buffer all
    'f'  	= ':buffer-close'        	# ᵡb buffer current
    'v'  	= ':buffer-close-others' 	# ᵡ∁b buffer others
    'e'  	= ':quit-all'            	# ᵡ∀v view  all
    'd'  	= ':quit'                	# ᵡv view   current
    'w'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    's'  	= ':write-quit'          	# 💾ᵡv view current
    'u'  	= ':write-quit-all'      	# 💾∀v view all, ᵡ∀v view all
    'j'  	= ':write-quit'          	# 💾ᵡv view current
    'b'  	= ':write-buffer-close'  	# 💾ᵡb buffer save & close. Accepts an optional path
    ';'  	= ':cquit'               	# ⎋ Quit with exit code (default 1)
  [keys. 	'insert'.'A-space'.'f'.     	'x'.'x'] #ⓘ ☰␜☰ᵡ Close All mode in File mode in Space mode
    'r'  	= ':buffer-close-all!'   	# 🕱∀b buffer all (kill unsaved)
    'f'  	= ':buffer-close!'       	# 🕱b buffer current (kill unsaved)
    'v'  	= ':buffer-close-others!'	# 🕱∁b buffer others (kill unsaved)
    'e'  	= ':quit-all!'           	# 🕱∀v view  all
    'd'  	= ':quit!'               	# 🕱v view   current
    'w'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    's'  	= ':write-quit!'         	# 💾🕱v view current
    'u'  	= ':write-quit-all!'     	# 💾∀v view all, 🕱∀v view all
    'j'  	= ':write-quit!'         	# 💾🕱v view current
    'b'  	= ':write-buffer-close!' 	# 💾ᵡb buffer save & close (force). Accepts an optional path
    ';'  	= ':cquit!'              	# ⎋ Quit with exit code (default 1)


  [keys	.'insert'.'A-space'.'i'] #ⓘ ☰®  Register/copy/paste etc.
    'i'	= 'select_register'                  	# ®  Select a register to copy/paste from '<reg> ??? make sticky? for further reg ops or use the main layer
   #'7'	= 'append_to_register 1'             	# ®1⎀ Append current line/selection to reg 1
   #'8'	= 'clear_register 1'                 	# ®1× x
   #'9'	= 'copy_to_register 1'               	# ®1🗐 x
   #'0'	= 'paste_from_register 1'            	# ®1📋 x
   #'1'	= 'append_to_register 2'             	# ®2⎀ Append current line/selection to reg 2
   #'2'	= 'clear_register 2'                 	# ®2× x
   #'3'	= 'copy_to_register 2'               	# ®2🗐 x
   #'4'	= 'paste_from_register 2'            	# ®2📋 x
    't'	= 'replace_selections_with_clipboard'	# 🗘▋📋 Replace sels by clipboard contents    	「☰␠⇧r」 <i class='fa fa-clipboard'></i>▋
    'x'	= 'join_selections'                  	# ᵡ␤ ⨝ Join lines inside sel                	Ⓝ「⇧j」
    'v'	= 'paste_clipboard_before'           	# ⤸📋 Paste after  sels                      	「☰␠⇧p」 ⤸<i class='fa fa-clipboard'></i>
    'c'	= 'yank_joined_to_clipboard'         	# 📋∀▋ Copy all sels to clipboard (joined) ⨝📋	「☰␠ y」 <i class='fa fa-clipboard'></i> ∀❚ ∀▋
    'h'	= ':clear-register'                  	# ᵡ® Clear registers
   #'a'	= ':clipboard-yank'                  	# Copy main   sel to system         clipboard
   #'a'	= ':clipboard-yank-join'             	# Copy joined sel to system         clipboard with sep \n
   #'a'	= ':primary-clipboard-yank'          	# Copy main   sel to system primary clipboard
   #'a'	= ':primary-clipboard-yank-join'     	# Copy joined sel to system primary clipboard with sep \n
   #'a'	= ':clipboard-paste-after'           	# Paste system  clipboard after   sels
   #'a'	= ':clipboard-paste-before'          	# Paste system  clipboard before  sels
   #'a'	= ':clipboard-paste-replace'         	# Paste system  clipboard replace sels
   #'a'	= ':primary-clipboard-paste-after'   	# Paste primary clipboard after   sels
   #'a'	= ':primary-clipboard-paste-before'  	# Paste primary clipboard before  sels
   #'a'	= ':primary-clipboard-paste-replace' 	# Paste primary clipboard replace sels
   #'a'	= ':show-clipboard-provider'         	# Show clipboard provider name in status bar
    'j'	= ':sort'                            	# 𝕒🢖𝕫 Sort ranges in sel 𝟙𝟚𝟛
    'k'	= ':rsort'                           	# 𝕫🢖𝕒 Sort ranges in sel in reverse order 𝟛𝟚𝟙
   #'d'	='list-matching-lines'               	# !!!missing
   #'f'	='delete-matching-lines'             	# !!!missing
   #'g'	='delete-non-matching-lines'         	# !!!missing
   #'t'	='delete-duplicate-lines'            	# !!!missing
   #'n'	='reformat-to-sentence-lines'        	# !!!missing
   #'o'	='copy-rectangle-to-register'        	# !!!missing
   #'r'	='query-replace-regexp'              	# !!!missing
   #'h'	='mark-defun'                        	# !!!missing
   #';'	='escape-quotes'                     	# Add \ before " in current line/selection

  #[keys 	.'insert'.'A-space'.'d'] #ⓘ ☰⟪ Bracket mode in Space mode (place cursor in between)
   #'RET'	= 'insert char'   	#
   #'SPC'	= 'insert unicode'	#
   #'d'  	= '()'            	# () parenthesis
   #'f'  	= '[]'            	# [] square bracket
   #'j'  	= '{}'            	# {} brace
   #'k'  	= '""'            	# "" regular double quote
   #'l'  	= "''"            	# '' regular single quote
   #'r'  	= '‹›'            	# ‹› single angle quote (single chevrons)
   #'t'  	= '«»'            	# «» double angle quote (double chevrons)
   #'n'  	= '【】'            	# 【】 black lenticular bracket
   #'m'  	= '「」'            	# 「」 corner bracket
   #'o'  	= '〔〕'            	# 〔〕 tortoise shell bracket
   #','  	= '〈〉'            	# 〈〉 angle bracket or math ⟨⟩
   #'.'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'<'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
   #'g'  	= '‘’'            	# ‘’ curly single quote
   #'h'  	= '“”'            	# “” double curly quote
   #'y'  	= "`'"            	# `' emacs quote
   #';'  	= '=""'           	# ="" string assignment
   #'z'  	= '⸨⸩'            	# ⸨⸩ Double Parenthesis
   #'c'  	= 'date'          	# 📆📅current date
   #'p'  	= 'u+000C'        	# ␌ formfeed

  [keys.     	'insert'.'A-space'.'w']	#ⓘ ☰🗔@☰␠  Window mode                    	Ⓝ「⎈ w」  	「」
    'v'      	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'F'      	= 'no_op'              	#                                      	  「⇧  」 	「goto_file」
    'C-s'    	= 'no_op'              	#                                      	   「  」 	「hsplit」
    'C-v'    	= 'no_op'              	#                                      	   「  」 	「vsplit」
    'j'      	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「  j」  	「jump_view_down」
    'k'      	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「  k」  	「jump_view_up」
    'l'      	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「  h」   	「jump_view_right」
    ';'      	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「  l」   	「」
    'C-j'    	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「 ⎈j」  	「jump_view_down」
    'C-k'    	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「 ⎈k」  	「jump_view_up」
    'C-l'    	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「 ⎈h」   	「jump_view_right」
    'C-;'    	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「 ⎈l」   	「」 #!!!fails
    'C-down' 	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	「▼」     	「」
    'C-up'   	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	「▲」     	「」
    'C-left' 	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	「◀」     	「」
    'C-right'	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	「▶」     	「」
    'e'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'C-e'    	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'a'      	= 'rotate_view_reverse'	# 🗗⟲ Switch to window previous         	 「  」   	「」
    'w'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「  w」  	「rotate_view」
    'C-w'    	= 'rotate_view'        	# 🗗⟳ Switch to window next             	≝「 ⎈w」  	「rotate_view」
    's'      	= 'rotate_view'        	# 🗗⟳ Switch to window next             	 「  w」  	「hsplit」
    'f'      	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「  v」	「vsplit」
    'C-f'    	= 'vsplit'             	# 🗗→ Split →  (Vertical)               	  ≝「 ⎈v」	「vsplit」
    'm'      	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「  s」	「」
    'C-m'    	= 'hsplit'             	# 🗗↓ Split ↓ (Horizontal)              	   「 ⎈s」	「」
    'h'      	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'C-h'    	= 'goto_file_hsplit'   	# ⮋❚␜ Go to files@selection in splits ↓	   「  f」	「jump_view_left」
    'g'      	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'C-g'    	= 'goto_file_vsplit'   	# ⮊❚␜ Go to files@selection in splits →	   「⇧f」 	「」
    'q'      	= 'wclose'             	# ×🗔  Close         current window     	「  q」   	「wclose」
    'C-q'    	= 'wclose'             	# ×🗔  Close         current window     	「 ⎈q」   	「wclose」
    'o'      	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「  o」  	「wonly」
    'C-o'    	= 'wonly'              	# ×∀🗔 Close all but current window     	≝「 ⎈o」  	「wonly」
    'x'      	= 'wonly'              	# ×∀🗔 Close all but current window     	「  o」   	「」
    'C-x'    	= 'wonly'              	# ×∀🗔 Close all but current window     	「 ⎈o」   	「」
    'down'   	= 'jump_view_down'     	# 🗗▼ Move to Split ↓                   	≝「▼」    	「jump_view_down」
    'up'     	= 'jump_view_up'       	# 🗗▲ Move to Split ↑                   	≝「▲」    	「jump_view_up」
    'left'   	= 'jump_view_left'     	# 🗗◀ Move to Split ←                   	≝「◀」    	「jump_view_left」
    'right'  	= 'jump_view_right'    	# 🗗▶ Move to Split →                   	≝「▶」    	「jump_view_right」


  [keys	.'insert'.'A-space'.'u']       	#ⓘ 🌐 ☰ⓤ 🌳TS, 🄻LSP, 🄳DAP, and various ones
    'q'	= 'no_op'                   	#                                   	「  」  	「」
    'w'	= 'no_op'                   	#                                   	「  」  	「」
    'u'	= 'remove_primary_selection'	# ×          primary sel            	「 ⎇,」 	「」
    'i'	= 'keep_primary_selection'  	# ×∀ all but primary sel (keep only)	「  ,」 	「」
    'o'	= ':character-info'         	# 🔣ℹ Character info                 	「  」  	「」
    #  	 Δ                          	                                    	      	 
    'j'	= 'goto_next_change'        	# Δ🢖 Change            next         	「⧚  g」	「」 !!!→sticky
    'k'	= 'goto_prev_change'        	# 🢔Δ Change            previous     	「⧛  g」	「」 !!!→sticky
    'l'	= 'goto_first_change'       	# ⭰Δ Change             1st         	「⧛⇧ g」	「」 !!!→sticky
    ';'	= 'goto_last_change'        	# Δ⭲ Change            last         	「⧚⇧ g」	「」 !!!→sticky
    'b'	= ':reset-diff-change'      	# ×Δ Reset diff hunk                	「  」  	「」
    #  	 🌳TS                        	                                    	      	 
    'a'	= 'goto_prev_parameter'     	# 🢔α Argument/parameter previous    	「⧛  a」	「」 !!!→sticky
    's'	= 'goto_next_parameter'     	# α🢖 Argument/parameter next        	「⧚  a」	「」 !!!→sticky
    'd'	= 'goto_prev_function'      	# 🢔ƒ Function           previous    	「⧛  f」	「」 !!!→sticky
    'f'	= 'goto_next_function'      	# ƒ🢖 Function           next        	「⧚  f」	「」 !!!→sticky
    'z'	= 'goto_prev_comment'       	# 🢔ↄ Comment            previous    	「⧛  c」	「」 !!!→sticky
    'x'	= 'goto_next_comment'       	# ↄ🢖 Comment            next        	「⧚  c」	「」 !!!→sticky
    'c'	= 'goto_prev_class'         	# 🢔τ Type definition    previous    	「⧛  t」	「」 !!!→sticky
    'v'	= 'goto_next_class'         	# τ🢖 Type definition    next        	「⧛  t」	「」!!!→sticky
    't'	= 'goto_prev_test'          	# 🢔🧪 Test               previous    	「⧛⇧ t」	「」 !!!→sticky
    'y'	= 'goto_next_test'          	# 🧪🢖 Test               next        	「⧚⇧ t」	「」 !!!→sticky
    #  	 🄻LSP                       	                                    	      	 
    "'"	= ':format'                 	# ℱ∀ Format the file                	「  」  	「」
    'p'	= 'format_selections'       	# ℱ  Format sel               	「  =」 	「」
    'm'	= 'goto_next_diag'          	# 🛠🢖 Diagnostic next                	「⧚  d」	「」 !!!→sticky
    ','	= 'goto_prev_diag'          	# 🢔🛠 Diagnostic previous            	「⧛  d」	「」 !!!→sticky
    '.'	= 'goto_first_diag'         	# ⭰🛠 Diagnostic 1st @ doc           	「⧛⇧ d」	「」 !!!→sticky
    '/'	= 'goto_last_diag'          	# 🛠⭲ Diagnostic last @ doc          	「⧚⇧ d」	「」 !!!→sticky
    'g'	= 'code_action'             	# Ⓐ  Apply code action              	「☰␠ a」	「」
    'n'	= 'rename_symbol'           	# ✎  Rename symbol                  	「☰␠ r」	「」
    'r'	= ':lsp-workspace-command'  	# 🄲🗍 Workspace command picker       	「  」  	「」
    '\'	= ':lsp-stop'               	# ⏹🄻 Stop                           	「  」  	「」
    ']'	= ':lsp-restart'            	# 🔄🄻 Restart                        	「  」  	「」

    'h'	= ':toggle lsp.display-inlay-hints'         	# 💡 toggle inlay hints       	「  」  	「」
    'e'	= 'select_references_to_symbol_under_cursor'	# =🅂 Select symbol references	「☰␠ h」	「」
    #  	 🄳DAP                                       	                             	      	 
    '['	= 'dap_restart'                             	# 🔄🄳 Restart (DAP)           	「  」  	「」

  # [keys.'insert'.'A-space'.'p']	#ⓘ ☰ⓟ TBD


  [keys.   	'insert'.'A-[']         	#ⓘ ☰⧛ Unimpaired
    'j'    	= 'goto_prev_change'      	# 🢔Δ Change            	previous       	「  g」 	「」
    # 'G'  	= 'goto_first_change'     	# ⭰Δ Change            	1st            	≝「⇧ g」	「goto_first_change」
    'h'    	= 'goto_first_change'     	# ⭰Δ Change            	1st            	「⇧ g」 	「」
    'd'    	= 'goto_prev_diag'        	# 🢔🛠 Diagnostic        	previous  (LSP)	≝「  d」	「goto_prev_diag」
    # 'D'  	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	≝「⇧ d」	「goto_first_diag」
    'g'    	= 'goto_first_diag'       	# ⭰🛠 Diagnostic        	1st @ doc (LSP)	「⇧ d」 	「goto_prev_change」
    'f'    	= 'goto_prev_function'    	# 🢔ƒ Function          	previous (TS)  	≝「  f」	「goto_prev_function」
    's'    	= 'goto_prev_class'       	# 🢔τ Type definition   	previous (TS)  	「  t」 	「」
    'a'    	= 'goto_prev_parameter'   	# 🢔α Argument/parameter	previous (TS)  	≝「  a」	「goto_prev_parameter」
   #'c'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	≝「  c」	「goto_prev_comment」
    '/'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    'z'    	= 'goto_prev_comment'     	# 🢔ↄ Comment           	previous (TS)  	「  c」 	「」
    # 'T'  	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	≝「⇧ t」	「goto_prev_test」
    't'    	= 'goto_prev_test'        	# 🢔🧪 Test              	previous (TS)  	「⇧ t」 	「goto_prev_class」
    'p'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	≝「  p」	「goto_prev_paragraph」
    '['    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    '.'    	= 'goto_prev_paragraph'   	# 🢔¶ Paragraph         	previous       	「  p」 	「」
    'space'	= 'add_newline_above'     	# ⭡␤ Add newline above 	               	≝「  ␠」	「add_newline_above」
    'm'    	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines above it
      ,    	  'delete_selection'      	# !!!missing n
      ,    	  'move_line_up'          	#
      ,    	  'paste_before']         	#

  [keys.	'insert'.'A-['.'c']             	#ⓘ ☰⧛ℂ Unimpaired Config toggle ON
    'q' 	= ':set auto-save true'           	# 💾🙈 save focus lost
    'w' 	= ':set auto-format true'         	# ℱ💾 auto formatting on save
    'e' 	= ':set line-number absolute'     	# №⭳  Line number display: absolute #⭳
    'r' 	= ':set soft-wrap true'           	# ↪ Soft wrap lines
    't' 	= ':set search.wrap-around true'  	# 🔎↪  search should wrap after depleting the matches
    'a' 	= ':set auto-completion true'     	# ⎁  Auto pop up of auto-completion
    's' 	= ':set search.smart-case true'   	# 𝖗𝕒  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g' 	= ':set indent-guides.render true'	# ┊ Indent guides
    'z' 	= ':set completion-replace true'  	# ⎁ω completions replace word, not pre-cursor part
    'c' 	= ':set true-color true'          	# 🌈 Oerride auto detection of terminal truecolor
    'h' 	= ':set cursorline true'          	# 🟨━ Highlight all lines   with a cursor
    'j' 	= ':set cursorcolumn true'        	# 🟨┃ Highlight all columns with a cursor
    'd' 	= ':set auto-pairs true'          	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i' 	= ':set auto-info true'           	# 🛈  Display infoboxes
    'v' 	= ':set middle-click-paste true'  	# 🖰📋 Middle click paste support
    'm' 	= ':set mouse true'               	# 🖰 Mouse mode
    'u' 	= ':set undercurl true'           	# ‗ Override auto detection of terminal undercurl support
    'p' 	= ':set color-modes true'         	# 🚦 Color mode indicator depending on the mode itself
    'o' 	= ':config-open'                  	# 🧬 Config open   		「  」	「」
    'l' 	= ':config-reload'                	# 🧬🗘 Config reload		「  」	「」

  [keys. 	'insert'.'A-['.'c'.' ']             	#ⓘ ☰⧛ℂ␠ Unimpaired Config toggle ON sub-space mode
    ' '  	= ':set whitespace.render.space all'  	# · show space
    'b'  	= ':set whitespace.render.nbsp all'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab all'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab all'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline all'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline all'	# ⏎ show newline

  [keys.	'insert'.'A-['.'c'.'.']            	#ⓘ ☰⧛ℂ🙈 Unimpaired Config toggle ON hidden mode
    '.' 	= ':set file-picker.hidden true'     	# Ignore hidden files
    ',' 	= ':set file-picker.ignore true'     	# Read .ignore files
    'p' 	= ':set file-picker.parents true'    	# Read  ignore files from parent directories
    'i' 	= ':set file-picker.git-ignore true' 	# gi Read .gitignore files
    'g' 	= ':set file-picker.git-global true' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e' 	= ':set file-picker.git-exclude true'	# ge Read .git/info/exclude files
    'l' 	= ':set follow-links true'           	# Follow symlinks instead of ignoring them
    'k' 	= ':set deduplicate-links true'      	# Ignore symlinks that point at files already shown in the picker

  [keys.	'insert'.'A-['.'c'.'y']                           	#ⓘ ☰⧛ℂ🄻 Unimpaired Config toggle ON LSP mode
    'k' 	= ':set lsp.enable true'                            	# False will completely disable language servers regardless of language settings
    'p' 	= ':set lsp.display-messages true'                  	# LSP progress messages below statusline
    'i' 	= ':set lsp.auto-signature-help true'               	# Enable automatic popup of signature help (parameter hints)
    'h' 	= ':set lsp.display-inlay-hints true'               	# 💡 Inlay hints
    'd' 	= ':set lsp.display-signature-help-docs true'       	# Docs under signature help popup
    's' 	= ':set lsp.snippets true'                          	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.
    'g' 	= ':set lsp.goto-reference-include-declaration true'	# Include declaration in the goto references popup


  [keys.   	'insert'.'A-]']         	#ⓘ ☰⧚
    'j'    	= 'goto_next_change'      	# Δ🢖 Change            	next            	「  g」 	「」
    # 'G'  	= 'goto_last_change'      	# Δ⭲ Change            	last            	≝「⇧ g」	「goto_last_change」
    'h'    	= 'goto_last_change'      	# Δ⭲ Change            	last            	「⇧ g」 	「」
    'd'    	= 'goto_next_diag'        	# 🛠🢖 Diagnostic        	next  (LSP)     	≝「  d」	「goto_next_diag」
    # 'D'  	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	≝「⇧ d」	「goto_last_diag」
    'g'    	= 'goto_last_diag'        	# 🛠⭲ Diagnostic        	last @ doc (LSP)	「⇧ d」 	「goto_next_change」
    'f'    	= 'goto_next_function'    	# ƒ🢖 Function          	next (TS)       	≝「  f」	「goto_next_function」
    's'    	= 'goto_next_class'       	# τ🢖 Type definition   	next (TS)       	「  t」 	「」
    'a'    	= 'goto_next_parameter'   	# α🢖 Argument/parameter	next (TS)       	≝「  a」	「goto_next_parameter」
   #'c'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	≝「  c」	「goto_next_comment」
    '/'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    'z'    	= 'goto_next_comment'     	# ↄ🢖 Comment           	next (TS)       	「  c」 	「」
    # 'T'  	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	≝「⇧ t」	「goto_next_test」
    't'    	= 'goto_next_test'        	# 🧪🢖 Test              	next (TS)       	「⇧ t」 	「goto_next_class」
    'p'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「goto_next_paragraph」
    ']'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    '.'    	= 'goto_next_paragraph'   	# ¶🢖 Paragraph         	next            	≝「  p」	「」
    'space'	= 'add_newline_below'     	# ⭣␤ Add newline below 	                	≝「  ␠」	「add_newline_below」
    'm'    	= ['extend_to_line_bounds'	# Exchange the current line with [n] lines below it
      ,    	  'delete_selection'      	# !!!missing n
      ,    	  'goto_line_end'         	#
      ,    	  'paste_after']          	#

  [keys. 	'insert'.'A-]'.'c']                         	#ⓘ ☰⧚ℂ Unimpaired Config toggle OFF
    'q'  	= ':set auto-save false'                      	# 💾🙈 save focus lost
    'w'  	= ':set auto-format false'                    	# ℱ💾 auto formatting on save
    'e'  	= ':set line-number relative'                 	# №⭳  Line number display: absolute #
    'r'  	= ':set soft-wrap false'                      	# ↪ Soft wrap lines
    't'  	= ':set search.wrap-around false'             	# 🔎↪  search should wrap after depleting the matches
    'a'  	= ':set auto-completion false'                	# ⎁  Auto pop up of auto-completion
    's'  	= ':set search.smart-case false'              	# 𝖗𝔸  Smart case regex searching (case insensitive unless pattern contains upper case characters)
    'g'  	= ':set indent-guides.render false'           	# ┊ Indent guides
    'z'  	= ':set completion-replace false'             	# ⎁ω completions replace word, not pre-cursor part
    'c'  	= ':set false-color false'                    	# 🌈 Oerride auto detection of terminal falsecolor
    'h'  	= ':set cursorline false'                     	# 🟨━ Highlight all lines   with a cursor
    'j'  	= ':set cursorcolumn false'                   	# 🟨┃ Highlight all columns with a cursor
    'd'  	= ':set auto-pairs false'                     	# ⟪⟫  Auto insertion of pairs to parentheses, brackets, etc
    'i'  	= ':set auto-info false'                      	# 🛈  Display infoboxes
    'v'  	= ':set middle-click-paste false'             	# 🖰📋 Middle click paste support
    'm'  	= ':set mouse false'                          	# 🖰 Mouse mode
    'u'  	= ':set undercurl false'                      	# ‗ Override auto detection of terminal undercurl support
    'p'  	= ':set color-modes false'                    	# 🚦 Color mode indicator depending on the mode itself
    'o'  	= ':config-open'                              	# 🧬 Config open   		「  」	「」
    'l'  	= ':config-reload'                            	# 🧬🗘 Config reload		「  」	「」

  [keys. 	'insert'.'A-]'.'c'.' ']              	#ⓘ ☰⧚ℂ␠ Unimpaired Config toggle OFFN sub-space mode
    ' '  	= ':set whitespace.render.space none'  	# · show space
    'b'  	= ':set whitespace.render.nbsp none'   	# ⍽ show nbsp
    'tab'	= ':set whitespace.render.tab none'    	# ⇥ show tab
    't'  	= ':set whitespace.render.tab none'    	# ⇥ show tab
    'n'  	= ':set whitespace.render.newline none'	# ⏎ show newline
    'ret'	= ':set whitespace.render.newline none'	# ⏎ show newline

  [keys.	'insert'.'A-]'.'c'.'.']             	#ⓘ ☰⧚ℂ🙈 Unimpaired Config toggle OFF hidden mode
    '.' 	= ':set file-picker.hidden false'     	# Ignore hidden files
    ',' 	= ':set file-picker.ignore false'     	# Read .ignore files
    'p' 	= ':set file-picker.parents false'    	# Read  ignore files from parent directories
    'i' 	= ':set file-picker.git-ignore false' 	# gi Read .gitignore files
    'g' 	= ':set file-picker.git-global false' 	# ggi Read global .gitignore (path: core.excludefile option of git's config)
    'e' 	= ':set file-picker.git-exclude false'	# ge Read .git/info/exclude files
    'l' 	= ':set follow-links false'           	# Follow symlinks instead of ignoring them
    'k' 	= ':set deduplicate-links false'      	# Ignore symlinks that point at files already shown in the picker

  [keys.	'insert'.'A-]'.'c'.'y']                            	#ⓘ ☰⧚ℂ🄻 Unimpaired Config toggle OFF LSP mode
    'k' 	= ':set lsp.enable false'                            	# False will completely disable language servers regardless of language settings
    'p' 	= ':set lsp.display-messages false'                  	# LSP progress messages below statusline
    'i' 	= ':set lsp.auto-signature-help false'               	# Enable automatic popup of signature help (parameter hints)
    'h' 	= ':set lsp.display-inlay-hints false'               	# 💡 Inlay hints
    'd' 	= ':set lsp.display-signature-help-docs false'       	# Docs under signature help popup
    's' 	= ':set lsp.snippets false'                          	# Snippet completions. Requires  :lsp-restart to take effect after :config-reload/:set.
    'g' 	= ':set lsp.goto-reference-include-declaration false'	# Exclude declaration from the goto references popup




# —————————————————————————————————————————————————————————————————————————————————————————————————
# Help —————————————————————————————————————————————————————————————————————————————————————————————
  # At most one section each of 'keys.normal', 'keys.insert' and 'keys.select'
  # ®registers /LastSearch :LastCommand "LastCopiedText _BlackHole
  # g = { a = 'code_action' } # Maps `ga` to show possible code actions
  # Default commands @ github.com/helix-editor/helix/blob/master/helix-term/src/commands.rs at the invocation of static_commands! macro and the TypableCommandList
  # [keys.normal.g.l]
  # 'd' = 'cmd1'  # gld
  # 'r' = 'cmd2'  # glr
  # [keys.normal.z]
  # '$' = 'cmd1'  # z$

  # Key name          	Representation
  # Control Shift Alt 	'C-' 'S-' 'A-' # prefix-only
  # Escape            	'esc'
  # Backspace         	'backspace'
  # Space             	'space'
  # Return/Enter      	'ret'
  # -                 	'minus'
  # Left Right Up Down	'left' 'right' 'up' 'down'
  # Home End          	'home' 'end'
  # PageUp            	'pageup'
  # PageDown          	'pagedown'
  # Tab               	'tab'
  # Delete            	'del'
  # Insert            	'ins'
  # Null              	'null'
  # Keys can be disabled by binding them to the no_op command

  #Unimpaired help
    # [n                      Go to the previous SCM conflict marker or diff/patch hunk Try d[n inside a conflict
    # ]n                      Go to the next     SCM conflict marker or diff/patch hunk Try d]n inside a conflict
    # ENCODING AND DECODING
    # Each of these operations has a map that takes a motion, a map that targets [count] lines, and a visual mode map.  The linewise variant integrates with repeat.vim.
    # Mnemonic: encoding always comes before decoding; "[" always comes before "]".
    # [x{motion}              XML encode.  *[x* *[xx* *v_[x*
    # [xx                     <foo bar="baz"> => &lt;foo bar=&quot;baz&quot;&gt;
    # {Visual}[x
    # ]x{motion}              XML decode.  HTML entities are handled as well. *]x* *]xx* *v_]x*
    # ]xx
    # {Visual}]x
    # [u{motion}              URL encode. *[u* *[uu* *v_[u*
    # [uu                     foo bar => foo%20bar
    # {Visual}[u
    # ]u{motion}              URL decode. *]u* *]uu* *v_]u*
    # ]uu
    # {Visual}]u
    # [y{motion}              C String encode.  Backslash escape control *[y* *[yy* *v_[y* *[C* *[CC* *v_[C*
    # [yy                     characters, quotation marks, and backslashes.
    # {Visual}[y
    # [C{motion}
    # [CC
    # {Visual}[C
    #                                         *]y* *]yy* *v_]y* *]C* *]CC* *v_]C*
    # ]y{motion}              C String decode.
    # ]yy
    # {Visual}]y
    # ]C{motion}
    # ]CC
    # {Visual}]C

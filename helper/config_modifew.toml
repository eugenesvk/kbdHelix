# 🧬Helix 0.6, ⌨ modiƒew 0.1

# 'key'	= 'command'	# [default key for this command] [default command for this key]
# —————————————————————————————————————————————————————————————————————————————————————————————————



[keys.normal] #Ⓝ
  #Ⓝ Test ——————————————————————————————————————————————————————————————————————
    'C-q'	= ':quit!'            	# Control-q → typable command :q! (:quit!)
    # 'G'	= 'move_prev_word_end'	#⇧[I.⌥b, ⌥◀] [goto_line]	Backward a word
    # '0'	= 'univeral_arg'      	# [  ][0]               	∀* number prefix to treat all the following numbers as # of repeats for the following command !!! blocked by ∀* implementation
  #Ⓝ Free ——————————————————————————————————————————————————————————————————————
    'C-u'	= 'no_op'           	# [] [half_page_up]                         	#
    'C-d'	= 'no_op'           	# [] [half_page_down]                       	#
    'A-C'	= 'no_op'           	#⇧[] [copy_selection_on_prev_line]          	#
    'A-c'	= 'no_op'           	# [] [change_selection_noyank]              	#
    'A-('	= 'no_op'           	#⇧[⇧⌥9] [rotate_selection_contents_backward]	#
    'A-)'	= 'no_op'           	#⇧[⇧⌥0] [rotate_selection_contents_forward] 	#
    'A-K'	= 'no_op'           	#⇧[] [remove_selections]                    	#
    'A-d'	= 'no_op'           	# [ ⌥d] [delete_selection_noyank]           	#
    'C-i'	= 'no_op'           	# [] [jump_forward]                         	#
    'R'  	= 'no_op'           	#⇧[] [replace_with_yanked]                  	#
    'b'  	= 'no_op'           	#⇧[] [replace_with_yanked]                  	#
    'C-f'	= 'no_op'           	# [] [page_down]                            	#
    '`'  	= "no_op"           	# [] [switch_to_lowercase]                  	#
    '~'  	= "no_op"           	#⇧[] [switch_case]                          	#
    'A-`'	= "no_op"           	# [] [switch_to_uppercase]                  	#
    # 'X'	= 'change_selection'	#⇧[  c] [extend_to_line_bounds]             	Δ (delete and enter Insert mode)
    # 'Z'	=  'N/A'            	# [] [view mode sticky]                     	☰👁ₛ
  #Ⓝ Major modes ——————————————————————————————————————————————————————————————————————
    # 'i'	= 'insert_mode' 	# [  i] [insert_mode]       	⁁⤸ Insert before selection
    # 'e'	= 'select_mode' 	# [  v] [move_next_word_end]	Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web) alt <i class='fa fa-arrows'></i>
    # ':'	= 'command_mode'	# [⇧ ;] [command_mode]      	Ⓒ Enter command mode
  #Ⓝ Minor modes / menu dialogs ———————————————————————————————————————————————————————
    # 'p'    	 #Ⓝ [  z] [paste_after]  ☰👁 View mode intended for scrolling and manipulating the view without changing the selection
    # 'P'    	 #Ⓝ⇧[⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    # 'Z'    	 #Ⓝ⇧[⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    # 'g'    	 #Ⓝ [  g] [] ⓖ☰⮊ Goto mode Jumps to various locations
    # 'n'    	 #Ⓝ [  m] [] ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>
    # 'C-w'  	#Ⓝ [ ^w] [] ☰🗔  Window mode
    # 'space'	#Ⓝ [  ␣] [] ☰␣  Space mode
    # '['    	#Ⓝ {  ]} {} ☰⧛ Unimpaired (see github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt)
    # ']'    	#Ⓝ {  [} {} ☰⧚
    # '`'    	#Ⓝ [  ] [switch_to_lowercase] ☰𝔸𝕒 Case conversion mode


  #Ⓝ         	Compat with non-modal editors	 
  'C-o'      	= 'file_picker'              	# [␣ f] [jump_backward]  	🗁 Open file   picker
  'C-s'      	= ':write'                   	# [  ^s] [save_selection]	💾 save file
  # 'C-S-s'  	= 'Save As'                  	#⇧[⇧^s][]                	???
  'C-n'      	= ':new'                     	# [ ^n][]                	🗋 new buffer
  # 'C-S-t'  	= 'open-last-closed'         	#⇧[⇧^t][]                	???
  # 'C-plus' 	= 'zoom-in'                  	# [ ^+][]                	??? 🔎⨭
  # 'C-minus'	= 'zoom-out'                 	# [ ^-][]                	??? 🔎−

  # 'C-Q'    	= 'move_char_left'                   	# Control-Shift-q → typable command :q! (:quit!), without saving
  # C-o      	= ':open ~/.config/helix/config.toml'	# Maps the Control-o to opening of the helix config file
  # a        	= 'move_char_left'                   	# Maps the 'a' key to the move_char_left command
  # w        	= 'move_line_up'                     	# Maps the 'w' key move_line_up
  # 'C-S-esc'	= 'extend_line'                      	# Maps Control-Shift-Escape to extend_line
  # g        	= {a='code_action' }                 	# Maps `ga` to show possible code actions
  # 'ret'    	= ['open_below','normal_mode']       	# Maps the enter key to open_below then re-enter normal mode

  #Ⓝ   	Misc               	 
  'z'  	= 'toggle_comments'	# [ ^c][☰👁] un-/comment the selections
  'C-/'	= 'toggle_comments'	# [ ^c][] un-/comment the selections  #!!! doesn't work :(
  'C-m'	= 'decrement'      	# [ ^x][]         	⊖ o̠ Decrement object (number) under cursor <span class='cd'>o&#800;</span>
  'C-,'	= 'increment'      	# [ ^a][] !!!fails	⊕ o̟ Increment object (number) under cursor <span class='cd'>o&#799;</span>

  #Ⓝ   	Copy                                	 
  'c'  	= 'yank'                            	# [  c] [change_selection]            	🗐▋ Copy main selection <i class='fa fa-copy'></i>
  'C-c'	= 'yank_main_selection_to_clipboard'	# [␣,⇧y] [toggle_comments]            	📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>
  'C'  	= 'yank_main_selection_to_clipboard'	#⇧[␣,⇧y] [copy_selection_on_next_line]	📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>
  'A-c'	= 'yank_joined_to_clipboard'        	# [␣ y] []                            	∀▋ Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i> ∀❚ ∀▋

  #Ⓝ Shell 	                 	 
    # '|'  	= 'shell_pipe'   	#⇧[⇧ \] [shell_pipe]   	|   Pipe each selection through shell command, replacing with output
    "A-\\" 	= 'shell_pipe_to'	# [ ⌥\] []             	|to Pipe each selection into    shell command, ignoring       output
    # 'A-|'	= 'shell_pipe_to'	#⇧[⇧⌥\] [shell_pipe_to]	  Pipe each selection into    shell command, ignoring       output

  #Ⓝ Move ——————————————————————————————————————————————————————————————————————
    #    	Cursor@Home
    'j'  	= 'move_line_down'      	# [h/◀] [move_line_down]        	▼
    'k'  	= 'move_line_up'        	# [j/▼] [move_line_up]          	▲
    'l'  	= 'move_char_left'      	# [k/▲] [move_char_right]       	◀
    ';'  	= 'move_char_right'     	# [l/▶] [collapse_selection]    	▶
    'm'  	= 'half_page_down'      	# [ ^d] [☰🧩]                    	⤈ Move half page down
    ','  	= 'half_page_up'        	# [ ^u] [keep_primary_selection]	⤉ Move half page up
    'C-j'	= 'page_down'           	# [ ^d] []                      	⇟ Move      page down
    'C-k'	= 'page_up'             	# [ ^u] []                      	⇞ Move      page up
    'a'  	= 'extend_to_line_start'	# [ⓈHome] [append_mode]         	⭰▋ Move     line start + select # goto_line_start
    'A'  	= 'extend_to_line_end'  	# [ⓈEnd] [append_to_line]       	⭲▋ Move     line end   + select # goto_line_end

    #Ⓝ          	Compat with non-modal editors
    'C-home'    	= 'goto_file_start'     	# [g] []  	⇱ line number `<n>` else file start
    'C-end'     	= 'goto_last_line'      	# [e] []  	⇲ file end
    'C-S-tab'   	= 'goto_previous_buffer'	#⇧[ⓖp][]  	⎗ !!! not working
    'C-tab'     	= 'goto_next_buffer'    	# [ⓖn][]  	⎘ !!! not working
    'C-pageup'  	= 'goto_previous_buffer'	# [   ] []	⎗
    'C-pagedown'	= 'goto_next_buffer'    	# [   ] []	⎘
    'A-pageup'  	= 'jump_backward'       	# [   ] []	⎗̡
    'A-pagedown'	= 'jump_forward'        	# [   ] []	⎘̡
    # 'C-j'     	= 'jump_backward'       	# [ ^o] []	⎗̡ Jump backward on the jumplist
    # 'C-;'     	= 'jump_forward'        	# [ ^i] []	⎘̡ Jump forward  on the jumplist #!!! doesn't work

    '1'  	= 'goto_previous_buffer'	# [ⓖp] [<1>] 	⎗ !!! blocked by ∀* implementation
    '2'  	= 'goto_next_buffer'    	# [ⓖn] [<2>] 	⎘ !!! blocked by ∀* implementation
    'A-1'	= 'goto_previous_buffer'	# [ⓖp] []    	⎗
    'A-2'	= 'goto_next_buffer'    	# [ⓖn] []    	⎘
    '3'  	= 'jump_backward'       	# [ ^o] [<3>]	⎗̡ Jump backward on the jumplist !!! blocked by ∀* implementation
    '4'  	= 'jump_forward'        	# [ ^i] [<4>]	⎘̡ Jump forward  on the jumplist !!! blocked by ∀* implementation
    'A-3'	= 'jump_backward'       	# [ ^o] []   	⎗̡ Jump backward on the jumplist
    'A-4'	= 'jump_forward'        	# [ ^i] []   	⎘̡ Jump forward  on the jumplist

    #Ⓝ       	word
    'd'      	= 'move_prev_word_start'     	# [  b] [delete_selection]       	🢔w Move   this word start
    'f'      	= 'move_next_word_end'       	# [  e] [find_next_char]         	w🢖 Move   this word end
    'A-d'    	= 'move_prev_word_end'       	# [ⓘ⌥b] [delete_selection_noyank]	⤝w Move   prev word end (this start + space)
    'A-f'    	= 'move_next_word_start'     	# [  w] []                       	w⤞ Move   next word start (this end   + space)
    'D'      	= 'move_prev_long_word_start'	#⇧[⇧ b] []                       	🢔W Move   this WORD start
    'F'      	= 'move_next_long_word_end'  	#⇧[⇧ e] [find_prev_char]         	W🢖 Move   this WORD end
    # 'f'    	= 'move_next_word_start'     	# [  w] [find_next_char]         	w⤞ Move   next word start (this end + space)
    'A-D'    	= 'move_prev_long_word_start'	#⇧[⇧ b] []                       	🢔W Move   this WORD start
    'A-F'    	= 'move_next_long_word_start'	#⇧[⇧ w] [find_prev_char]         	W⤞ Move   next WORD end   (this end + space)
    # 'G'    	= 'goto_line'                	#⇧[⇧ g] [goto_line]              	⮊⎯ go to line # <n> (set <n> in advance), use Ⓒ<n>⏎
    'C-left' 	= 'move_prev_long_word_start'	#⇧[⇧ b] []                       	🢔W Move   this WORD start
    'C-right'	= 'move_next_long_word_start'	#⇧[⇧ w] []                       	W⤞ Move   next WORD end   (this end + space)
    'A-left' 	= 'move_prev_word_end'       	# [ⓘ⌥◀] []                       	⤝w Move   prev word end   (this start + space)
    'A-right'	= 'move_next_word_start'     	# [ⓘ⌥▶] []                       	w⤞ Move   next word start (this end   + space)

    'r'	= 'repeat_last_motion'	# [ ⌥.] [replace]	∞ Repeat last motion (f/t/m)

    # ':'	= 'command_mode'	# [⇧ ;] [command_mode] Ⓒ Enter command mode
    # 'h'	=  ['goto word_end right 5'] #!!! not yet


    # 'Home'	= 'goto_line_start'	# [Home] [goto_line_start]	Move to the start of the line
    # 'End' 	= 'goto_line_end'  	# [End] [goto_line_end]   	Move to the end of the line


    #'>'	= 'no_op'	# [⇧ [] [indent] 	🢔¶ Move paragraph start #!!!not implemented yet
    #'?'	= 'no_op'	# [⇧ ]] [rsearch]	¶🢖 Move paragraph end   #!!!not implemented yet

    #Ⓝ   	Find
    'w'  	= 'find_next_char'  	# [  f] [move_next_word_start]     	🔎   Find       next     char <i class='mss mss-Search-3'></i>
    'W'  	= 'find_prev_char'  	#⇧[⇧ f] [move_next_long_word_start]	🔍   Find       previous char <i class='fa fa-search'></i>
    'A-w'	= 'find_till_char'  	# [  t] []                         	🔎₋₁ Find 'till next     char <i class='mss mss-Search-3'></i>₋
    'A-W'	= 'till_prev_char'  	#⇧[⇧ t] []                         	🔍₋₁ Find 'till previous char <i class='fa fa-search'></i>₋
    'S'  	= 'rsearch'         	# [⇧ /] [split_selection]          	🔍𝖗 for previous regex pattern
    's'  	= 'search'          	#⇧[  /] [select_regex]             	🔎𝖗 for          regex pattern
    '.'  	= 'search_prev'     	# [⇧ n] [repeat_last_change!!!]    	🢔◎ ◎͔ Select previous search match !!! blocked by .Repeat last change
    '/'  	= 'search_next'     	# [  n] [search]                   	◎🢖 ◎͕ Select next     search match
    '>'  	= 'search_prev'     	# [⇧ n] [indent]                   	🢔◎ ◎͔ Select previous search match !!! blocked by .Repeat last change
    '?'  	= 'search_next'     	# [  n] [rsearch]                  	◎🢖 ◎͕ Select next     search match !!! remove after .Repeat last change deblock
    # 'N'	= 'search_prev'     	#⇧[⇧ n] [search_prev]              	🢔◎ ◎͔ Select previous search match
    # 'n'	= 'search_next'     	# [  n] [search_next]              	◎🢖 ◎͕ Select next     search match
    '8'  	= 'search_selection'	# [⇧ 8] [<8>]                      	𝖗🢔▋ Use current selection as the search pattern !!! blocked by ∀* implementation
    # '*'	= 'search_selection'	#⇧[⇧ 8] [search_selection]         	𝖗🢔▋ Use current selection as the search pattern


  #Ⓝ Select ——————————————————————————————————————————————————————————————————————
    'e'	= 'select_mode'	# [  v] [move_next_word_end]	Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web) alt <i class='fa fa-arrows'></i>

    #Ⓝ       	Compat with non-modal editors    	 
    'C-a'    	= ['save_selection','select_all']	# [⇧ 5]  [increment]	🖈∀▋
    'A-down' 	= 'copy_selection_on_next_line'  	# [⇧ c]  []         	🠷 Copy selection onto the next     line (add cursor below)
    'A-up'   	= 'copy_selection_on_prev_line'  	# [⇧⌥c] []          	🠵 Copy selection onto the previous line (add cursor above)
    'S-left' 	= 'extend_char_left'             	# [V.h/◀] []
    'S-down' 	= 'extend_line_down'             	# [V.j/▼] []
    'S-up'   	= 'extend_line_up'               	# [V.k/▲] []
    'S-right'	= 'extend_char_right'            	# [V.l/▶] []


    'A-g'	= 'save_selection'	# [  ^s] []         	🖈 Save the current selection to the jumplist
    'C-g'	= 'save_selection'	# [  ^s] []         	🖈 Save the current selection to the jumplist
    'G'  	= 'save_selection'	# [  ^s] [goto_line]	🖈 Save the current selection to the jumplist

    'J'  	= 'extend_line'          	#⇧[  x] [join_selections]        	⮒ Select current line, if already selected, extend to next line
    'E'  	= 'extend_to_line_bounds'	#⇧[  x] [move_next_long_word_end]	⎯ Extend selection to line bounds (line-wise selection)
    'A-e'	= 'extend_to_line_bounds'	# [⇧ x] []                       	⎯ Extend selection to line bounds (line-wise selection)
    # '' 	= 'expand_selection'     	# [] [expand_selection]       Expand selection to parent syntax node TODO: pick a key (**TS**)
    # '5'	= 'select_paragraph'     	# [  ] [<5>]        	¶▋ Select this paragraph !!! blocked by ∀* implementation !!! command not implemented yet
    # '%'	= 'select_all'           	#⇧[⇧ 5] [select_all]	∀▋ Select entire file

    'A-j'	= 'copy_selection_on_next_line'	# [⇧ c]  []                         	🠷 Copy selection onto the next     line (add cursor below)
    'A-k'	= 'copy_selection_on_prev_line'	# [⇧⌥c] []                          	🠵 Copy selection onto the previous line (add cursor above)
    'A-s'	= 'select_regex'               	# [  s] [split_selection_on_newline]	𝖗▋ Select all regex matches inside selections
    'N'  	= 'split_selection'            	#⇧[⇧ s] [search_prev]               	䷖𝖗 on regex matches
    'A-n'	= 'split_selection_on_newline' 	# [ ⌥s] []                          	䷖␤ (﹨␤)

    "'"    	= 'collapse_selection'        	# [  ;] []                        	🢖🢔 Collapse selection onto a single cursor
    "A-'"  	= 'flip_selections'           	# [ ⌥;][]                         	⮀ Flip selection cursor and anchor
    'A-a'  	= 'flip_selections'           	#⇧[ ⌥;][]                         	⮀ Flip selection cursor and anchor
    'A-A'  	= 'flip_selections'           	#⇧[ ⌥;][]                         	⮀ Flip selection cursor and anchor
    'A-l'  	= 'rotate_selections_backward'	# [⇧ 9] []                        	⟲ Rotate main selection backward (← with many columns)
    'A-;'  	= 'rotate_selections_forward' 	# [⇧ 0] [flip_selections]         	⟳ Rotate main selection forward  (→ with many columns)
    'A-m'  	= 'rotate_selections_forward' 	# [⇧ 0] []                        	⟳ Rotate main selection forward  (↓ with many lines)
    'A-,'  	= 'rotate_selections_backward'	# [⇧ 9] [remove_primary_selection]	⟲ Rotate main selection backward (↑ with many lines)
    'A-u'  	= 'remove_primary_selection'  	# [ ⌥,] [earlier]                 	×         the primary selection
    'A-i'  	= 'keep_primary_selection'    	# [  ,] []                        	×∀ all but the primary selection (keep only)
    'A-U'  	= 'no_op'                     	#⇧[ ⌥,] [earlier]                 	×× undo remove selection (!!!not implemented yet)
    'K'    	= 'keep_selections'           	#⇧[⇧ k] [keep_selections]         	ᵏ𝖗 selections not matching the regex (keep)
    'L'    	= 'remove_selections'         	#⇧[⇧⌥k] []                        	×𝖗 selections     matching the regex
    # 'A-:'	= 'ensure_selections_forward' 	#⇧[⇧⌥;] []                        	???

    # '_'  	= 'trim_selections'	#⇧[⇧ -] [trim_selections]	✁Trim whitespace from the selection
    'minus'	= 'trim_selections'	# [⇧ -] []               	✁Trim whitespace from the selection
    # '+'  	= 'dupe_selections'	#⇧[⇧ =] [dupe_selections]	🗐Duplicate selection (currently nonfunctional/disabled)


  #Ⓝ Change ——————————————————————————————————————————————————————————————————————
    #            	Compat with non-modal editors
    'A-del'      	= ['extend_next_word_end',       	# [] []   	⌦w
                 	   'delete_selection']           	#         	× word →
    'C-del'      	= ['extend_next_long_word_end',  	# [] []   	⌦W
                 	   'delete_selection']           	#         	 × Word →
    'A-backspace'	= ['extend_prev_word_start',     	# [] []   	⌫w
                 	   'delete_selection']           	#         	 × word ←
    'C-backspace'	= ['extend_prev_long_word_start',	# [] []   	⌫W
                 	   'delete_selection']           	#         	 × Word ←
    # 'del'      	= 'delete_selection'             	# [  d] []	×▋
    'S-del'      	= 'delete_selection_noyank'      	# [ ⌥d] []	🕱▋
    'S-ret'      	= 'open_below'                   	# [  o] []	⭣␤ Open new line below selection
    'ret'        	= 'open_above'                   	#⇧[⇧ o] []	⭡␤ Open new line above selection

    # '.'      	= 'N/A'                              	# [.] [n/a]                    	∞ Repeat last change
    '6'        	= 'delete_char_forward'              	# [ ⌦] [<5>]                   	⌦ !!! blocked by ∀* implementation
    'x'        	= 'delete_selection'                 	# [  d] [extend_line]          	×▋
    'A-x'      	= 'delete_selection_noyank'          	# [ ⌥d] []                     	🕱▋ (...without copying)
    'A-c'      	= 'change_selection'                 	# [c] [change_selection_noyank]	Δ
    'h'        	= 'delete_char_backward'             	# [⌫] [move_char_left]         	⌫c × char ←
    'H'        	= 'delete_char_forward'              	#⇧[⌦] []                       	⌦c × char →
    'A-h'      	= ['move_prev_word_start',           	# [] []                        	⌫w
               	   'delete_selection']               	#                              	× word ←
    'A-H'      	= ['move_next_word_end',             	# [] []                        	⌦w
               	   'delete_selection']               	#                              	× word →
    'C-h'      	= ['move_prev_long_word_start',      	# [] []                        	⌫W
               	   'delete_selection']               	#                              	 × Word ←
    'C-x'      	= ['yank_main_selection_to_clipboard'	                               	,
               	   'delete_selection']               	# []   [decrement]             		×📋 cut to clipboard <i class='fa fa-clipboard'></i>
    'backspace'	= 'delete_char_backward'             	# [I.bs] []                    	⌫
    'X'        	= 'join_selections'                  	#⇧[⇧ j] [extend_to_line_bounds]	×␤ ⨝ Join lines inside selection

    # 'backspace'	= 'delete_char_backward'	# [backspace] [delete_char_backward]	⌫c × char ←
    # 'C-h'      	= 'delete_char_backward'	# [C-h] [delete_char_backward]      	⌫c × char ←
    'del'        	= 'delete_char_forward' 	# [delete] [delete_char_forward]    	⌦c × char →
    # 'C-d'      	= 'delete_char_forward' 	# [C-d] [delete_char_forward]       	⌦c × char →

    't'  	= 'replace'                          	# [  r] [find_till_char]	🗘c  Replace with a character
    'T'  	= 'replace_with_yanked'              	#⇧[⇧ r] [till_prev_char]	🗘📋 Replace with copied text <i class='fa fa-copy'></i>
    'A-t'	= 'replace_selections_with_clipboard'	# [␣ ⇧r] []             	🗘📋 Replace selections by clipboard contents <i class='fa fa-clipboard'></i>

    #'`' 	= ''                   	# [  ] [switch_to_lowercase] ☰𝔸𝕒 Case conversion mode !!! aliases not implemented yet
    '^'  	= 'switch_to_uppercase'	# [ ⌥`] []	𝕒𝔸 (selection)
    'B'  	= 'switch_to_lowercase'	#⇧[  `] []	𝔸𝕒 (selection)
    'C-b'	= 'switch_to_uppercase'	# [ ⌥`] []	𝕒𝔸 (selection)

    'A-.'	= 'unindent'	# [⇧,][repeat_last_motion]	⇚ (selection)
    'A-/'	= 'indent'  	# [⇧.][]                  	⇛ (selection)

    # 'q'	= 'record_macro'   	# [  q] [record_macro]        	⏺ Start/stop macro recording to the selected register
    # 'Q'	= 'replay_macro'   	#⇧[⇧ q] replay_macro]         	▶  Play back a recorded macro from the selected register
    # '"'	= 'select_register'	# [  '<reg>] [select_register]	®  Select a register to copy/paste from

    # 'b'	= 'N/Arepeat_last_change' 	#⇧[  .] [move_prev_word_start] 	∞ Repeat last change !!! no command yet
    # '.'	=  'N/Arepeat_last_change'	# [  .] [n/arepeat_last_change]	∞ Repeat last change
    # 'i'	= 'insert_mode'           	# [  i] [insert_mode]          	⁁⤸ Insert before selection
    'o'  	= 'append_mode'           	# [  a] [open_above]           	⤹⎀ Insert after selection (append)
    'I'  	= 'open_above'            	#⇧[⇧ o] [prepend_to_line]      	⭡␤ Open new line above selection
    'O'  	= 'open_below'            	# [  o] [append_to_line]       	⭣␤ Open new line below selection
    'u'  	= 'undo'                  	# [  u] [undo mode]            	⎌ Undo change
    'y'  	= 'redo'                  	# [⇧ u] [yank]                 	↷ Redo change
    'U'  	= 'earlier'               	#⇧[ ⌥u] [redo]                 	🕘 Move backward in history   <i class='fa fa-history'></i>
    'Y'  	= 'later'                 	#⇧[⇧⌥u] []                     	🕒 Move forward in history ⏱ <i class='fa fa-clock-o'></i>
    'C-y'	= 'redo'                  	# [⇧ u] []                     	↷ Redo change
    'v'  	= 'paste_after'           	# [  p] [select_mode]          	📋⤹ Paste after selection ⤹<i class='fa fa-copy'></i>
    'C-v'	= 'paste_clipboard_after' 	# [␣ p] []                     	📋⤹ Paste after selection  <i class='fa fa-copy'></i>⤹
    'V'  	= 'paste_before'          	# [⇧ p] []                     	⤸📋 Paste before selection <i class='fa fa-clipboard'></i>⤹
    'C-z'	= 'undo'                  	# [  u] []                     	⎌ Undo change
    'C-Z'	= 'redo'                  	#⇧[⇧ u] []                     	↷ Redo change !!!not working
    # 'I'	= 'prepend_to_line'       	#⇧[⇧ i] [prepend_to_line]      	⁁⭰ Insert at the start of the line
    # 'A'	= 'append_to_line'        	#⇧[⇧ a] [append_to_line]       	⭲⎀ Insert at the end of the line

  #Ⓝ Select manipulation ————————————————————————————————————————————————————————————————————
    '('  	= 'rotate_selection_contents_backward'	#⇧[⇧⌥9] [rotate_selections_backward]	⟲ Rotate selection contents backward
    ')'  	= 'rotate_selection_contents_forward' 	#⇧[⇧⌥0] [rotate_selections_forward] 	⟳ Rotate selection contents forward
    '7'  	= 'align_selections'                  	# [⇧ 7] [<7>]                       	⥂ Align selection in columns !!! blocked by ∀* implementation
    # '&'	= 'align_selections'                  	#⇧[⇧ 7] [align_selections]          	⥂ Align selection in columns
    # '='	= 'format_selections'                 	# [  =] [format_selections]         	ℱ Format selection (currently nonfunctional/disabled) (LSP)


  # '$'	= 'shell_keep_pipe'	# [Ⓝ⇧ 4] [shell_keep_pipe] $ᵏ| Pipe each selection into shell command, keep selections where command returned 0

  #Ⓝ space mode
  # "'"	= 'last_picker'	# [collapse_selection] Open last fuzzy picker

  #Ⓝ Shell	#                      	#
  # '!'   	= 'shell_insert_output'	#⇧[⇧  1] [shell_insert_output] 🢔$ Run shell command, inserting output before each selection
  '@'     	= 'shell_append_output'	#⇧[⇧⌥1] []                    $🢖 Run shell command, appending output after  each selection
  # 'A-!' 	= 'shell_append_output'	# [⇧⌥1] [shell_append_output] $🢖 Run shell command, appending output after  each selection

  ###Ⓝ ☰Minor modes  Accessible from Normal mode, typically switch back to Normal mode after a command

  [keys.normal.'`'] #Ⓝ [  ] [] ☰𝔸𝕒 Case conversion mode
    '`'  	= 'switch_case'        	# [⇧ `] []	𝕒⇋𝔸 (selection)
    'j'  	= 'switch_to_lowercase'	# [  `] []	𝔸𝕒 (selection)
    'k'  	= 'switch_to_uppercase'	# [ ⌥`] []	𝕒𝔸 (selection)
    # 'l'	= 'switch_to_sentence' 	# [ ] []  	𝔸𝕒 𝔹𝕓 (selection) !!! not implemented
    # ';'	= 'switch_to_camel'    	# [ ] []  	ℂ𝕒𝕄𝕖𝕝 (selection) !!! not implemented

  [keys.normal.'p'] #Ⓝ 'view' [  z] [paste_after] ☰👁 View mode intended for scrolling and manipulating the view without changing the selection
    'z'       	= 'no_op'            	# [] [align_view_center]	#
    'c'       	= 'no_op'            	# [] [align_view_center]	#
    't'       	= 'no_op'            	# [] [align_view_top]   	#
    'b'       	= 'no_op'            	# [] [align_view_bottom]	#
    'b'       	= 'no_op'            	# [] [page_up]          	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    # 'p'     	= 'view_mode_sticky' 	# [] []                  	☰👁ₛ 'sticky', persistent
  [keys.normal.'P'] #Ⓝ 'view sticky' ⇧[⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    'z'       	= 'no_op'            	# [] [align_view_center]	#
    'c'       	= 'no_op'            	# [] [align_view_center]	#
    't'       	= 'no_op'            	# [] [align_view_top]   	#
    'b'       	= 'no_op'            	# [] [align_view_bottom]	#
    'b'       	= 'no_op'            	# [] [page_up]          	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
  [keys.normal.'Z'] #Ⓝ 'view sticky' ⇧[⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    'z'       	= 'no_op'            	# [] [align_view_center]	#
    'c'       	= 'no_op'            	# [] [align_view_center]	#
    't'       	= 'no_op'            	# [] [align_view_top]   	#
    'b'       	= 'no_op'            	# [] [align_view_bottom]	#
    'b'       	= 'no_op'            	# [] [page_up]          	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑

  [keys.normal.'g'] #Ⓝ [  g] [] ⓖ☰⮊ Goto mode Jumps to various locations
    'b'  	= 'no_op'                   	# [] [goto_window_bottom]       	#
    'h'  	= 'no_op'                   	# [] [goto_line_start]          	#
    'p'  	= 'no_op'                   	# [] [goto_previous_buffer]     	#
    'j'  	= 'goto_last_line'          	# [e] []                        	⇲ file end
    'k'  	= 'goto_file_start'         	# [g] [goto_line_end]           	⇱ line number `<n>` else file start
    # 'g'	= 'goto_file_start'         	# [g] [goto_file_start]         	⇱ line number `<n>` else file start
    # 's'	= 'goto_first_nonwhitespace'	# [s] [goto_first_nonwhitespace]	line start 1ₛₜ non-whitespace char
    'a'  	= 'goto_first_nonwhitespace'	# [s] [goto_last_accessed_file] 	line start 1ₛₜ non-whitespace char
    'l'  	= 'goto_line_start'         	# [h] []                        	line start ⭰ !!! change to 🢔¶ when implemented
    ';'  	= 'goto_line_end'           	# [l] []                        	line end   ⭲ !!! change to ¶🢖 when implemented
    # 'f'	= 'goto_file'               	# [f] [goto_file]               	files in the selection
    'm'  	= 'goto_window_bottom'      	# [b] [goto_last_modified_file] 	🗔⭳ screen bottom
    ','  	= 'goto_window_top'         	# [t] []                        	🗔⭱ screen top
    'n'  	= 'goto_window_center'      	# [c] [goto_next_buffer]        	🗔· screen middle
    # 'd'	= 'goto_definition'         	# [d] [goto_definition]         	≝      definition (LSP)
    'F12'	= 'goto_definition'         	# [d] []                        	≝      definition (LSP)
    'e'  	= 'goto_type_definition'    	# [y] [goto_last_line]          	≝ type definition (LSP)
    # 'y'	= 'goto_type_definition'    	# [y] [goto_type_definition]    	≝ type definition (LSP)
    # 'r'	= 'goto_reference'          	# [r] [goto_reference]          	🅁※ references (LSP)
    # 'i'	= 'goto_implementation'     	# [i] [goto_implementation]     	🄸 implementation (LSP)
    't'  	= 'goto_implementation'     	# [i] [goto_window_top]         	🄸 implementation (LSP)
    'c'  	= 'goto_last_accessed_file' 	# [a] [goto_window_center]      	🕮␜ file last accessed/alternate
    'v'  	= 'goto_last_modified_file' 	# [m] []                        	✎␜ file last modified/alternate
    '1'  	= 'goto_previous_buffer'    	# [p] []                        	buffer previous !!! blocked by ∀* universal argument
    '2'  	= 'goto_next_buffer'        	# [n] []                        	buffer next     !!! blocked by ∀* universal argument
    '3'  	= 'jump_backward'           	# [] []                         	⎗̡ Jump backward on the jumplist !!! blocked by ∀* implementation
    '4'  	= 'jump_forward'            	# [] []                         	⎘̡ Jump forward  on the jumplist !!! blocked by ∀* implementation
    'u'  	= 'goto_last_modification'  	# [.] []                        	🕘 last modification in current file <i class='fa fa-history'></i>
    # '.'	= 'goto_last_modification'  	# [.] [goto_last_modification]  	🕘 last modification in current file <i class='fa fa-history'></i>
    # "'"	= 'goto-char#'              	# [] []                         	c# !!! not available

  [keys.normal.'n'] #Ⓝ [  m] [] ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>
    'n'	= 'match_brackets'          	# [  m] []	🢔()🢖 Goto matching   bracket (TS)
    '.'	= 'match_brackets'          	# [  ] [] 	🢔(   Goto next left  bracket (TS) !!!not implemented
    '/'	= 'match_brackets'          	# [  ] [] 	  )🢖 Goto next right bracket (TS) !!!not implemented
    'i'	= 'surround_add'            	# [  s] []	(+)  Surround current selection with <char>
    't'	= 'surround_replace'        	# [  r] []	(🗘) Replace surround character <from> with <to>
    'x'	= 'surround_delete'         	# [  d] []	(×)  Delete  surround character <char>
    'e'	= 'select_textobject_around'	# [  a] []	🢔O🢖  Select around textobject
    'a'	= 'select_textobject_inner' 	# [  i] []	🢖O🢔  Select inside textobject

  [keys.normal.'C-w'] #Ⓝ [ ^w] [] ☰🗔  Window mode
    's'      	= 'no_op'           	# [  ][hsplit]         	#
    'C-s'    	= 'no_op'           	# [  ][hsplit]         	#
    'v'      	= 'no_op'           	# [  ][vsplit]         	#
    'C-v'    	= 'no_op'           	# [  ][vsplit]         	#
    'F'      	= 'no_op'           	#⇧[  ][goto_file]      	#
    'j'      	= 'jump_view_down'  	#≝[ j][jump_view_down] 	🗗▼ Move to Split ↓
    'k'      	= 'jump_view_up'    	#≝[ k][jump_view_up]   	🗗▲ Move to Split ↑
    'l'      	= 'jump_view_left'  	# [ h][jump_view_right]	🗗◀ Move to Split ←
    ';'      	= 'jump_view_right' 	# [ l][]               	🗗▶ Move to Split →
    'C-j'    	= 'jump_view_down'  	#≝[^j][jump_view_down] 	🗗▼ Move to Split ↓
    'C-k'    	= 'jump_view_up'    	#≝[^k][jump_view_up]   	🗗▲ Move to Split ↑
    'C-l'    	= 'jump_view_left'  	# [^h][jump_view_right]	🗗◀ Move to Split ←
    'C-;'    	= 'jump_view_right' 	# [^l][]               	🗗▶ Move to Split → #!!!fails
    'C-down' 	= 'jump_view_down'  	# [▼][]                	🗗▼ Move to Split ↓
    'C-up'   	= 'jump_view_up'    	# [▲][]                	🗗▲ Move to Split ↑
    'C-left' 	= 'jump_view_left'  	# [◀][]                	🗗◀ Move to Split ←
    'C-right'	= 'jump_view_right' 	# [▶][]                	🗗▶ Move to Split →
    'w'      	= 'rotate_view'     	#≝[ w][rotate_view]    	🗗⟳ Switch to next window
    'C-w'    	= 'rotate_view'     	#≝[^w][rotate_view]    	🗗⟳ Switch to next window
    'f'      	= 'vsplit'          	#≝[ v][vsplit]         	 🗗→ Split right  (Vertical)
    'C-f'    	= 'vsplit'          	#≝[^v][vsplit]         	 🗗→ Split right  (Vertical)
    'm'      	= 'hsplit'          	# [ s][]               	 🗗↓ Split bottom (Horizontal)
    'C-m'    	= 'hsplit'          	# [^s][]               	 🗗↓ Split bottom (Horizontal)
    'h'      	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'C-h'    	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'g'      	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'C-g'    	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'q'      	= 'wclose'          	#≝[ q][wclose]         	 ×🗔 Close          current window
    'C-q'    	= 'wclose'          	#≝[^q][wclose]         	 ×🗔 Close          current window
    'o'      	= 'wonly'           	#≝[ o][wonly]          	 ×∀🗔 Close all but current window
    'C-o'    	= 'wonly'           	#≝[^o][wonly]          	 ×∀🗔 Close all but current window
    'x'      	= 'wonly'           	# [ o][]               	 ×∀🗔 Close all but current window
    'C-x'    	= 'wonly'           	# [^o][]               	 ×∀🗔 Close all but current window
    'down'   	= 'jump_view_down'  	#≝[▼][jump_view_down]  	 Move to split below
    'up'     	= 'jump_view_up'    	#≝[▲][jump_view_up]    	 Move to split above
    'left'   	= 'jump_view_left'  	#≝[◀][jump_view_left]  	 Move to left split
    'right'  	= 'jump_view_right' 	#≝[▶][jump_view_right] 	 Move to right split

  [keys.normal.'space'] #Ⓝ [  ␣] [] ☰␣  Space mode
    # 'space'	= 'insert_mode'                       	# [  i] [] !!!panick!                   	⁁⤸ Insert before selection !!!not implemented
    'ret'    	= 'command_mode'                      	# [  ⎋] []                              	Ⓒ Enter command mode
    'P'      	= 'no_op'                             	#⇧[] [paste_clipboard_before]           	#
    'Y'      	= 'no_op'                             	# [] [yank_main_selection_to_clipboard] 	#
    'R'      	= 'no_op'                             	#⇧[] [replace_selections_with_clipboard]	#
    'S'      	= 'no_op'                             	#⇧[] [workspace_symbol_picker]          	#
    # Home   	row                                   	 
    'j'      	= 'extend_line'                       	# [ x] []                        	⮒ Select current line, if already selected, extend to next line
    'k'      	= 'keep_selections'                   	# [⇧ k] []                       	ᵏ𝖗 selections not matching the regex (keep)
    'l'      	= 'remove_selections'                 	# [⇧⌥k] []                       	×𝖗 selections     matching the regex
    ';'      	= 'command_mode'                      	# [⇧ ;] []                       	Ⓒ Enter command mode
    # 'f'    	= 'mode_file'                         	# [] [file_picker]               	☰␜ File mode !!! aliases not implemented yet
    # 'd'    	= 'mode_bracket'                      	# [] []                          	☰⟪ Insert various brackets !!! aliases not implemented yet
    's'      	= 'select_regex'                      	# [  s] [symbol_picker]          	𝖗▋ Select all regex matches inside selections
    'a'      	= ['save_selection',                  	# [⇧ 5] []                       	🖈∀▋
             	   'select_all']                      	#                                	Save current position and select everything
    'h'      	= ['kill_to_line_start',              	# [] []                          	×⎯ Delete this line
             	   'kill_to_line_end']                	#                                	Delete this line
    'g'      	= 'save_selection'                    	# [  ^s] []                      	🖈 Save the current selection to the jumplist
    # Upper  	row                                   	                                 	 
    # 'u'    	= 'mode_U'                            	# [] []                          	☰u TBD LSPs? or list_kills like z !!! aliases not implemented yet
    # 'i'    	= 'mode_Register'                     	# [] []                          	☰® Register/copy/paste etc.
    'o'      	= 'hover'                             	# [k] []                         	? Show documentation for item under cursor in a popup (LSP)
    # 'p'    	= 'mode_P'                            	# [][paste_clipboard_after]      	☰p TBD !!! aliases not implemented yet
    'r'      	= 'rename_symbol'                     	#≝[][rename_symbol]              	  ✎ Rename symbol (LSP)
    'e'      	= 'extend_to_line_bounds'             	# [ x] []                        	⎯ Extend selection to line bounds (line-wise selection)
    #'w'     	= 'mode_window'                       	# [␣ w][mode_window]             	☰🗔 Window mode !!! aliases not implemented yet
    # 'q'    	= '???'                               	# [ q] []                        	#
    'y'      	= 'code_action'                       	# [␣ a][yank_joined_to_clipboard]	Ⓐ Apply code action (LSP)
    't'      	= 'replace_with_yanked'               	# [⇧ r] []                       	🗘📋 Replace with copied text <i class='fa fa-copy'></i>
    # Lower  	row                                   	                                 	 
    'm'      	= 'symbol_picker'                     	# [␣ s] []                       	🅂🗋 Open document  symbol picker (LSP) ⚛Ⓢ
    ','      	= 'workspace_symbol_picker'           	# [␣⇧s] []                       	🅂🗍 Open workspace symbol picker (LSP) ⚛Ⓢ
    # '.'    	= 'no_op'                             	# [] []                          	#TBD
    '/'      	= 'global_search'                     	#≝[␣ /][global_search]           	🔎🗁 Global search in workspace folder
    'v'      	= 'paste_clipboard_after'             	# [␣ p] []                       	📋⤹ Paste after selections
    'c'      	= 'yank_main_selection_to_clipboard'  	# [␣ ⇧y]                         	📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>▋
    'x'      	= ['yank_main_selection_to_clipboard',	# [] []                          	×📋 ▋<i class='fa fa-clipboard'></i>
             	   'delete_selection']                	#                                	cut to clipboard
    # 'z'    	= 'list_kills'                        	# [] []                          	🕱☰ create a new buffer and paste a buffer there !!! not available yet
    'n'      	= 'split_selection'                   	# [⇧ s] []                       	䷖𝖗 on regex matches
    'b'      	= 'switch_to_lowercase'               	# [  `] [buffer_picker]          	𝔸𝕒  (selection)
    "'"      	= 'flip_selections'                   	# [ ⌥;] []                       	⮀ Flip selection cursor and anchor
    '\'      	= 'shell_pipe'                        	# [⇧ \] []                       	Pipe each selection through shell command, replacing with output
    # Numbers	row                                   	                                 	 
    # "'"    	= 'last_picker'                       	# [  ] []                        	☰☾ ∞Open last fuzzy picker
    '6'      	= 'switch_to_uppercase'               	# [⇧⌥`] []                       	𝕒𝔸 (selection) !!! change to Sentence Case
    # '7'    	= 'toggle_spellcheck'                 	# [] []                          	⇝ spell check !!! not implemented

  [keys.normal.'space'.'f'] #Ⓝ [ ␣f] [] ☰␜ File mode in Space mode
    'j'  	= ':write'                 	#        	💾 save file
    'k'  	= 'file_picker'            	# [␣ f]  	🗁 Open file   picker
    # 'l'	= 'open file at cursor'    	#        	❚␜ open file at cursor
    'f'  	= 'buffer_picker'          	# [ b] []	☰b Open buffer picker
    # 'd'	= 'show in desktop'        	#        	show in desktop
    's'  	= ':write'                 	#        	💾 save file
    'S'  	= ':write-all'             	#⇧       	💾∀v all views
    'a'  	= 'goto_last_accessed_file'	# [ⓖ a]  	🕮 file last accessed/alternate
    # 'g'	= 'bookmark bmenu list'    	#        	☰🖈bookmark bmenu list
    # 'h'	= 'bookmark set'           	#        	🖈 bookmark set
    # 'u'	= 'open last closed'       	#        	open last closed
    # 'o'	= 'open file fast'         	#        	open file fast Prompt to open a file from bookmark
    # 'r'	= 'rename_file'            	#        	✎ rename current file
    # 'e'	= 'open in external app'   	#        	open in external app
    # 'w'	= 'find_file'              	# []     	🔎 Find file  <i class='mss mss-Search-3'></i>
    # 'q'	= 'mode_fs_close'          	# []     	☰× Close buffers/files saved/unsaved
    'v'  	= 'goto_last_modified_file'	# [ⓖ m]  	✎ file last modified/alternate
    # 'c'	= 'copy file path'         	#        	📋C:\ copy file path <i class='fa fa-clipboard'>C:\
    # 't'	= 'list recently closed'   	#        	list recently closed
    # 'y'	= 'open recently closed'   	#        	open recently closed
    'o'  	= 'file_picker'            	# [␣ f]  	🗁 Open file   picker
    'n'  	= ':new'                   	# [Ⓝ^n]  	🗋 new empty buffer
    # 'b'	= 'recentf open files'     	#        	recentf open files
    # '\'	= 'open in terminal'       	#        	open in terminal
    '`'  	= ':reload'                	# []     	🗘 Discard changes and reload from the source file
  [keys.normal.'space'.'f'.'q'] #Ⓝ ☰␜☰× Close mode in File mode in Space mode
    'q'	= ':buffer-close'   	# ×b current buffer
    'f'	= ':buffer-close'   	# ×b current buffer
    'r'	= ':buffer-close!'  	# 🕱b current buffer (kill unsaved changes)
    'd'	= ':quit'           	# ×v current view
    'e'	= ':quit!'          	# 🕱v current view
    'a'	= ':quit-all'       	# ×∀v all views
    'q'	= ':quit-all!'      	# 🕱∀v all views
    's'	= ':write-quit'     	# 💾                ×v current view
    'w'	= ':write-quit!'    	# 💾                🕱v current view
    'j'	= ':write-quit'     	# 💾                ×v current view
    'u'	= ':write-quit!'    	# 💾                🕱v current view
    'k'	= ':write-quit-all' 	# 💾∀v all views, ×∀v all views
    'i'	= ':write-quit-all!'	# 💾∀v all views, 🕱∀v all views
    ';'	= ':cquit'          	# Quit with exit code (default 1)
  [keys.normal.'space'.'f'.'x'] #Ⓝ ☰␜☰× Close mode in File mode in Space mode
    'x'	= ':buffer-close'   	# ×b current buffer
    'f'	= ':buffer-close'   	# ×b current buffer
    'r'	= ':buffer-close!'  	# 🕱b current buffer (kill unsaved changes)
    'd'	= ':quit'           	# ×v current view
    'e'	= ':quit!'          	# 🕱v current view
    'a'	= ':quit-all'       	# ×∀v all views
    'q'	= ':quit-all!'      	# 🕱∀v all views
    's'	= ':write-quit'     	# 💾                ×v current view
    'w'	= ':write-quit!'    	# 💾                🕱v current view
    'j'	= ':write-quit'     	# 💾                ×v current view
    'u'	= ':write-quit!'    	# 💾                🕱v current view
    'k'	= ':write-quit-all' 	# 💾∀v all views, ×∀v all views
    'i'	= ':write-quit-all!'	# 💾∀v all views, 🕱∀v all views
    ';'	= ':cquit'          	# Quit with exit code (default 1)

  [keys.normal.'space'.'i'] #Ⓝ [ ␣i] [] ☰®  Register/copy/paste etc.
    'i'  	= 'select_register'                  	# [ '<reg>]	®  Select a register to copy/paste from ??? make it sticky for further reg ops or use the main layer
    # '1'	= 'append_to_register 1'             	#          	®1⎀ Append current line/selection to reg 1, or current line when none
    # '2'	= 'clear_register 1'                 	#          	®1× x
    # '3'	= 'copy_to_register 1'               	#          	®1🗐 x
    # '4'	= 'paste_from_register 1'            	#          	®1📋 x
    # '7'	= 'append_to_register 1'             	#          	®1⎀ x
    # '8'	= 'clear_register 1'                 	#          	®1× x
    't'  	= 'replace_selections_with_clipboard'	# [␣⇧r]    	🗘▋📋 Replace selections by clipboard contents <i class='fa fa-clipboard'></i>▋
    'x'  	= 'join_selections'                  	# [Ⓝ⇧j]    	×␤ ⨝ Join lines inside selection
    'v'  	= 'paste_clipboard_before'           	# [␣⇧p]    	⤸📋 Paste after  selections ⤸<i class='fa fa-clipboard'></i>
    'c'  	= 'yank_joined_to_clipboard'         	# [␣ y]    	📋∀▋ Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i> ∀❚ ∀▋
    # 'a'	= ':clipboard-yank'                  	# Copy main   selection  to system         clipboard
    # 'a'	= ':clipboard-yank-join'             	# Copy joined selections to system         clipboard. A separator can be provided as first argument. Default value is newline
    # 'a'	= ':primary-clipboard-yank'          	# Copy main   selection  to system primary clipboard
    # 'a'	= ':primary-clipboard-yank-join'     	# Copy joined selections to system primary clipboard. A separator can be provided as first argument. Default value is newline
    # 'a'	= ':clipboard-paste-after'           	# Paste system  clipboard after   selections
    # 'a'	= ':clipboard-paste-before'          	# Paste system  clipboard before  selections
    # 'a'	= ':clipboard-paste-replace'         	# Paste system  clipboard replace selections
    # 'a'	= ':primary-clipboard-paste-after'   	# Paste primary clipboard after   selections
    # 'a'	= ':primary-clipboard-paste-before'  	# Paste primary clipboard before  selections
    # 'a'	= ':primary-clipboard-paste-replace' 	# Paste primary clipboard replace selections
    # 'a'	= ':show-clipboard-provider'         	# Show clipboard provider name in status bar
    'j'  	= ':sort'                            	# 𝕒🢖𝕫 Sort ranges in selection 𝟙𝟚𝟛
    'k'  	= ':rsort'                           	# 𝕫🢖𝕒 Sort ranges in selection in reverse order 𝟛𝟚𝟙
    # 'd'	='list-matching-lines'               	#	!!!not implemented yet
    # 'f'	='delete-matching-lines'             	#	!!!not implemented yet
    # 'g'	='delete-non-matching-lines'         	#	!!!not implemented yet
    # 't'	='delete-duplicate-lines'            	#	!!!not implemented yet
    # 'n'	='reformat-to-sentence-lines'        	#	!!!not implemented yet
    # 'o'	='copy-rectangle-to-register'        	#	!!!not implemented yet
    # 'r'	='query-replace-regexp'              	#	!!!not implemented yet
    # 'h'	='mark-defun'                        	#	!!!not implemented yet
    # ';'	='escape-quotes'                     	# Add slash before double quote in current line or selection

  # [keys.normal.'space'.'d'] #Ⓝ [ ␣w] [] ☰⟪ Bracket mode in Space mode (place cursor in between)
    # 'RET'	= 'insert char'   	#
    # 'SPC'	= 'insert unicode'	#
    # 'd'  	= '()'            	# () parenthesis
    # 'f'  	= '[]'            	# [] square bracket
    # 'j'  	= '{}'            	# {} brace
    # 'k'  	= '""'            	# "" regular double quote
    # 'l'  	= "''"            	# '' regular single quote
    # 'r'  	= '‹›'            	# ‹› single angle quote (single chevrons)
    # 't'  	= '«»'            	# «» double angle quote (double chevrons)
    # 'n'  	= '【】'            	# 【】 black lenticular bracket
    # 'm'  	= '「」'            	# 「」 corner bracket
    # 'o'  	= '〔〕'            	# 〔〕 tortoise shell bracket
    # ','  	= '〈〉'            	# 〈〉 angle bracket or math ⟨⟩
    # '.'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
    # '<'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
    # 'g'  	= '‘’'            	# ‘’ curly single quote
    # 'h'  	= '“”'            	# “” double curly quote
    # 'y'  	= "`'"            	# `' emacs quote
    # ';'  	= '=""'           	# ="" string assignment
    # 'z'  	= '⸨⸩'            	# ⸨⸩ Double Parenthesis
    # 'c'  	= 'date'          	# 📆📅current date
    # 'p'  	= 'u+000C'        	# ␌ formfeed

  [keys.normal.'space'.'w'] #Ⓝ [ ␣w] [] ☰🗔  Window mode in Space mode
    's'      	= 'no_op'           	# [  ][hsplit]         	#
    'C-s'    	= 'no_op'           	# [  ][hsplit]         	#
    'v'      	= 'no_op'           	# [  ][vsplit]         	#
    'C-v'    	= 'no_op'           	# [  ][vsplit]         	#
    'F'      	= 'no_op'           	#⇧[  ][goto_file]      	#
    'j'      	= 'jump_view_down'  	#≝[ j][jump_view_down] 	🗗▼ Move to Split ↓
    'k'      	= 'jump_view_up'    	#≝[ k][jump_view_up]   	🗗▲ Move to Split ↑
    'l'      	= 'jump_view_left'  	# [ h][jump_view_right]	🗗◀ Move to Split ←
    ';'      	= 'jump_view_right' 	# [ l][]               	🗗▶ Move to Split →
    'C-j'    	= 'jump_view_down'  	#≝[^j][jump_view_down] 	🗗▼ Move to Split ↓
    'C-k'    	= 'jump_view_up'    	#≝[^k][jump_view_up]   	🗗▲ Move to Split ↑
    'C-l'    	= 'jump_view_left'  	# [^h][jump_view_right]	🗗◀ Move to Split ←
    'C-;'    	= 'jump_view_right' 	# [^l][]               	🗗▶ Move to Split → #!!!fails
    'C-down' 	= 'jump_view_down'  	# [▼][]                	🗗▼ Move to Split ↓
    'C-up'   	= 'jump_view_up'    	# [▲][]                	🗗▲ Move to Split ↑
    'C-left' 	= 'jump_view_left'  	# [◀][]                	🗗◀ Move to Split ←
    'C-right'	= 'jump_view_right' 	# [▶][]                	🗗▶ Move to Split →
    'w'      	= 'rotate_view'     	#≝[ w][rotate_view]    	🗗⟳ Switch to next window
    'C-w'    	= 'rotate_view'     	#≝[^w][rotate_view]    	🗗⟳ Switch to next window
    'f'      	= 'vsplit'          	#≝[ v][vsplit]         	 🗗→ Split right  (Vertical)
    'C-f'    	= 'vsplit'          	#≝[^v][vsplit]         	 🗗→ Split right  (Vertical)
    'm'      	= 'hsplit'          	# [ s][]               	 🗗↓ Split bottom (Horizontal)
    'C-m'    	= 'hsplit'          	# [^s][]               	 🗗↓ Split bottom (Horizontal)
    'h'      	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'C-h'    	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'g'      	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'C-g'    	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'q'      	= 'wclose'          	#≝[ q][wclose]         	 ×🗔 Close          current window
    'C-q'    	= 'wclose'          	#≝[^q][wclose]         	 ×🗔 Close          current window
    'o'      	= 'wonly'           	#≝[ o][wonly]          	 ×∀🗔 Close all but current window
    'C-o'    	= 'wonly'           	#≝[^o][wonly]          	 ×∀🗔 Close all but current window
    'x'      	= 'wonly'           	# [ o][]               	 ×∀🗔 Close all but current window
    'C-x'    	= 'wonly'           	# [^o][]               	 ×∀🗔 Close all but current window
    'down'   	= 'jump_view_down'  	#≝[▼][jump_view_down]  	 Move to split below
    'up'     	= 'jump_view_up'    	#≝[▲][jump_view_up]    	 Move to split above
    'left'   	= 'jump_view_left'  	#≝[◀][jump_view_left]  	 Move to left split
    'right'  	= 'jump_view_right' 	#≝[▶][jump_view_right] 	 Move to right split

  [keys.normal.'space'.'u'] #Ⓝ 🌐 ☰ⓤ LSPs and various ones
    'u'  	= 'remove_primary_selection'	# [ ⌥,]	×          the primary selection
    'i'  	= 'keep_primary_selection'  	# [  ,]	×∀ all but the primary selection (keep only)
    # LSP	                            	 
    'a'  	= 'format_selections'       	# [  =]	ℱ  Format selection (currently nonfunctional/disabled) (LSP)
    'q'  	= ':format'                 	# []   	ℱ∀ Format the file using the LSP formatter
    'j'  	= 'code_action'             	# [␣ a]	Ⓐ  Apply code action (LSP)
    's'  	= 'symbol_picker'           	# [␣ s]	🅂🗋 Open document  symbol picker (LSP) ⚛Ⓢ
    'w'  	= 'workspace_symbol_picker' 	# [␣⇧s]	🅂🗍 Open workspace symbol picker (LSP) ⚛Ⓢ
    'r'  	= 'rename_symbol'           	#≝[]   	✎  Rename symbol (LSP)
    'l'  	= 'goto_prev_diag'          	# [⧛ d]	🢔🛠  Diagnostic previous (LSP) !!! make these sticky
    ';'  	= 'goto_next_diag'          	# [⧚ d]	🛠🢖  Diagnostic next     (LSP) !!! make these sticky
    '.'  	= 'goto_first_diag'         	# [⧛⇧d]	⭰🛠 Diagnostic first    in document (LSP)
    '/'  	= 'goto_last_diag'          	# [⧚⇧d]	🛠⭲ Diagnostic last     in document (LSP)

  # [keys.normal.'space'.'p']	#Ⓝ ☰ⓟ TBD



  [keys.normal.'['] #Ⓝ ☰⧛ Unimpaired (see github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt)
    'd'    	= 'goto_prev_diag'   	# [ d] [goto_prev_diag]   	🢔🛠  Diagnostic previous (LSP)
    'D'    	= 'goto_first_diag'  	# [⇧d] [goto_first_diag]  	⭰🛠 Diagnostic first    in document (LSP)
    'f'    	= 'goto_first_diag'  	# [⇧d] []                 	⭰🛠 Diagnostic first    in document (LSP)
    'space'	= 'add_newline_above'	# [ ␣] [add_newline_above]	⭡␤  Add newline above
  [keys.normal.']'] #Ⓝ ☰⧚
    'd'    	= 'goto_next_diag'   	# [ d]  [goto_next_diag]  	🛠🢖  Diagnostic next (LSP)
    'D'    	= 'goto_last_diag'   	# [⇧d]  [goto_last_diag]  	🛠⭲ Diagnostic last  in document (LSP)
    'f'    	= 'goto_last_diag'   	# [⇧d]  []                	🛠⭲ Diagnostic last  in document (LSP)
    'space'	= 'add_newline_below'	# [ ␣] [add_newline_below]	⭣␤  Add newline below



# —————————————————————————————————————————————————————————————————————————————————————————————————



[keys.select] #Ⓢ Select/Extend mode
  #'esc'	= 'exit_select_mode'	# [  ⎋] [exit_select_mode]
  'e'   	= 'normal_mode'     	# [  v] [extend_next_word_end]
  #Ⓢ Test ——————————————————————————————————————————————————————————————————————
  #Ⓢ Free ——————————————————————————————————————————————————————————————————————

  'C-a'	= ['save_selection','select_all']	# [] []	🖈∀▋
  # 'A'	= ['save_selection','select_all']	#⇧[] []	🖈∀▋


  #Ⓢ           	Compat with non-modal editors	 
    'C-o'      	= 'file_picker'              	# [␣ f] [jump_backward]  	☰␜ Open file   picker
    'C-s'      	= ':write'                   	# [  ^s] [save_selection]	save file <i class='fa fa-save'></i>
    # 'C-S-s'  	= 'Save As'                  	#⇧[⇧^s][]                	???
    'C-n'      	= ':new'                     	# [ ^n][]                	🗋 new buffer
    # 'C-S-t'  	= 'open-last-closed'         	#⇧[⇧^t][]                	???
    # 'C-plus' 	= 'zoom-in'                  	# [ ^+][]                	??? 🔎⨭
    # 'C-minus'	= 'zoom-out'                 	# [ ^-][]                	??? 🔎−

  #Ⓢ   	Misc               	 
  'z'  	= 'toggle_comments'	# [ ^c][☰👁] un-/comment the selections
  'C-/'	= 'toggle_comments'	# [ ^c][] un-/comment the selections  #!!! doesn't work :(
  'C-m'	= 'decrement'      	# [ ^x][]         	⊖ o̠ Decrement object (number) under cursor <span class='cd'>o&#800;</span>
  'C-,'	= 'increment'      	# [ ^a][] !!!fails	⊕ o̟ Increment object (number) under cursor <span class='cd'>o&#799;</span>

  #Ⓢ   	Copy                                	 
  'c'  	= 'yank'                            	# [  c] [change_selection]           	🗐 Copy selection <i class='fa fa-copy'></i>
  'C-c'	= 'yank_main_selection_to_clipboard'	# [␣⇧y] [toggle_comments]            	📋 Copy main selection into system clipboard <i class='fa fa-clipboard'></i>
  'C'  	= 'yank_main_selection_to_clipboard'	#⇧[␣⇧y] [copy_selection_on_next_line]	📋 Copy main selection into system clipboard <i class='fa fa-clipboard'></i>
  'A-c'	= 'yank_joined_to_clipboard'        	# [␣ y] []                           	∀▋📋 Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i>

  #Ⓢ Shell 	                 	 
    # '|'  	= 'shell_pipe'   	#⇧[⇧ \] [shell_pipe]   	Pipe each selection through shell command, replacing with output
    "A-\\" 	= 'shell_pipe_to'	# [ ⌥\] []             	Pipe each selection into    shell command, ignoring       output
    # 'A-|'	= 'shell_pipe_to'	#⇧[⇧⌥\] [shell_pipe_to]	Pipe each selection into    shell command, ignoring       output

  #Ⓢ Move ——————————————————————————————————————————————————————————————————————
    #Ⓢ Cursor@Home
    'j'  	= 'extend_line_down' 	# [h] [extend_line_down]        	▼
    'k'  	= 'extend_line_up'   	# [j] [extend_line_up]          	▲
    'l'  	= 'extend_char_left' 	# [k] [extend_char_right]       	◀
    ';'  	= 'extend_char_right'	# [l] []                        	▶
    'm'  	= 'half_page_down'   	# [ ^d] [☰🧩]                    	⤈ Move half page down
    ','  	= 'half_page_up'     	# [ ^u] [keep_primary_selection]	⤉ Move half page up
    'C-j'	= 'page_down'        	# [ ^d] []                      	⇟ Move      page down
    'C-k'	= 'page_up'          	# [ ^u] []                      	⇞ Move      page up

    #Ⓢ        	word
    'd'       	= 'extend_prev_word_start'     	# [  b] []                	🢔w Extend   this word start
    'f'       	= 'extend_next_word_end'       	# [  e] [extend_next_char]	w🢖 Extend   this word end
    'A-d'     	= 'extend_prev_word_start'     	# [] []                   	🢔w Extend   this word start
    # 'A-d'   	= 'extend_prev_word_end'       	# [] [] !!!not implemented	⤝w Extend   prev word end   (this start + ␣)
    'A-f'     	= 'extend_next_word_start'     	# [  w] []                	w⤞ Extend   next word start (this end   + ␣)
    'D'       	= 'extend_prev_long_word_start'	#⇧[⇧ b] []                	🢔W Extend   this WORD start
    'F'       	= 'extend_next_long_word_end'  	#⇧[⇧ e] [extend_prev_char]	W🢖 Extend   this WORD end
    'A-D'     	= 'extend_prev_long_word_start'	#⇧[⇧ b] []                	🢔W Extend   this WORD start
    'A-F'     	= 'extend_next_long_word_start'	#⇧[⇧ w] []                	W⤞ Extend   next WORD end   (this end + ␣)
    # 'r'     	= 'extend_next_word_start'     	# [⇧ w] []                	W⤞ Extend   next WORD start (this end + ␣)
    # 'R'     	= 'extend_next_long_word_start'	# [⇧ w] []                	W⤞ Extend   next WORD start (this end + ␣)
    # 'A-r'   	= 'extend_next_word_start'     	# [⇧ w] []                	W⤞ Extend   next WORD start (this end + ␣)
    # 'A-R'   	= 'extend_next_long_word_start'	# [⇧ w] []                	W⤞ Extend   next WORD start (this end + ␣)
    'C-left'  	= 'extend_prev_long_word_start'	# [⇧ b] []                	🢔W Extend   this WORD start
    'C-right' 	= 'extend_next_long_word_start'	# [⇧ w] []                	W⤞ Extend   next WORD end   (this end + ␣)
    # 'A-left'	= 'extend_prev_word_end'       	# [] [] !!!not implemented	⤝w Extend   prev word end   (this start + ␣)
    'A-left'  	= 'extend_prev_word_start'     	# [] []                   	🢔w Extend   this word start
    'A-right' 	= 'extend_next_word_start'     	# [  w] []                	w⤞ Extend   next word start (this end   + ␣)

    #Ⓢ      	Line
    # 'home'	= 'extend_to_line_start'	# [home] [extend_to_line_start]	⭰▋ Extend     line start
    # 'end' 	= 'extend_to_line_end'  	# [end] [extend_to_line_end]   	▋⭲ Extend     line end
    'a'     	= 'extend_to_line_start'	# [Home] []                    	⭰▋ Extend     line start
    'A'     	= 'extend_to_line_end'  	# [End] []                     	▋⭲ Extend     line end

    #Ⓢ   	Paragraph
    # '<'	= 'extend_to_para_start'	#⇧[] []	🢔¶ Extend previous paragraph !!!not implemented
    # '>'	= 'extend_to_para_end'  	#⇧[] []	¶🢖 Extend next     paragraph !!!not implemented

    'r'	= 'repeat_last_motion'	# [ ⌥.] [replace]	∞ Repeat last motion (f/t/m)

    #Ⓢ   	Search
    'w'  	= 'extend_next_char'     	# [  f] [extend_next_word_start]     	🔍   Extend       next     char
    'W'  	= 'extend_prev_char'     	#⇧[⇧ f] [extend_next_long_word_start]	🔎   Extend       previous char
    'A-w'	= 'extend_till_char'     	# [  t] []                           	🔍₋₁ Extend 'till next     char
    'A-W'	= 'extend_till_prev_char'	#⇧[⇧ t] []                           	🔎₋₁ Extend 'till previous char
    'S'  	= 'rsearch'              	# [⇧ /] [split_selection]            	🔍𝖗 for previous regex pattern
    's'  	= 'search'               	#⇧[  /] [select_regex]               	🔎𝖗 for          regex pattern
    '.'  	= 'extend_search_prev'   	# [⇧ n] [goto_last_modification!!!]  	🢔◎ ◎͔ Extend previous search match
    '/'  	= 'extend_search_next'   	# [  n] [search]                     	◎🢖 ◎͕ Extend next     search match
    '>'  	= 'extend_search_prev'   	#⇧[⇧ [] [indent]                     	🢔¶    Extend paragraph start #!!!not implemented yet
    '?'  	= 'extend_search_next'   	#⇧[⇧ ]] [rsearch]                    	¶🢖    Extend paragraph end   #!!!not implemented yet
    '8'  	= 'search_selection'     	# [⇧ 8] [<8>]                        	𝖗🢔▋ Use current selection as the search pattern !!! blocked by ∀* implementation

    #Ⓢ          	Compat with non-modal editors
    'C-home'    	= 'goto_file_start'     	# [g] []  	⇱ line number `<n>` else file start
    'C-end'     	= 'goto_last_line'      	# [e] []  	⇲ file end
    'C-S-tab'   	= 'goto_previous_buffer'	#⇧[ⓖp][]  	⎗ !!! not working
    'C-tab'     	= 'goto_next_buffer'    	# [ⓖn][]  	⎘ !!! not working
    'C-pageup'  	= 'goto_previous_buffer'	# [   ] []	⎗
    'C-pagedown'	= 'goto_next_buffer'    	# [   ] []	⎘
    'A-pageup'  	= 'jump_backward'       	# [   ] []	⎗̡
    'A-pagedown'	= 'jump_forward'        	# [   ] []	⎘̡
    # 'C-j'     	= 'jump_backward'       	# [ ^o] []	⎗̡ Jump backward on the jumplist
    # 'C-;'     	= 'jump_forward'        	# [ ^i] []	⎘̡ Jump forward  on the jumplist #!!! doesn't work

    '1'  	= 'goto_previous_buffer'	# [ⓖp] [<1>] 	⎗ !!! blocked by ∀* implementation
    '2'  	= 'goto_next_buffer'    	# [ⓖn] [<2>] 	⎘ !!! blocked by ∀* implementation
    'A-1'	= 'goto_previous_buffer'	# [ⓖp] []    	⎗
    'A-2'	= 'goto_next_buffer'    	# [ⓖn] []    	⎘
    '3'  	= 'jump_backward'       	# [ ^o] [<3>]	⎗̡ Jump backward on the jumplist !!! blocked by ∀* implementation
    '4'  	= 'jump_forward'        	# [ ^i] [<4>]	⎘̡ Jump forward  on the jumplist !!! blocked by ∀* implementation
    'A-3'	= 'jump_backward'       	# [ ^o] []   	⎗̡ Jump backward on the jumplist
    'A-4'	= 'jump_forward'        	# [ ^i] []   	⎘̡ Jump forward  on the jumplist

  #Ⓢ Select ——————————————————————————————————————————————————————————————————————
    #Ⓢ       	Compat with non-modal editors    	 
    'C-a'    	= ['save_selection','select_all']	# [⇧ 5]  [increment]	🖈, ∀▋
    'A-down' 	= 'copy_selection_on_next_line'  	# [⇧ c]  []         	🠷 Copy selection onto the next     line (add cursor below)
    'A-up'   	= 'copy_selection_on_prev_line'  	# [⇧⌥c] []          	🠵 Copy selection onto the previous line (add cursor above)
    'S-left' 	= 'extend_char_left'             	# [V.h/◀] []
    'S-down' 	= 'extend_line_down'             	# [V.j/▼] []
    'S-up'   	= 'extend_line_up'               	# [V.k/▲] []
    'S-right'	= 'extend_char_right'            	# [V.l/▶] []


    'A-g'	= 'save_selection'	# [  ^s] []         	🖈 Save the current selection to the jumplist
    'C-g'	= 'save_selection'	# [  ^s] []         	🖈 Save the current selection to the jumplist
    'G'  	= 'save_selection'	# [  ^s] [goto_line]	🖈 Save the current selection to the jumplist

    'J'  	= 'extend_line'          	#⇧[  x] [join_selections]        	⮒ Select current line, if already selected, extend to next line
    'E'  	= 'extend_to_line_bounds'	#⇧[  x] [move_next_long_word_end]	⎯ Extend selection to line bounds (line-wise selection)
    'A-e'	= 'extend_to_line_bounds'	# [⇧ x] []                       	⎯ Extend selection to line bounds (line-wise selection)
    # "" 	= 'expand_selection'     	# [] [expand_selection]       Expand selection to parent syntax node TODO: pick a key (**TS**)
    # '5'	= 'select_paragraph'     	# [  ] [<5>]        	¶▋ Select this paragraph !!! blocked by ∀* implementation !!! command not implemented yet
    # '%'	= 'select_all'           	#⇧[⇧ 5] [select_all]	∀▋ Select entire file

    'A-j'	= 'copy_selection_on_next_line'	# [⇧ c]  []                         	🠷 Copy selection onto the next     line (add cursor below)
    'A-k'	= 'copy_selection_on_prev_line'	# [⇧⌥c] []                          	🠵 Copy selection onto the previous line (add cursor above)
    'A-s'	= 'select_regex'               	# [  s] [split_selection_on_newline]	𝖗▋ Select all regex matches inside selections
    'N'  	= 'split_selection'            	#⇧[⇧ s] [search_prev]               	䷖𝖗 on regex matches
    'A-n'	= 'split_selection_on_newline' 	# [ ⌥s] []                          	䷖␤ (﹨␤)

    "'"    	= 'collapse_selection'        	# [  ;] []               	🢖🢔 Collapse selection onto a single cursor
    "A-'"  	= 'flip_selections'           	# [ ⌥;][]                	⮀ Flip selection cursor and anchor
    'A-a'  	= 'flip_selections'           	#⇧[ ⌥;][]                	⮀ Flip selection cursor and anchor
    'A-A'  	= 'flip_selections'           	#⇧[ ⌥;][]                	⮀ Flip selection cursor and anchor
    'A-l'  	= 'rotate_selections_backward'	# [⇧ 9] []               	⟲ Rotate main selection backward
    'A-;'  	= 'rotate_selections_forward' 	# [⇧ 0] [flip_selections]	⟳ Rotate main selection forward
    'A-u'  	= 'remove_primary_selection'  	# [ ⌥,] [earlier]        	×         the primary selection
    'A-i'  	= 'keep_primary_selection'    	# [  ,] []               	×∀ all but the primary selection (keep only)
    'A-U'  	= 'no_op'                     	#⇧[ ⌥,] [earlier]        	×× undo remove selection (!!!not implemented yet)
    'K'    	= 'keep_selections'           	#⇧[⇧ k] [keep_selections]	ᵏ𝖗 selections not matching the regex (keep)
    'L'    	= 'remove_selections'         	#⇧[⇧⌥k] []               	×𝖗 selections     matching the regex
    # 'A-:'	= 'ensure_selections_forward' 	#⇧[⇧⌥;] []               	???

    # '_'  	= 'trim_selections'	#⇧[⇧ -] [trim_selections]	✁Trim whitespace from the selection
    'minus'	= 'trim_selections'	# [⇧ -] []               	✁Trim whitespace from the selection
    # '+'  	= 'dupe_selections'	#⇧[⇧ =] [dupe_selections]	🗐Duplicate selection (currently nonfunctional/disabled)

  #Ⓢ Change ——————————————————————————————————————————————————————————————————————
    #            	Compat with non-modal editors
    'A-del'      	= ['extend_next_word_end',       	# [] []   	⌦w
                 	   'delete_selection']           	#         	× word →
    'C-del'      	= ['extend_next_long_word_end',  	# [] []   	⌦W
                 	   'delete_selection']           	#         	 × Word →
    'A-backspace'	= ['extend_prev_word_start',     	# [] []   	⌫w
                 	   'delete_selection']           	#         	 × word ←
    'C-backspace'	= ['extend_prev_long_word_start',	# [] []   	⌫W
                 	   'delete_selection']           	#         	 × Word ←
    # 'del'      	= 'delete_selection'             	# [  d] []	×▋
    'S-del'      	= 'delete_selection_noyank'      	# [ ⌥d] []	🕱▋
    'S-ret'      	= 'open_below'                   	# [  o] []	⭣␤ Open new line below selection
    'ret'        	= 'open_above'                   	#⇧[⇧ o] []	⭡␤ Open new line above selection

    # '.'      	= 'N/A'                              	# [.] [n/a]                    	∞ Repeat last change
    '6'        	= 'delete_char_forward'              	# [ ⌦] [<5>]                   	⌦ !!! blocked by ∀* implementation
    'x'        	= 'delete_selection'                 	# [  d] [extend_line]          	×▋
    'A-x'      	= 'delete_selection_noyank'          	# [ ⌥d] []                     	🕱▋ (...without yanking)
    'A-c'      	= 'change_selection'                 	# [c] [change_selection_noyank]	Δ
    'h'        	= 'delete_char_backward'             	# [⌫] [move_char_left]         	⌫c × char ←
    'H'        	= 'delete_char_forward'              	#⇧[⌦] []                       	⌦c × char →
    'A-h'      	= ['extend_prev_word_start',         	# [] []                        	⌫w
               	   'delete_selection']               	#                              	× word ←
    'A-H'      	= ['extend_next_word_end',           	# [] []                        	⌦w
               	   'delete_selection']               	#                              	× word →
    'C-h'      	= ['extend_prev_long_word_start',    	# [] []                        	⌫W
               	   'delete_selection']               	#                              	 × Word ←
    'C-x'      	= ['yank_main_selection_to_clipboard'	                               	,
               	   'delete_selection']               	# []   [decrement]             		×📋 cut to clipboard <i class='fa fa-clipboard'></i>
    'backspace'	= 'delete_char_backward'             	# [I.bs] []                    	⌫
    'X'        	= 'join_selections'                  	#⇧[⇧ j] [extend_to_line_bounds]	×␤ ⨝ Join lines inside selection

    # 'backspace'	= 'delete_char_backward'	# [backspace] [delete_char_backward]	⌫c × char ←
    # 'C-h'      	= 'delete_char_backward'	# [C-h] [delete_char_backward]      	⌫c × char ←
    'del'        	= 'delete_char_forward' 	# [delete] [delete_char_forward]    	⌦c × char →
    # 'C-d'      	= 'delete_char_forward' 	# [C-d] [delete_char_forward]       	⌦c × char →

    't'	= 'replace'            	# [  r] [find_till_char]	🗘  Replace with a character
    'T'	= 'replace_with_yanked'	#⇧[⇧ r] [till_prev_char]	🗘ʸ Replace with yanked text

    'B'  	= 'switch_case'        	# [⇧ `] [move_prev_long_word_start]	𝕒⇋𝔸 (selection)
    'C-b'	= 'switch_to_uppercase'	#⇧[⇧⌥`] []                         	𝕒𝔸 (selection)
    # '~'	= 'switch_case'        	# [⇧ `] [switch_case]              	𝕒⇋𝔸 (selection)
    # '`'	= 'switch_to_lowercase'	# [  `] [switch_to_lowercase]      	𝕒𝔸  (selection)
    # '`'	= 'switch_case'        	# [⇧ `] [switch_to_lowercase]      	𝕒⇋𝔸 (selection)
    # '~'	= 'switch_to_uppercase'	# [⇧⌥`] [switch_case]              	𝕒𝔸 (selection)
    '^'  	= 'switch_to_uppercase'	# [⇧⌥`] []                         	𝕒𝔸 (selection)
    'A-`'	= 'switch_to_lowercase'	# [   `] [switch_to_uppercase]     	𝔸𝕒  (selection)

    'A-,'	= 'unindent'	# [⇧,][remove_primary_selection] ⇚ (selection)
    'A-.'	= 'indent'  	# [⇧.][repeat_last_motion]       ⇛ (selection)

    # 'q'	= 'record_macro'   	# [  q] [record_macro]        	⏺ Start/stop macro recording to the selected register
    # 'Q'	= 'replay_macro'   	#⇧[⇧ q] replay_macro]         	▶  Play back a recorded macro from the selected register
    # '"'	= 'select_register'	# [  '<reg>] [select_register]	®  Select a register to yank to or paste from

    # 'b'	= 'N/Arepeat_last_change' 	#⇧[  .] [move_prev_word_start] 	∞ Repeat last change !!! no command yet
    # '.'	=  'N/Arepeat_last_change'	# [  .] [n/arepeat_last_change]	∞ Repeat last change
    # 'i'	= 'insert_mode'           	# [  i] [insert_mode]          	⁁⤸ Insert before selection
    'o'  	= 'append_mode'           	# [  a] [open_above]           	⤹⎀ Insert after selection (append)
    'I'  	= 'open_above'            	#⇧[⇧ o] [prepend_to_line]      	⭡␤ Open new line above selection
    'O'  	= 'open_below'            	# [  o] [append_to_line]       	⭣␤ Open new line below selection
    'u'  	= 'undo'                  	# [  u] [undo mode]            	⎌ Undo change
    'y'  	= 'redo'                  	# [⇧ u] [yank]                 	↷ Redo change
    'U'  	= 'earlier'               	#⇧[ ⌥u] [redo]                 	🕘 Move backward in history   <i class='fa fa-history'></i>
    'Y'  	= 'later'                 	#⇧[⇧⌥u] []                     	🕒 Move forward in history ⏱ <i class='fa fa-clock-o'></i>
    'C-y'	= 'redo'                  	# [⇧ u] []                     	↷ Redo change
    'v'  	= 'paste_after'           	# [  p] [select_mode]          	📋⤹ Paste after selection
    'C-v'	= 'paste_clipboard_after' 	# [␣ p] []                     	📋⤹ Paste after selection
    'V'  	= 'paste_before'          	# [⇧ p] []                     	⤸📋 Paste before selection
    'C-z'	= 'undo'                  	# [  u] []                     	⎌ Undo change
    'C-Z'	= 'redo'                  	#⇧[⇧ u] []                     	↷ Redo change !!!not working
    # 'I'	= 'prepend_to_line'       	#⇧[⇧ i] [prepend_to_line]      	⁁⭰ Insert at the start of the line
    # 'A'	= 'append_to_line'        	#⇧[⇧ a] [append_to_line]       	⭲⎀ Insert at the end of the line

  #Ⓢ Select manipulation ————————————————————————————————————————————————————————————————————
    '('  	= 'rotate_selection_contents_backward'	#⇧[⇧⌥9] [rotate_selections_backward]	⟲ Rotate selection contents backward
    ')'  	= 'rotate_selection_contents_forward' 	#⇧[⇧⌥0] [rotate_selections_forward] 	⟳ Rotate selection contents forward
    '7'  	= 'align_selections'                  	# [⇧ 7] [<7>]                       	⥂ Align selection in columns !!! blocked by ∀* implementation
    # '&'	= 'align_selections'                  	#⇧[⇧ 7] [align_selections]          	⥂ Align selection in columns
    # '='	= 'format_selections'                 	# [  =] [format_selections]         	ℱ Format selection (currently nonfunctional/disabled) (LSP)

  #Ⓢ Shell	#                      	#
  # '!'   	= 'shell_insert_output'	#⇧[⇧  1] [shell_insert_output] 🢔$ Run shell command, inserting output before each selection
  '@'     	= 'shell_append_output'	#⇧[⇧⌥1] []                    $🢖 Run shell command, appending output after  each selection
  # 'A-!' 	= 'shell_append_output'	# [⇧⌥1] [shell_append_output] $🢖 Run shell command, appending output after  each selection


  ##Ⓢ ☰Minor modes

  [keys.select.'p'] #Ⓢ 'view' [Ⓝ  z] [paste_after] ☰👁 View mode intended for scrolling and manipulating the view without changing the selection
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    'z'       	= 'no_op'            	# [] [align_view_center] 	#
    'c'       	= 'no_op'            	# [] [align_view_center] 	#
    't'       	= 'no_op'            	# [] [align_view_top]    	#
    'b'       	= 'no_op'            	# [] [align_view_bottom] 	#
    'b'       	= 'no_op'            	# [] [page_up]           	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
  [keys.select.'P'] #Ⓢ 'view sticky' [Ⓝ⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    'z'       	= 'no_op'            	# [] [align_view_center] 	#
    'c'       	= 'no_op'            	# [] [align_view_center] 	#
    't'       	= 'no_op'            	# [] [align_view_top]    	#
    'b'       	= 'no_op'            	# [] [align_view_bottom] 	#
    'b'       	= 'no_op'            	# [] [page_up]           	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
  [keys.select.'Z'] #Ⓢ 'view sticky' ⇧[Ⓝ⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    'z'       	= 'no_op'            	# [] [align_view_center] 	#
    'c'       	= 'no_op'            	# [] [align_view_center] 	#
    't'       	= 'no_op'            	# [] [align_view_top]    	#
    'b'       	= 'no_op'            	# [] [align_view_bottom] 	#
    'b'       	= 'no_op'            	# [] [page_up]           	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]


  [keys.select.'g'] #Ⓢ [Ⓝ  g] [goto] ☰ Goto mode Jumps to various locations
    'j'  	= 'goto_last_line'          	# [e] []                        	⇲ file end
    'k'  	= 'goto_file_start'         	# [g] [goto_line_end]           	⇱ line number `<n>` else file start
    'g'  	= 'goto_file_start'         	# [g] [goto_file_start]         	⇱ line number `<n>` else file start
    's'  	= 'goto_first_nonwhitespace'	# [s] [goto_first_nonwhitespace]	line start 1ₛₜ non-whitespace char
    'a'  	= 'goto_first_nonwhitespace'	# [s] [goto_last_accessed_file] 	line start 1ₛₜ non-whitespace char
    'l'  	= 'goto_line_start'         	# [h] []                        	line start ⭰ !!! change to 🢔¶ when implemented
    ';'  	= 'goto_line_end'           	# [l] []                        	line end   ⭲ !!! change to ¶🢖 when implemented
    'f'  	= 'goto_file'               	# [f] [goto_file]               	files in the selection
    'm'  	= 'goto_window_bottom'      	# [b] [goto_last_modified_file] 	🗔⭳ screen bottom
    ','  	= 'goto_window_top'         	# [t] []                        	🗔⭱ screen top
    'n'  	= 'goto_window_center'      	# [c] [goto_next_buffer]        	🗔· screen middle
    'd'  	= 'goto_definition'         	# [d] [goto_definition]         	≝      definition (LSP)
    'F12'	= 'goto_definition'         	# [d] []                        	≝      definition (LSP)
    'e'  	= 'goto_type_definition'    	# [y] [goto_last_line]          	≝ type definition (LSP)
    'y'  	= 'goto_type_definition'    	# [y] [goto_type_definition]    	≝ type definition (LSP)
    'r'  	= 'goto_reference'          	# [r] [goto_reference]          	🅁※ references (LSP)
    'i'  	= 'goto_implementation'     	# [i] [goto_implementation]     	🄸 implementation (LSP)
    't'  	= 'goto_implementation'     	# [i] [goto_window_top]         	🄸 implementation (LSP)
    'c'  	= 'goto_last_accessed_file' 	# [a] [goto_window_center]      	🕮␜ file last accessed/alternate
    'v'  	= 'goto_last_modified_file' 	# [m] []                        	✎␜ file last modified/alternate
    '1'  	= 'goto_previous_buffer'    	# [p] []                        	buffer previous !!! blocked by ∀* universal argument
    '2'  	= 'goto_next_buffer'        	# [n] []                        	buffer next     !!! blocked by ∀* universal argument
    '3'  	= 'jump_backward'           	# [] []                         	⎗̡ Jump backward on the jumplist !!! blocked by ∀* implementation
    '4'  	= 'jump_forward'            	# [] []                         	⎘̡ Jump forward  on the jumplist !!! blocked by ∀* implementation
    'u'  	= 'goto_last_modification'  	# [.] []                        	🕘 last modification in current file <i class='fa fa-history'></i>
    '.'  	= 'goto_last_modification'  	# [.] [goto_last_modification]  	🕘 last modification in current file <i class='fa fa-history'></i>
    'b'  	= 'no_op'                   	# [] [goto_window_bottom]       	#
    'h'  	= 'no_op'                   	# [] [goto_line_start]          	#
    'p'  	= 'no_op'                   	# [] [goto_previous_buffer]     	#

  [keys.select.'n'] #Ⓢ [  m] [] ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>
    'n'	= 'match_brackets'          	# [  m] []	🢔()🢖 Goto matching   bracket (TS)
    '.'	= 'match_brackets'          	# [  ] [] 	🢔(   Goto next left  bracket (TS) !!!not implemented
    '/'	= 'match_brackets'          	# [  ] [] 	  )🢖 Goto next right bracket (TS) !!!not implemented
    'i'	= 'surround_add'            	# [  s] []	(+)  Surround current selection with <char>
    't'	= 'surround_replace'        	# [  r] []	(🗘) Replace surround character <from> with <to>
    'x'	= 'surround_delete'         	# [  d] []	(×)  Delete  surround character <char>
    'e'	= 'select_textobject_around'	# [  a] []	🢔O🢖  Select around textobject
    'a'	= 'select_textobject_inner' 	# [  i] []	🢖O🢔  Select inside textobject

  [keys.select.'C-w'] #Ⓢ [Ⓝ ^w] [] ☰🗔  Window mode
    's'      	= 'no_op'           	# [  ][hsplit]         	#
    'C-s'    	= 'no_op'           	# [  ][hsplit]         	#
    'v'      	= 'no_op'           	# [  ][vsplit]         	#
    'C-v'    	= 'no_op'           	# [  ][vsplit]         	#
    'F'      	= 'no_op'           	#⇧[  ][goto_file]      	#
    'j'      	= 'jump_view_down'  	# [ j][jump_view_down] 	🗗▼ Move to Split ↓
    'k'      	= 'jump_view_up'    	# [ k][jump_view_up]   	🗗▲ Move to Split ↑
    'l'      	= 'jump_view_left'  	# [ h][jump_view_right]	🗗◀ Move to Split ←
    ';'      	= 'jump_view_right' 	# [ l][]               	🗗▶ Move to Split →
    'C-j'    	= 'jump_view_down'  	# [^j][jump_view_down] 	🗗▼ Move to Split ↓
    'C-k'    	= 'jump_view_up'    	# [^k][jump_view_up]   	🗗▲ Move to Split ↑
    'C-l'    	= 'jump_view_left'  	# [^h][jump_view_right]	🗗◀ Move to Split ←
    'C-;'    	= 'jump_view_right' 	# [^l][]               	🗗▶ Move to Split → #!!!fails
    'C-down' 	= 'jump_view_down'  	# [▼][]                	🗗▼ Move to Split ↓
    'C-up'   	= 'jump_view_up'    	# [▲][]                	🗗▲ Move to Split ↑
    'C-left' 	= 'jump_view_left'  	# [◀][]                	🗗◀ Move to Split ←
    'C-right'	= 'jump_view_right' 	# [▶][]                	🗗▶ Move to Split →
    'w'      	= 'rotate_view'     	# [ w][rotate_view]    	🗗⟳ Switch to next window
    'C-w'    	= 'rotate_view'     	# [^w][rotate_view]    	🗗⟳ Switch to next window
    'f'      	= 'vsplit'          	# [ v][vsplit]         	 🗗→ Split right  (Vertical)
    'C-f'    	= 'vsplit'          	# [^v][vsplit]         	 🗗→ Split right  (Vertical)
    'm'      	= 'hsplit'          	# [ s][]               	 🗗↓ Split bottom (Horizontal)
    'C-m'    	= 'hsplit'          	# [^s][]               	 🗗↓ Split bottom (Horizontal)
    'h'      	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'C-h'    	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'g'      	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'C-g'    	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'q'      	= 'wclose'          	# [ q][wclose]         	 ×🗔 Close          current window
    'C-q'    	= 'wclose'          	# [^q][wclose]         	 ×🗔 Close          current window
    'o'      	= 'wonly'           	# [ o][wonly]          	 ×∀🗔 Close all but current window
    'C-o'    	= 'wonly'           	# [^o][wonly]          	 ×∀🗔 Close all but current window
    'x'      	= 'wonly'           	# [ o][]               	 ×∀🗔 Close all but current window
    'C-x'    	= 'wonly'           	# [^o][]               	 ×∀🗔 Close all but current window
    # 'down' 	= 'jump_view_down'  	# [▼][jump_view_down]  	 Move to split below
    # 'up'   	= 'jump_view_up'    	# [▲][jump_view_up]    	 Move to split above
    # 'left' 	= 'jump_view_left'  	# [◀][jump_view_left]  	 Move to left split
    # 'right'	= 'jump_view_right' 	# [▶][jump_view_right] 	 Move to right split

  [keys.select.'space'] #Ⓢ [Ⓝ ␣] [] ☰␣  Space mode
    # 'space'	= 'insert_mode'                       	# [  i] [] !!!panick!                   	⁁⤸ Insert before selection !!!not implemented
    'ret'    	= 'command_mode'                      	# [  ⎋] []                              	Ⓒ Enter command mode
    'P'      	= 'no_op'                             	#⇧[] [paste_clipboard_before]           	#
    'Y'      	= 'no_op'                             	# [] [yank_main_selection_to_clipboard] 	#
    'R'      	= 'no_op'                             	#⇧[] [replace_selections_with_clipboard]	#
    'S'      	= 'no_op'                             	#⇧[] [workspace_symbol_picker]          	#
    # Home   	row                                   	 
    'j'      	= 'extend_line'                       	# [ x] []                        	⮒ Select current line, if already selected, extend to next line
    'k'      	= 'keep_selections'                   	# [⇧ k] []                       	ᵏ𝖗 selections not matching the regex (keep)
    'l'      	= 'remove_selections'                 	# [⇧⌥k] []                       	×𝖗 selections     matching the regex
    ';'      	= 'command_mode'                      	# [⇧ ;] []                       	Ⓒ Enter command mode
    # 'f'    	= 'mode_file'                         	# [] [file_picker]               	☰␜ File mode !!! aliases not implemented yet
    # 'd'    	= 'mode_bracket'                      	# [] []                          	☰⟪ Insert various brackets !!! aliases not implemented yet
    's'      	= 'select_regex'                      	# [  s] [symbol_picker]          	𝖗▋ Select all regex matches inside selections
    'a'      	= ['save_selection',                  	# [⇧ 5] []                       	🖈∀▋
             	   'select_all']                      	#                                	Save current position and select everything
    'h'      	= ['kill_to_line_start',              	# [] []                          	×⎯ Delete this line
             	   'kill_to_line_end']                	#                                	Delete this line
    'g'      	= 'save_selection'                    	# [  ^s] []                      	🖈 Save the current selection to the jumplist
    # Upper  	row                                   	                                 	 
    # 'u'    	= 'mode_U'                            	# [] []                          	☰u TBD LSPs? or list_kills like z !!! aliases not implemented yet
    # 'i'    	= 'mode_Register'                     	# [] []                          	☰® Register/copy/paste etc.
    'o'      	= 'hover'                             	# [k] []                         	? Show documentation for item under cursor in a popup (LSP)
    # 'p'    	= 'mode_P'                            	# [][paste_clipboard_after]      	☰p TBD !!! aliases not implemented yet
    'r'      	= 'rename_symbol'                     	#≝[][rename_symbol]              	  ✎ Rename symbol (LSP)
    'e'      	= 'extend_to_line_bounds'             	# [ x] []                        	⎯ Extend selection to line bounds (line-wise selection)
    #'w'     	= 'mode_window'                       	# [␣ w][mode_window]             	☰🗔 Window mode !!! aliases not implemented yet
    # 'q'    	= '???'                               	# [ q] []                        	#
    'y'      	= 'code_action'                       	# [␣ a][yank_joined_to_clipboard]	Ⓐ Apply code action (LSP)
    't'      	= 'replace_with_yanked'               	# [⇧ r] []                       	🗘📋 Replace with copied text <i class='fa fa-copy'></i>
    # Lower  	row                                   	                                 	 
    'm'      	= 'symbol_picker'                     	# [␣ s] []                       	🅂🗋 Open document  symbol picker (LSP) ⚛Ⓢ
    ','      	= 'workspace_symbol_picker'           	# [␣⇧s] []                       	🅂🗍 Open workspace symbol picker (LSP) ⚛Ⓢ
    # '.'    	= 'no_op'                             	# [] []                          	#TBD
    '/'      	= 'global_search'                     	#≝[␣ /][global_search]           	🔎🗁 Global search in workspace folder
    'v'      	= 'paste_clipboard_after'             	# [␣ p] []                       	📋⤹ Paste after selections
    'c'      	= 'yank_main_selection_to_clipboard'  	# [␣ ⇧y]                         	📋▋ Copy main selection into system clipboard <i class='fa fa-clipboard'></i>▋
    'x'      	= ['yank_main_selection_to_clipboard',	# [] []                          	×📋 ▋<i class='fa fa-clipboard'></i>
             	   'delete_selection']                	#                                	cut to clipboard
    # 'z'    	= 'list_kills'                        	# [] []                          	🕱☰ create a new buffer and paste a buffer there !!! not available yet
    'n'      	= 'split_selection'                   	# [⇧ s] []                       	䷖𝖗 on regex matches
    'b'      	= 'switch_to_lowercase'               	# [  `] [buffer_picker]          	𝔸𝕒  (selection)
    "'"      	= 'flip_selections'                   	# [ ⌥;] []                       	⮀ Flip selection cursor and anchor
    '\'      	= 'shell_pipe'                        	# [⇧ \] []                       	Pipe each selection through shell command, replacing with output
    # Numbers	row                                   	                                 	 
    # "'"    	= 'last_picker'                       	# [  ] []                        	☰☾ ∞Open last fuzzy picker
    '6'      	= 'switch_to_uppercase'               	# [⇧⌥`] []                       	𝕒𝔸 (selection) !!! change to Sentence Case
    # '7'    	= 'toggle_spellcheck'                 	# [] []                          	⇝ spell check !!! not implemented

  [keys.select.'space'.'f'] #Ⓢ [ ␣f] [] ☰␜ File mode in Space mode
    'j'  	= ':write'                 	#        	💾 save file
    'k'  	= 'file_picker'            	# [␣ f]  	🗁 Open file   picker
    # 'l'	= 'open file at cursor'    	#        	❚␜ open file at cursor
    'f'  	= 'buffer_picker'          	# [ b] []	☰b Open buffer picker
    # 'd'	= 'show in desktop'        	#        	show in desktop
    's'  	= ':write'                 	#        	💾 save file
    'S'  	= ':write-all'             	#⇧       	💾∀v all views
    'a'  	= 'goto_last_accessed_file'	# [ⓖ a]  	🕮 file last accessed/alternate
    # 'g'	= 'bookmark bmenu list'    	#        	☰🖈bookmark bmenu list
    # 'h'	= 'bookmark set'           	#        	🖈 bookmark set
    # 'u'	= 'open last closed'       	#        	open last closed
    # 'o'	= 'open file fast'         	#        	open file fast Prompt to open a file from bookmark
    # 'r'	= 'rename_file'            	#        	✎ rename current file
    # 'e'	= 'open in external app'   	#        	open in external app
    # 'w'	= 'find_file'              	# []     	🔎 Find file  <i class='mss mss-Search-3'></i>
    # 'q'	= 'mode_fs_close'          	# []     	☰× Close buffers/files saved/unsaved
    'v'  	= 'goto_last_modified_file'	# [ⓖ m]  	✎ file last modified/alternate
    # 'c'	= 'copy file path'         	#        	📋C:\ copy file path <i class='fa fa-clipboard'>C:\
    # 't'	= 'list recently closed'   	#        	list recently closed
    # 'y'	= 'open recently closed'   	#        	open recently closed
    'o'  	= 'file_picker'            	# [␣ f]  	🗁 Open file   picker
    'n'  	= ':new'                   	# [Ⓝ^n]  	🗋 new empty buffer
    # 'b'	= 'recentf open files'     	#        	recentf open files
    # '\'	= 'open in terminal'       	#        	open in terminal
    '`'  	= ':reload'                	# []     	🗘 Discard changes and reload from the source file
  [keys.select.'space'.'f'.'q'] #Ⓢ ☰␜☰× Close mode in File mode in Space mode
    'q'	= ':buffer-close'   	# ×b current buffer
    'f'	= ':buffer-close'   	# ×b current buffer
    'r'	= ':buffer-close!'  	# 🕱b current buffer (kill unsaved changes)
    'd'	= ':quit'           	# ×v current view
    'e'	= ':quit!'          	# 🕱v current view
    'a'	= ':quit-all'       	# ×∀v all views
    'q'	= ':quit-all!'      	# 🕱∀v all views
    's'	= ':write-quit'     	# 💾                ×v current view
    'w'	= ':write-quit!'    	# 💾                🕱v current view
    'j'	= ':write-quit'     	# 💾                ×v current view
    'u'	= ':write-quit!'    	# 💾                🕱v current view
    'k'	= ':write-quit-all' 	# 💾∀v all views, ×∀v all views
    'i'	= ':write-quit-all!'	# 💾∀v all views, 🕱∀v all views
    ';'	= ':cquit'          	# Quit with exit code (default 1)
  [keys.select.'space'.'f'.'x'] #Ⓢ ☰␜☰× Close mode in File mode in Space mode
    'x'	= ':buffer-close'   	# ×b current buffer
    'f'	= ':buffer-close'   	# ×b current buffer
    'r'	= ':buffer-close!'  	# 🕱b current buffer (kill unsaved changes)
    'd'	= ':quit'           	# ×v current view
    'e'	= ':quit!'          	# 🕱v current view
    'a'	= ':quit-all'       	# ×∀v all views
    'q'	= ':quit-all!'      	# 🕱∀v all views
    's'	= ':write-quit'     	# 💾                ×v current view
    'w'	= ':write-quit!'    	# 💾                🕱v current view
    'j'	= ':write-quit'     	# 💾                ×v current view
    'u'	= ':write-quit!'    	# 💾                🕱v current view
    'k'	= ':write-quit-all' 	# 💾∀v all views, ×∀v all views
    'i'	= ':write-quit-all!'	# 💾∀v all views, 🕱∀v all views
    ';'	= ':cquit'          	# Quit with exit code (default 1)

  [keys.select.'space'.'i'] #Ⓢ [ ␣i] [] ☰®  Register/copy/paste etc.
    'i'  	= 'select_register'                  	# [ '<reg>]	®  Select a register to copy/paste from ??? make it sticky for further reg ops or use the main layer
    # '1'	= 'append_to_register 1'             	#          	®1⎀ Append current line/selection to reg 1, or current line when none
    # '2'	= 'clear_register 1'                 	#          	®1× x
    # '3'	= 'copy_to_register 1'               	#          	®1🗐 x
    # '4'	= 'paste_from_register 1'            	#          	®1📋 x
    # '7'	= 'append_to_register 1'             	#          	®1⎀ x
    # '8'	= 'clear_register 1'                 	#          	®1× x
    't'  	= 'replace_selections_with_clipboard'	# [␣⇧r]    	🗘▋📋 Replace selections by clipboard contents <i class='fa fa-clipboard'></i>▋
    'x'  	= 'join_selections'                  	# [Ⓝ⇧j]    	×␤ ⨝ Join lines inside selection
    'v'  	= 'paste_clipboard_before'           	# [␣⇧p]    	⤸📋 Paste after  selections ⤸<i class='fa fa-clipboard'></i>
    'c'  	= 'yank_joined_to_clipboard'         	# [␣ y]    	📋∀▋ Copy all selections to clipboard (joined) ⨝📋 <i class='fa fa-clipboard'></i> ∀❚ ∀▋
    # 'a'	= ':clipboard-yank'                  	# Copy main   selection  to system         clipboard
    # 'a'	= ':clipboard-yank-join'             	# Copy joined selections to system         clipboard. A separator can be provided as first argument. Default value is newline
    # 'a'	= ':primary-clipboard-yank'          	# Copy main   selection  to system primary clipboard
    # 'a'	= ':primary-clipboard-yank-join'     	# Copy joined selections to system primary clipboard. A separator can be provided as first argument. Default value is newline
    # 'a'	= ':clipboard-paste-after'           	# Paste system  clipboard after   selections
    # 'a'	= ':clipboard-paste-before'          	# Paste system  clipboard before  selections
    # 'a'	= ':clipboard-paste-replace'         	# Paste system  clipboard replace selections
    # 'a'	= ':primary-clipboard-paste-after'   	# Paste primary clipboard after   selections
    # 'a'	= ':primary-clipboard-paste-before'  	# Paste primary clipboard before  selections
    # 'a'	= ':primary-clipboard-paste-replace' 	# Paste primary clipboard replace selections
    # 'a'	= ':show-clipboard-provider'         	# Show clipboard provider name in status bar
    'j'  	= ':sort'                            	# 𝕒🢖𝕫 Sort ranges in selection 𝟙𝟚𝟛
    'k'  	= ':rsort'                           	# 𝕫🢖𝕒 Sort ranges in selection in reverse order 𝟛𝟚𝟙
    # 'd'	='list-matching-lines'               	#	!!!not implemented yet
    # 'f'	='delete-matching-lines'             	#	!!!not implemented yet
    # 'g'	='delete-non-matching-lines'         	#	!!!not implemented yet
    # 't'	='delete-duplicate-lines'            	#	!!!not implemented yet
    # 'n'	='reformat-to-sentence-lines'        	#	!!!not implemented yet
    # 'o'	='copy-rectangle-to-register'        	#	!!!not implemented yet
    # 'r'	='query-replace-regexp'              	#	!!!not implemented yet
    # 'h'	='mark-defun'                        	#	!!!not implemented yet
    # ';'	='escape-quotes'                     	# Add slash before double quote in current line or selection

  # [keys.select.'space'.'d'] #Ⓢ [ ␣w] [] ☰⟪ Bracket mode in Space mode (place cursor in between)
    # 'RET'	= 'insert char'   	#
    # 'SPC'	= 'insert unicode'	#
    # 'd'  	= '()'            	# () parenthesis
    # 'f'  	= '[]'            	# [] square bracket
    # 'j'  	= '{}'            	# {} brace
    # 'k'  	= '""'            	# "" regular double quote
    # 'l'  	= "''"            	# '' regular single quote
    # 'r'  	= '‹›'            	# ‹› single angle quote (single chevrons)
    # 't'  	= '«»'            	# «» double angle quote (double chevrons)
    # 'n'  	= '【】'            	# 【】 black lenticular bracket
    # 'm'  	= '「」'            	# 「」 corner bracket
    # 'o'  	= '〔〕'            	# 〔〕 tortoise shell bracket
    # ','  	= '〈〉'            	# 〈〉 angle bracket or math ⟨⟩
    # '.'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
    # '<'  	= '⟪⟫'            	# ⟪⟫ double angle bracket
    # 'g'  	= '‘’'            	# ‘’ curly single quote
    # 'h'  	= '“”'            	# “” double curly quote
    # 'y'  	= "`'"            	# `' emacs quote
    # ';'  	= '=""'           	# ="" string assignment
    # 'z'  	= '⸨⸩'            	# ⸨⸩ Double Parenthesis
    # 'c'  	= 'date'          	# 📆📅current date
    # 'p'  	= 'u+000C'        	# ␌ formfeed

  [keys.select.'space'.'w'] #Ⓢ [ ␣w] [] ☰🗔  Window mode in Space mode
    's'      	= 'no_op'           	# [  ][hsplit]         	#
    'C-s'    	= 'no_op'           	# [  ][hsplit]         	#
    'v'      	= 'no_op'           	# [  ][vsplit]         	#
    'C-v'    	= 'no_op'           	# [  ][vsplit]         	#
    'F'      	= 'no_op'           	#⇧[  ][goto_file]      	#
    'j'      	= 'jump_view_down'  	#≝[ j][jump_view_down] 	🗗▼ Move to Split ↓
    'k'      	= 'jump_view_up'    	#≝[ k][jump_view_up]   	🗗▲ Move to Split ↑
    'l'      	= 'jump_view_left'  	# [ h][jump_view_right]	🗗◀ Move to Split ←
    ';'      	= 'jump_view_right' 	# [ l][]               	🗗▶ Move to Split →
    'C-j'    	= 'jump_view_down'  	#≝[^j][jump_view_down] 	🗗▼ Move to Split ↓
    'C-k'    	= 'jump_view_up'    	#≝[^k][jump_view_up]   	🗗▲ Move to Split ↑
    'C-l'    	= 'jump_view_left'  	# [^h][jump_view_right]	🗗◀ Move to Split ←
    'C-;'    	= 'jump_view_right' 	# [^l][]               	🗗▶ Move to Split → #!!!fails
    'C-down' 	= 'jump_view_down'  	# [▼][]                	🗗▼ Move to Split ↓
    'C-up'   	= 'jump_view_up'    	# [▲][]                	🗗▲ Move to Split ↑
    'C-left' 	= 'jump_view_left'  	# [◀][]                	🗗◀ Move to Split ←
    'C-right'	= 'jump_view_right' 	# [▶][]                	🗗▶ Move to Split →
    'w'      	= 'rotate_view'     	#≝[ w][rotate_view]    	🗗⟳ Switch to next window
    'C-w'    	= 'rotate_view'     	#≝[^w][rotate_view]    	🗗⟳ Switch to next window
    'f'      	= 'vsplit'          	#≝[ v][vsplit]         	 🗗→ Split right  (Vertical)
    'C-f'    	= 'vsplit'          	#≝[^v][vsplit]         	 🗗→ Split right  (Vertical)
    'm'      	= 'hsplit'          	# [ s][]               	 🗗↓ Split bottom (Horizontal)
    'C-m'    	= 'hsplit'          	# [^s][]               	 🗗↓ Split bottom (Horizontal)
    'h'      	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'C-h'    	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'g'      	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'C-g'    	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'q'      	= 'wclose'          	#≝[ q][wclose]         	 ×🗔 Close          current window
    'C-q'    	= 'wclose'          	#≝[^q][wclose]         	 ×🗔 Close          current window
    'o'      	= 'wonly'           	#≝[ o][wonly]          	 ×∀🗔 Close all but current window
    'C-o'    	= 'wonly'           	#≝[^o][wonly]          	 ×∀🗔 Close all but current window
    'x'      	= 'wonly'           	# [ o][]               	 ×∀🗔 Close all but current window
    'C-x'    	= 'wonly'           	# [^o][]               	 ×∀🗔 Close all but current window
    'down'   	= 'jump_view_down'  	#≝[▼][jump_view_down]  	 Move to split below
    'up'     	= 'jump_view_up'    	#≝[▲][jump_view_up]    	 Move to split above
    'left'   	= 'jump_view_left'  	#≝[◀][jump_view_left]  	 Move to left split
    'right'  	= 'jump_view_right' 	#≝[▶][jump_view_right] 	 Move to right split

  [keys.select.'space'.'u'] #Ⓢ 🌐 ☰ⓤ LSPs and various ones
    'u'  	= 'remove_primary_selection'	# [ ⌥,]	×          the primary selection
    'i'  	= 'keep_primary_selection'  	# [  ,]	×∀ all but the primary selection (keep only)
    # LSP	                            	 
    'a'  	= 'format_selections'       	# [  =]	ℱ  Format selection (currently nonfunctional/disabled) (LSP)
    'q'  	= ':format'                 	# []   	ℱ∀ Format the file using the LSP formatter
    'j'  	= 'code_action'             	# [␣ a]	Ⓐ  Apply code action (LSP)
    's'  	= 'symbol_picker'           	# [␣ s]	🅂🗋 Open document  symbol picker (LSP) ⚛Ⓢ
    'w'  	= 'workspace_symbol_picker' 	# [␣⇧s]	🅂🗍 Open workspace symbol picker (LSP) ⚛Ⓢ
    'r'  	= 'rename_symbol'           	#≝[]   	✎  Rename symbol (LSP)
    'l'  	= 'goto_prev_diag'          	# [⧛ d]	🢔🛠  Diagnostic previous (LSP) !!! make these sticky
    ';'  	= 'goto_next_diag'          	# [⧚ d]	🛠🢖  Diagnostic next     (LSP) !!! make these sticky
    '.'  	= 'goto_first_diag'         	# [⧛⇧d]	⭰🛠 Diagnostic first    in document (LSP)
    '/'  	= 'goto_last_diag'          	# [⧚⇧d]	🛠⭲ Diagnostic last     in document (LSP)

  # [keys.select.'space'.'p']	#Ⓢ ☰ⓟ TBD



  [keys.select.'['] #Ⓢ Ⓝ[ ☰⧛ Unimpaired
    'd'    	= 'goto_prev_diag'   	# [ d] [goto_prev_diag]   	🢔🛠  Diagnostic previous (LSP)
    'D'    	= 'goto_first_diag'  	# [⇧d] [goto_first_diag]  	⭰🛠 Diagnostic first    in document (LSP)
    'f'    	= 'goto_first_diag'  	# [⇧d] []                 	⭰🛠 Diagnostic first    in document (LSP)
    'space'	= 'add_newline_above'	# [ ␣] [add_newline_above]	⭡␤  Add newline above
  [keys.select.']'] #Ⓢ Ⓝ] ☰⧚
    'd'    	= 'goto_next_diag'   	# [ d]  [goto_next_diag]  	🛠🢖  Diagnostic next (LSP)
    'D'    	= 'goto_last_diag'   	# [ ⇧]  [goto_last_diag]  	🛠⭲ Diagnostic last  in document (LSP)
    'f'    	= 'goto_last_diag'   	# [ ⇧]  []                	🛠⭲ Diagnostic last  in document (LSP)
    'space'	= 'add_newline_below'	# [ ␣] [add_newline_below]	⭣␤  Add newline below



# —————————————————————————————————————————————————————————————————————————————————————————————————



[keys.insert] #ⓘ
  ';'	= {j='normal_mode' }	# Maps `;k` to exit insert mode !!! flashes dialog during typing
  #ⓘ Test ——————————————————————————————————————————————————————————————————————
    # 'Escape'     	= 'normal_mode'	# [Escape] Switch to normal mode
    # 'A-x'        	= 'normal_mode'	# Maps Alt-X to enter normal mode
    # 'A-S-x'      	= 'normal_mode'	# Maps Alt-X to enter normal mode
    # 'A-X'        	= 'normal_mode'	# Maps Alt-X to enter normal mode
    # 'C-space'    	= 'normal_mode'	# !!! fails
    # 'C-S-space'  	= 'normal_mode'	# !!! fails
    # 'S-space'    	= 'normal_mode'	# !!! fails
    # 'A-backspace'	= 'normal_mode'	# !!! fails
    # 'S-z'        	= 'normal_mode'	# !!! fails
    # 'S-backspace'	= 'normal_mode'	# works
    # 'Z'          	= 'normal_mode'	# works
    # 'C-S-q'      	= 'normal_mode'	# Control-Shift-q → typable command :q! (:quit!), without saving
  #ⓘ Free ——————————————————————————————————————————————————————————————————————
    'C-p'  	= 'no_op'	# [] [move_line_up]         	move to previous line
    'A-d'  	= 'no_op'	# [] [delete_word_forward]  	#
    'C-d'  	= 'no_op'	# [] [delete_char_forward]  	#
    'A-b'  	= 'no_op'	# [] [move_prev_word_end]   	#
    'C-f'  	= 'no_op'	# [] [move_char_right]      	#
    'C-u'  	= 'no_op'	# [] [kill_to_line_start]   	#
    'C-e'  	= 'no_op'	# [] [goto_line_end_newline]	# ???useful vs selections
    # 'C-a'	= ''     	# [C-a] [goto_line_start]   	# ???useful vs selections


    'A-|'  	= 'shell_pipe'   	#⇧[Ⓝ⇧ \] [shell_pipe]   	Pipe each selection through shell command, replacing with output
    "A-\\" 	= 'shell_pipe_to'	# [Ⓝ ⌥\] []             	Pipe each selection into    shell command, ignoring       output
    # 'A-|'	= 'shell_pipe_to'	#⇧[Ⓝ⇧⌥\] [shell_pipe_to]	Pipe each selection into    shell command, ignoring       output

  #ⓘ Move ——————————————————————————————————————————————————————————————————————
    #ⓘ           	Compat with non-modal editors
    'C-left'     	= 'move_prev_long_word_start'  	# []
    'C-right'    	= 'move_next_long_word_start'  	# []
    'S-left'     	= 'extend_char_left'           	# [Ⓢh/◀] []
    'S-down'     	= 'extend_line_down'           	# [Ⓢj/▼] []
    'S-up'       	= 'extend_line_up'             	# [Ⓢk/▲] []
    'S-right'    	= 'extend_char_right'          	# [Ⓢl/▶] []
    'S-A-left'   	= 'extend_prev_word_start'     	# [Ⓢ  b] [] w← Extend previous word start
    'S-A-right'  	= 'extend_next_word_end'       	# [Ⓢ  e] [] w⇥ Extend next     word end
    # 'S-A-right'	= 'extend_next_word_start'     	# [Ⓢ  w] [] w→ Extend next     word start
    'S-C-left'   	= 'extend_prev_long_word_start'	# [Ⓢ ⇧b] [] W← Extend previous WORD start
    'S-C-right'  	= 'extend_next_long_word_start'	# [Ⓢ ⇧W] [] W→ Extend next     WORD start
    # 'S-C-right'	= 'extend_next_long_word_end'  	# [Ⓢ ⇧E] [] W⇥ Extend next    WORD end
    'C-home'     	= 'goto_file_start'            	# [g] []  	⇱ line number `<n>` else file start
    'C-end'      	= 'goto_last_line'             	# [e] []  	⇲ file end
    'C-S-tab'    	= 'goto_previous_buffer'       	#⇧[ⓖp][]  	⎗ !!! not working
    'C-tab'      	= 'goto_next_buffer'           	# [ⓖn][]  	⎘ !!! not working
    'C-pageup'   	= 'goto_previous_buffer'       	# [   ] []	⎗
    'C-pagedown' 	= 'goto_next_buffer'           	# [   ] []	⎘
    'A-pageup'   	= 'jump_backward'              	# [   ] []	⎗̡
    'A-pagedown' 	= 'jump_forward'               	# [   ] []	⎘̡


    # 'A-left' 	= 'move_prev_word_end'  	# [ⓘ⌥◀] [move_prev_word_end]  	⤝w Move   prev word end   (this start + space)
    # 'A-right'	= 'move_next_word_start'	# [ⓘ⌥▶] [move_next_word_start]	w⤞ Move   next word start (this end   + space)

    # 'C-b'	= 'move_char_left'	# [ ^b] [move_char_left]		⌫c × char ←

    'C-c'	= 'yank_main_selection_to_clipboard'	# [␣,⇧y] [toggle_comments]	📋 Yank main selection into system clipboard <i class='fa fa-clipboard'></i>
    'C-o'	= 'file_picker'                     	# [␣ f] [jump_backward]   	☰␜ Open file   picker
    'C-s'	= ':write'                          	# [Ⓝ ^s] [save_selection] 	💾 save file
    'C-n'	= ':new'                            	# [Ⓝ^n][move_line_down]   	🗋 new buffer
    'C-/'	= 'toggle_comments'                 	# [Ⓝ^c][] un-/comment the selections  #!!! doesn't work :(

  #ⓘ Change ——————————————————————————————————————————————————————————————————————
    #            	Delete
    'C-l'        	= 'delete_char_backward'         	# [ ^h] []                   	⌫c × char ←
    'C-;'        	= 'delete_char_forward'          	# [ ^d] [] !!!fails          	⌦c × char →
    'del'        	= 'delete_selection'             	# [Ⓝd] [delete_char_forward] 	×▋??? might be better to delete word/till line ends after selection
    'C-h'        	= ['extend_prev_long_word_start',	# [] [delete_char_backward]  	⌫W
                 	   'delete_selection']           	#                            	 × Word ←
    'A-h'        	= ['extend_prev_word_start',     	# [] []                      	⌫w
                 	   'delete_selection']           	#                            	× word ←
    'A-del'      	= ['extend_next_word_end',       	# [] []                      	⌦w
                 	   'delete_selection']           	#                            	× word →
    'A-backspace'	= ['extend_prev_word_start',     	# [] []                      	⌫w
                 	   'delete_selection']           	#                            	× word ← !!! in wezterm ^h is bound to !⌫
    'C-backspace'	= ['extend_prev_long_word_start',	# [] []                      	⌫W
                 	   'delete_selection']           	#                            	 × Word ←
    'C-del'      	= ['extend_next_long_word_end',  	# [] []                      	⌦W
                 	   'delete_selection']           	#                            	 × Word →
    'C-a'        	= 'kill_to_line_start'           	# [ⓘ ^u] [goto_line_start]   	⭰× × to line ⭰ ??? better than ∀▋select_all
    'C-A'        	= 'kill_to_line_end'             	# [ⓘ ^k] []                  	×⭲ × to line ⭲
    'C-j'        	= 'kill_to_line_start'           	# [ⓘ ^u] [kill_to_line_start]	⭰× × to line ⭰
    'C-k'        	= 'kill_to_line_end'             	# [ⓘ ^k] [kill_to_line_end]  	×⭲ × to line ⭲
    # 'A-h'      	= 'delete_word_backward'         	# [ ^w][]                    	⌫w × word ← !!! ignore newlines
    # 'A-del'    	= 'delete_word_forward'          	# [⌥ d] []                   	⌦w × word →
    #            	                                 	#
    # 'C-r'      	= 'insert_register'              	# [ⓘ ^r] [insert_register]	📋r Paste register
    'S-ret'      	= 'open_below'                   	# [  o] []                	⭣␤ Open new line below selection
    # 'ret'      	= 'open_above'                   	#⇧[⇧ o] []                	⭡␤ Open new line above selection
    # 'ret'      	= 'insert_newline'               	# [  ⏎] [insert_newline]  	 ␤ Insert new line


    'C-i'	= 'completion'	# [ ^x] []	⎁ Autocomplete
    'C-m'	= 'decrement' 	# [Ⓝ ^x][]	⊖ o̠ Decrement object (number) under cursor <span class='cd'>o&#800;</span>
    'C-,'	= 'increment' 	# [Ⓝ ^a][]	⊕ o̟ Increment object (number) under cursor <span class='cd'>o&#799;</span>

  ###ⓘ Normal mode copy on Alt
  ##ⓘ    	Misc ——————————————————————————————————————————————————————————————————————
    'A-c'	= 'yank'                            	# [  c] [change_selection]            	🗐 Yank selection <i class='fa fa-copy'></i>
    'A-C'	= 'yank_main_selection_to_clipboard'	#⇧[␣,⇧y] [copy_selection_on_next_line]	📋 Yank main selection into system clipboard <i class='fa fa-clipboard'></i>
  ##ⓘ Move ——————————————————————————————————————————————————————————————————————
    #ⓘ   	Cursor@Home
    'A-j'	= 'move_line_down'      	# [ⓘ ^n] [move_line_down]        	▼
    'A-k'	= 'move_line_up'        	# [ⓘ ^p] [move_line_up]          	▲
    'A-l'	= 'move_char_left'      	# [ⓘ ^b] [move_char_right]       	◀
    'A-;'	= 'move_char_right'     	# [ⓘ ^f] [collapse_selection]    	▶
    'A-m'	= 'half_page_down'      	# [Ⓝ ^d] [☰🧩]                    	⤈ Move half page down
    'A-,'	= 'half_page_up'        	# [Ⓝ ^u] [keep_primary_selection]	⤉ Move half page up
    'A-a'	= 'extend_to_line_start'	# [ⓈHome] [append_mode]          	⭰▋ Move     line start + select # goto_line_start
    'A-A'	= 'extend_to_line_end'  	# [ⓈEnd] [append_to_line]        	⭲▋ Move     line end   + select # goto_line_end

    #ⓘ   	File/jumplist
    'A-1'	= 'goto_previous_buffer'	# [ⓖp] [] 	⎗
    'A-2'	= 'goto_next_buffer'    	# [ⓖn] [] 	⎘
    'A-3'	= 'jump_backward'       	# [Ⓝ^o] []	⎗̡ Jump backward on the jumplist
    'A-4'	= 'jump_forward'        	# [Ⓝ^i] []	⎘̡ Jump forward  on the jumplist

    #ⓘ     	Word
    'A-d'  	= 'move_prev_word_start'     	# [Ⓝ  b] [delete_word_forward]       	🢔w Move   this word start
    'A-f'  	= 'move_next_word_end'       	# [Ⓝ  e] [move_next_word_start]      	w🢖 Move   this word end
    'A-D'  	= 'move_prev_long_word_start'	#⇧[Ⓝ⇧ b] []                          	🢔W Move   this WORD start
    'A-F'  	= 'move_next_long_word_end'  	#⇧[Ⓝ⇧ e] [find_prev_char]            	W🢖 Move   this WORD end
    # 'A-d'	= 'move_prev_word_end'       	# [ⓘ⌥b, ⌥◀] [delete_selection_noyank]	⤝w Move   prev word end (this start + space)
    # 'A-f'	= 'move_next_word_start'     	# [ⓘ⌥f] []                           	w⤞ Move   next word start (this end + space)

    #ⓘ     	Line
    # 'A-G'	= 'goto_line'   	#⇧[Ⓝ⇧ g] []	⮊⎯ go to line # <n> (set <n> in advance), use Ⓒ<n>⏎
    'A-G'  	= 'command_mode'	#⇧[Ⓝ⇧ ;] []	Ⓒ Enter command mode
    'A-:'  	= 'command_mode'	#⇧[Ⓝ⇧ ;] []	Ⓒ Enter command mode

    'A-r'	= 'repeat_last_motion'	# [Ⓝ ⌥.] [replace]	∞ Repeat last motion (f/t/m)

    #'A->'	= 'no_op'	# [Ⓝ⇧ [] [indent] 	🢔¶ Move paragraph start #!!!not implemented yet
    #'A-?'	= 'no_op'	# [Ⓝ⇧ ]] [rsearch]	¶🢖 Move paragraph end   #!!!not implemented yet

    #ⓘ     	Find
    'A-w'  	= 'find_next_char'  	# [Ⓝ  f] [move_next_word_start]     	🔎   Find       next     char <i class='mss mss-Search-3'></i>
    'A-W'  	= 'find_prev_char'  	#⇧[Ⓝ⇧ f] [move_next_long_word_start]	🔍   Find       previous char <i class='fa fa-search'></i>
    # 'A-w'	= 'find_till_char'  	# [Ⓝ  t] []                         	🔎₋₁ Find 'till next     char <i class='mss mss-Search-3'></i>₋
    # 'A-W'	= 'till_prev_char'  	#⇧[Ⓝ⇧ t] []                         	🔍₋₁ Find 'till previous char <i class='fa fa-search'></i>₋
    'A-S'  	= 'rsearch'         	# [Ⓝ⇧ /] [split_selection]          	🔍𝖗 for previous regex pattern
    'A-s'  	= 'search'          	#⇧[Ⓝ  /] [select_regex]             	🔎𝖗 for          regex pattern
    'A-.'  	= 'search_prev'     	# [Ⓝ⇧ n] [repeat_last_change]       	🢔◎ ◎͔ Select previous search match
    'A-/'  	= 'search_next'     	# [Ⓝ  n] [search]                   	◎🢖 ◎͕ Select next     search match
    'A-8'  	= 'search_selection'	# [Ⓝ⇧ 8] [<8>]                      	𝖗🢔▋ Use current selection as the search pattern !!! blocked by ∀* implementation
    # '*'  	= 'search_selection'	#⇧[Ⓝ⇧ 8] [search_selection]         	𝖗🢔▋ Use current selection as the search pattern

  ##ⓘ Select ——————————————————————————————————————————————————————————————————————
    'A-e'	= 'select_mode'	# [Ⓝ  v] [move_next_word_end]	Ⓢ ✠ Enter select (extend) mode (←↑↓→ in Web) alt <i class='fa fa-arrows'></i>

    # Compat with non-modal editors
    # 'C-a'	= ['save_selection','select_all']	# [Ⓝ⇧ 5]  [increment]	∀▋ Select entire file ???better than ⭰× × to line ⭰

    'A-S-down'	= 'copy_selection_on_next_line'	# [Ⓝ⇧ c]  []	🠷 Copy selection onto the next     line (add cursor below)
    'A-S-up'  	= 'copy_selection_on_prev_line'	# [Ⓝ⇧⌥c] [] 	🠵 Copy selection onto the previous line (add cursor above)

    'C-g'  	= 'save_selection'	# [Ⓝ  ^s] []	🖈 Save the current selection to the jumplist
    # 'A-G'	= 'save_selection'	# [Ⓝ  ^s] []	🖈 Save the current selection to the jumplist

    'A-E'  	= 'extend_to_line_bounds'	#⇧[Ⓝ  x] [move_next_long_word_end]	⎯ Extend selection to line bounds (line-wise selection)
    'A-J'  	= 'extend_line'          	# [Ⓝ  x] [join_selections]        	⮒ Select current line, if already selected, extend to next line
    # 'A-e'	= 'extend_to_line_bounds'	# [Ⓝ⇧ x] []                       	⎯ Extend selection to line bounds (line-wise selection)
    # ''   	= 'expand_selection'     	# [Ⓝ] [expand_selection]       Expand selection to parent syntax node TODO: pick a key (**TS**)
    # 'A-5'	= 'select_paragraph'     	# [Ⓝ  ] [<5>]        	¶▋ Select this paragraph !!! blocked by ∀* implementation !!! command not implemented yet
    'A-%'  	= 'select_all'           	#⇧[Ⓝ⇧ 5] [select_all]	∀▋ Select entire file

    # 'A-j'	= 'copy_selection_on_next_line'	# [Ⓝ⇧ c]  []                         	🠷 Copy selection onto the next     line (add cursor below)
    # 'A-k'	= 'copy_selection_on_prev_line'	# [Ⓝ⇧⌥c] []                          	🠵 Copy selection onto the previous line (add cursor above)
    # 'A-s'	= 'select_regex'               	# [Ⓝ  s] [split_selection_on_newline]	𝖗▋ Select all regex matches inside selections
    'A-N'  	= 'split_selection'            	#⇧[Ⓝ⇧ s] [search_prev]               	䷖𝖗 on regex matches
    # 'A-n'	= 'split_selection_on_newline' 	# [Ⓝ ⌥s] []                          	䷖␤ (﹨␤)

    "A-'"  	= 'collapse_selection'        	# [Ⓝ  ;] []               	🢖🢔 Collapse selection onto a single cursor
    # "A-'"	= 'flip_selections'           	# [Ⓝ ⌥;][]                	⮀ Flip selection cursor and anchor
    # 'A-a'	= 'flip_selections'           	#⇧[Ⓝ ⌥;][]                	⮀ Flip selection cursor and anchor
    # 'A-A'	= 'flip_selections'           	#⇧[Ⓝ ⌥;][]                	⮀ Flip selection cursor and anchor
    # 'A-l'	= 'rotate_selections_backward'	# [Ⓝ⇧ 9] []               	⟲ Rotate main selection backward
    # 'A-;'	= 'rotate_selections_forward' 	# [Ⓝ⇧ 0] [flip_selections]	⟳ Rotate main selection forward
    # 'A-u'	= 'remove_primary_selection'  	# [Ⓝ ⌥,] [earlier]        	×         the primary selection
    # 'A-i'	= 'keep_primary_selection'    	# [Ⓝ  ,] []               	×∀ all but the primary selection (keep only)
    # 'A-U'	= 'no_op'                     	#⇧[Ⓝ ⌥,] [earlier]        	×× undo remove selection (!!!not implemented yet)
    'A-K'  	= 'keep_selections'           	#⇧[Ⓝ⇧ k] [keep_selections]	ᵏ𝖗 selections not matching the regex (keep)
    'A-L'  	= 'remove_selections'         	#⇧[Ⓝ⇧⌥k] []               	×𝖗 selections     matching the regex
    # 'A-:'	= 'ensure_selections_forward' 	#⇧[Ⓝ⇧⌥;] []               	???

    # '_'    	= 'trim_selections'	#⇧[Ⓝ⇧ -] [trim_selections]	✁Trim whitespace from the selection
    'A-minus'	= 'trim_selections'	# [Ⓝ⇧ -] []               	✁Trim whitespace from the selection
    # '+'    	= 'dupe_selections'	#⇧[Ⓝ⇧ =] [dupe_selections]	🗐Duplicate selection (currently nonfunctional/disabled)

  ##ⓘ Change ——————————————————————————————————————————————————————————————————————
    'S-del'	= 'delete_selection_noyank'	# [ ⌥d] []              	🕱▋
    'S-ret'	= 'open_above'             	#⇧[⇧ o] []              	⭡␤ Open new line above selection
    'A-ret'	= 'open_below'             	# [  o] [insert_newline]	⭣␤ Open new line below selection
    'C-ret'	= 'open_below'             	# [  o] [insert_newline]	⭣␤ Open new line below selection

    'A-6'  	= 'delete_char_forward'    	# [Ⓝ ⌦] [<5>]                  	⌦ !!! blocked by ∀* implementation
    'A-x'  	= 'delete_selection'       	# [Ⓝ  d] [extend_line]         	×▋
    # 'A-x'	= 'delete_selection_noyank'	# [Ⓝ ⌥d] []                    	🕱▋ (...without yanking)
    # 'A-c'	= 'change_selection'       	# [c] [change_selection_noyank]	Δ
    # 'A-h'	= 'delete_char_backward'   	# [⌫] [move_char_left]         	⌫c × char ←
    'A-H'  	= 'delete_char_forward'    	#⇧[⌦] []                       	⌦c × char →
    #'A-h' 	= ['move_prev_word_start', 	# [] []                        	⌫w
    #      	   'delete_selection']     	#                              	× word ←
    #'A-H' 	= ['move_next_word_end',   	# [] []                        	⌦w
    #      	   'delete_selection']     	#                              	× word →
    'A-X'  	= 'join_selections'        	#⇧[⇧ j] [extend_to_line_bounds]	×␤ ⨝ Join lines inside selection

    'A-t'	= 'replace'            	# [Ⓝ  r] [find_till_char]	🗘  Replace with a character
    'A-T'	= 'replace_with_yanked'	#⇧[Ⓝ⇧ r] [till_prev_char]	🗘ʸ Replace with yanked text

    'A-B'  	= 'switch_case'        	#⇧[Ⓝ⇧ `] [move_prev_long_word_start]	𝕒⇋𝔸 (selection)
    # 'C-b'	= 'switch_to_uppercase'	#⇧[Ⓝ⇧⌥`] [move_char_left]           	𝕒𝔸 (selection)
    'A-`'  	= 'switch_to_lowercase'	# [Ⓝ  `] [switch_to_lowercase]      	𝕒𝔸  (selection)
    'A-~'  	= 'switch_case'        	#⇧[Ⓝ⇧ `] [switch_case]              	𝕒⇋𝔸 (selection)
    # '~'  	= 'switch_to_uppercase'	# [Ⓝ⇧⌥`] [switch_case]              	𝕒𝔸 (selection)
    'A-^'  	= 'switch_to_uppercase'	# [Ⓝ⇧⌥`] []                         	𝕒𝔸 (selection)

    # 'A-.'	= 'unindent'	# [Ⓝ⇧,][repeat_last_motion]	⇚ (selection)
    # 'A-/'	= 'indent'  	# [Ⓝ⇧.][]                  	⇛ (selection)

    # 'q'	= 'record_macro'   	# [Ⓝ  q] [record_macro]      	⏺ Start/stop macro recording to the selected register
    # 'Q'	= 'replay_macro'   	#⇧[Ⓝ⇧ q] replay_macro]       	▶  Play back a recorded macro from the selected register
    'A-"'	= 'select_register'	# [Ⓝ'<reg>] [select_register]	®  Select a register to yank to or paste from

    # 'A-b'	= 'N/Arepeat_last_change'             	#⇧[Ⓝ  .] [move_prev_word_start]	∞ Repeat last change !!! no command yet
    'A-I'  	= 'open_above'                        	#⇧[Ⓝ⇧ o] [prepend_to_line]     	⭡␤ Open new line above selection
    'A-O'  	= 'open_below'                        	# [Ⓝ  o] [append_to_line]      	⭣␤ Open new line below selection
    'A-u'  	= 'undo'                              	# [Ⓝ  u] [undo mode]           	⎌ Undo change
    'A-y'  	= 'redo'                              	# [Ⓝ⇧ u] [yank]                	↷ Redo change
    'A-U'  	= 'earlier'                           	#⇧[Ⓝ ⌥u] [redo]                	🕘 Move backward in history   <i class='fa fa-history'></i>
    'A-Y'  	= 'later'                             	#⇧[Ⓝ⇧⌥u] []                    	🕒 Move forward in history ⏱ <i class='fa fa-clock-o'></i>
    'C-y'  	= 'redo'                              	# [Ⓝ⇧ u] []                    	↷ Redo change !!!not working
    'A-v'  	= 'paste_after'                       	# [Ⓝ  p] [select_mode]         	📋⤹ Paste after selection
    'C-v'  	= 'paste_clipboard_after'             	# [Ⓝ␣ p] []                    	📋⤹ Paste after selection
    'A-V'  	= 'paste_before'                      	# [Ⓝ⇧ p] []                    	⤸📋 Paste before selection
    'C-z'  	= 'undo'                              	# [Ⓝ  u] []                    	⎌ Undo change
    'C-Z'  	= 'redo'                              	#⇧[Ⓝ⇧ u] []                    	↷ Redo change !!!not working
    'C-x'  	= ['yank_main_selection_to_clipboard',	# []   [completion]            	×📋
           	   'delete_selection']                	#                              	cut to clipboard <i class='fa fa-clipboard'></i>

    #ⓘ   	Select manipulation ————————————————————————————————————————————————————————————————————
    'A-('	= 'rotate_selection_contents_backward'	#⇧[Ⓝ⇧⌥9] [rotate_selections_backward]	⟲ Rotate selection contents backward
    'A-)'	= 'rotate_selection_contents_forward' 	#⇧[Ⓝ⇧⌥0] [rotate_selections_forward] 	⟳ Rotate selection contents forward
    'A-7'	= 'align_selections'                  	# [Ⓝ⇧ 7] [<7>]                       	⥂ Align selection in columns !!! blocked by ∀* implementation
    'A-&'	= 'align_selections'                  	#⇧[Ⓝ⇧ 7] [align_selections]          	⥂ Align selection in columns
    'A-='	= 'format_selections'                 	# [Ⓝ  =] [format_selections]         	ℱ Format selection (currently nonfunctional/disabled) (LSP)

    'A-$'	= 'shell_keep_pipe'	# [Ⓝ⇧ 4] [shell_keep_pipe] $ᵏ| Pipe each selection into shell command, keep selections where command returned 0

    #ⓘ   	Shell
    'A-!'	= 'shell_insert_output'	#⇧[Ⓝ⇧  1] [shell_insert_output] 🢔$ Run shell command, inserting output before each selection
    'A-@'	= 'shell_append_output'	#⇧[Ⓝ⇧⌥1] []                    $🢖 Run shell command, appending output after  each selection


  ### ☰Minor modes
  [keys.insert.'A-p'] #ⓘ 'view' [Ⓝ  z] [paste_after] ☰👁 View mode intended for scrolling and manipulating the view without changing the selection
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    'z'       	= 'no_op'            	# [] [align_view_center] 	#
    'c'       	= 'no_op'            	# [] [align_view_center] 	#
    't'       	= 'no_op'            	# [] [align_view_top]    	#
    'b'       	= 'no_op'            	# [] [align_view_bottom] 	#
    'b'       	= 'no_op'            	# [] [page_up]           	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
  [keys.insert.'A-P'] #ⓘ 'view sticky' ⇧[Ⓝ⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    'z'       	= 'no_op'            	# [] [align_view_center] 	#
    'c'       	= 'no_op'            	# [] [align_view_center] 	#
    't'       	= 'no_op'            	# [] [align_view_top]    	#
    'b'       	= 'no_op'            	# [] [align_view_bottom] 	#
    'b'       	= 'no_op'            	# [] [page_up]           	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]
  [keys.insert.'A-Z'] #ⓘ 'view sticky' ⇧[Ⓝ⇧ z] [paste_before] ☰👁ₛ 'sticky', persistent
    'u'       	= 'align_view_bottom'	# [b] []                 	🗔⭳ Align line to Screen bottom
    'i'       	= 'align_view_top'   	# [t] []                 	🗔⭱ Align line to Screen top
    'n'       	= 'align_view_center'	# [z] [align_view_center]	🗔·| Align line to center (vertically)
    'h'       	= 'align_view_middle'	# [m] [align_view_middle]	🗔·⎯ Align line to Screen middle (horizontally)
    'l'       	= 'align_view_middle'	# [m] []                 	🗔·⎯ Align line to Screen middle (horizontally)
    'down'    	= 'scroll_down'      	# [down] [scroll_down]   	▼ Scroll ↓
    'up'      	= 'scroll_up'        	# [up]   [scroll_up]     	▲ Scroll ↑
    'j'       	= 'scroll_down'      	# [j] [scroll_down]      	▼ Scroll ↓
    'k'       	= 'scroll_up'        	# [k] [scroll_up]        	▲ Scroll ↑
    'm'       	= 'half_page_down'   	# [d] [align_view_middle]	⤈ Move half page ↓
    ','       	= 'half_page_up'     	# [u] []                 	⤉ Move half page ↑
    'J'       	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'K'       	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'C-j'     	= 'page_down'        	# [f] []                 	⇟ Move      page ↓
    'C-k'     	= 'page_up'          	# [b] []                 	⇞ Move      page ↑
    'pageup'  	= 'page_down'        	# [pageup] [page_down]   	⇟ Move      page ↓
    'pagedown'	= 'page_up'          	# [pagedown] [page_up]   	⇞ Move      page ↑
    'z'       	= 'no_op'            	# [] [align_view_center] 	#
    'c'       	= 'no_op'            	# [] [align_view_center] 	#
    't'       	= 'no_op'            	# [] [align_view_top]    	#
    'b'       	= 'no_op'            	# [] [align_view_bottom] 	#
    'b'       	= 'no_op'            	# [] [page_up]           	# !!!duplciate with align_view_bottom
    'C-d'     	= 'no_op'            	# [] [half_page_down]
    'C-u'     	= 'no_op'            	# [] [half_page_up]
    'C-f'     	= 'no_op'            	# [] [page_down]
    'C-b'     	= 'no_op'            	# [] [page_up]

  [keys.insert.'A-g'] #ⓘ [Ⓝ  g] [] ⓖ☰⮊ Goto mode Jumps to various locations
    'j'  	= 'goto_last_line'          	# [e] []                        	⇲ file end
    'k'  	= 'goto_file_start'         	# [g] [goto_line_end]           	⇱ line number `<n>` else file start
    'g'  	= 'goto_file_start'         	# [g] [goto_file_start]         	⇱ line number `<n>` else file start
    's'  	= 'goto_first_nonwhitespace'	# [s] [goto_first_nonwhitespace]	line start 1ₛₜ non-whitespace char
    'a'  	= 'goto_first_nonwhitespace'	# [s] [goto_last_accessed_file] 	line start 1ₛₜ non-whitespace char
    'l'  	= 'goto_line_start'         	# [h] []                        	line start ⭰ !!! change to 🢔¶ when implemented
    ';'  	= 'goto_line_end'           	# [l] []                        	line end   ⭲ !!! change to ¶🢖 when implemented
    'f'  	= 'goto_file'               	# [f] [goto_file]               	files in the selection
    'm'  	= 'goto_window_bottom'      	# [b] [goto_last_modified_file] 	🗔⭳ screen bottom
    ','  	= 'goto_window_top'         	# [t] []                        	🗔⭱ screen top
    'n'  	= 'goto_window_center'      	# [c] [goto_next_buffer]        	🗔· screen middle
    'd'  	= 'goto_definition'         	# [d] [goto_definition]         	≝      definition (LSP)
    'F12'	= 'goto_definition'         	# [d] []                        	≝      definition (LSP)
    'e'  	= 'goto_type_definition'    	# [y] [goto_last_line]          	≝ type definition (LSP)
    'y'  	= 'goto_type_definition'    	# [y] [goto_type_definition]    	≝ type definition (LSP)
    'r'  	= 'goto_reference'          	# [r] [goto_reference]          	🅁※ references (LSP)
    'i'  	= 'goto_implementation'     	# [i] [goto_implementation]     	🄸 implementation (LSP)
    't'  	= 'goto_implementation'     	# [i] [goto_window_top]         	🄸 implementation (LSP)
    'c'  	= 'goto_last_accessed_file' 	# [a] [goto_window_center]      	🕮␜ file last accessed/alternate
    'v'  	= 'goto_last_modified_file' 	# [m] []                        	✎␜ file last modified/alternate
    '1'  	= 'goto_previous_buffer'    	# [p] []                        	buffer previous !!! blocked by ∀* universal argument
    '2'  	= 'goto_next_buffer'        	# [n] []                        	buffer next     !!! blocked by ∀* universal argument
    '3'  	= 'jump_backward'           	# [] []                         	⎗̡ Jump backward on the jumplist !!! blocked by ∀* implementation
    '4'  	= 'jump_forward'            	# [] []                         	⎘̡ Jump forward  on the jumplist !!! blocked by ∀* implementation
    'u'  	= 'goto_last_modification'  	# [.] []                        	🕘 last modification in current file <i class='fa fa-history'></i>
    '.'  	= 'goto_last_modification'  	# [.] [goto_last_modification]  	🕘 last modification in current file <i class='fa fa-history'></i>
    'b'  	= 'no_op'                   	# [] [goto_window_bottom]       	#
    'h'  	= 'no_op'                   	# [] [goto_line_start]          	#
    'p'  	= 'no_op'                   	# [] [goto_previous_buffer]     	#

  [keys.insert.'A-n'] #ⓘ [Ⓝ  m] [] ☰🧩  Match mode ☰<i class='fa fa-puzzle-piece'></i>
    'n'  	= 'match_brackets'          	# [  m] []	🢔()🢖 Goto matching   bracket (TS)
    '.'  	= 'match_brackets'          	# [  ] [] 	🢔(   Goto next left  bracket (TS) !!!not implemented
    '/'  	= 'match_brackets'          	# [  ] [] 	  )🢖 Goto next right bracket (TS) !!!not implemented
    'i'  	= 'surround_add'            	# [  s] []	(+)  Surround current selection with <char>
    't'  	= 'surround_replace'        	# [  r] []	(🗘) Replace surround character <from> with <to>
    'x'  	= 'surround_delete'         	# [  d] []	(×)  Delete  surround character <char>
    'e'  	= 'select_textobject_around'	# [  a] []	🢔O🢖  Select around textobject
    'a'  	= 'select_textobject_inner' 	# [  i] []	🢖O🢔  Select inside textobject
    'A-n'	= 'match_brackets'          	# [  m] []	🢔()🢖 Goto matching   bracket (TS)
    'A-.'	= 'match_brackets'          	# [  ] [] 	🢔(   Goto next left  bracket (TS) !!!not implemented
    'A-/'	= 'match_brackets'          	# [  ] [] 	  )🢖 Goto next right bracket (TS) !!!not implemented
    'A-i'	= 'surround_add'            	# [  s] []	(+)  Surround current selection with <char>
    'A-t'	= 'surround_replace'        	# [  r] []	(🗘) Replace surround character <from> with <to>
    'A-x'	= 'surround_delete'         	# [  d] []	(×)  Delete  surround character <char>
    'A-e'	= 'select_textobject_around'	# [  a] []	🢔O🢖  Select around textobject
    'A-a'	= 'select_textobject_inner' 	# [  i] []	🢖O🢔  Select inside textobject

  [keys.insert.'C-w'] #ⓘ [Ⓝ^ w] [] ☰🗔  Window mode
    's'      	= 'no_op'           	# [  ][hsplit]         	#
    'C-s'    	= 'no_op'           	# [  ][hsplit]         	#
    'v'      	= 'no_op'           	# [  ][vsplit]         	#
    'C-v'    	= 'no_op'           	# [  ][vsplit]         	#
    'F'      	= 'no_op'           	#⇧[  ][goto_file]      	#
    'j'      	= 'jump_view_down'  	# [ j][jump_view_down] 	🗗▼ Move to Split ↓
    'k'      	= 'jump_view_up'    	# [ k][jump_view_up]   	🗗▲ Move to Split ↑
    'l'      	= 'jump_view_left'  	# [ h][jump_view_right]	🗗◀ Move to Split ←
    ';'      	= 'jump_view_right' 	# [ l][]               	🗗▶ Move to Split →
    'C-j'    	= 'jump_view_down'  	# [^j][jump_view_down] 	🗗▼ Move to Split ↓
    'C-k'    	= 'jump_view_up'    	# [^k][jump_view_up]   	🗗▲ Move to Split ↑
    'C-l'    	= 'jump_view_left'  	# [^h][jump_view_right]	🗗◀ Move to Split ←
    'C-;'    	= 'jump_view_right' 	# [^l][]               	🗗▶ Move to Split → #!!!fails
    'C-down' 	= 'jump_view_down'  	# [▼][]                	🗗▼ Move to Split ↓
    'C-up'   	= 'jump_view_up'    	# [▲][]                	🗗▲ Move to Split ↑
    'C-left' 	= 'jump_view_left'  	# [◀][]                	🗗◀ Move to Split ←
    'C-right'	= 'jump_view_right' 	# [▶][]                	🗗▶ Move to Split →
    'w'      	= 'rotate_view'     	# [ w][rotate_view]    	🗗⟳ Switch to next window
    'C-w'    	= 'rotate_view'     	# [^w][rotate_view]    	🗗⟳ Switch to next window
    'f'      	= 'vsplit'          	# [ v][vsplit]         	 🗗→ Split right  (Vertical)
    'C-f'    	= 'vsplit'          	# [^v][vsplit]         	 🗗→ Split right  (Vertical)
    'm'      	= 'hsplit'          	# [ s][]               	 🗗↓ Split bottom (Horizontal)
    'C-m'    	= 'hsplit'          	# [^s][]               	 🗗↓ Split bottom (Horizontal)
    'h'      	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'C-h'    	= 'goto_file_hsplit'	# [ f][jump_view_left] 	 ⮋❚␜ Go to files in the selection in horizontal splits
    'g'      	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'C-g'    	= 'goto_file_vsplit'	# [⇧f][]               	 ⮊❚␜ Go to files in the selection in vertical   splits
    'q'      	= 'wclose'          	# [ q][wclose]         	 ×🗔 Close          current window
    'C-q'    	= 'wclose'          	# [^q][wclose]         	 ×🗔 Close          current window
    'o'      	= 'wonly'           	# [ o][wonly]          	 ×∀🗔 Close all but current window
    'C-o'    	= 'wonly'           	# [^o][wonly]          	 ×∀🗔 Close all but current window
    'x'      	= 'wonly'           	# [ o][]               	 ×∀🗔 Close all but current window
    'C-x'    	= 'wonly'           	# [^o][]               	 ×∀🗔 Close all but current window
    # 'down' 	= 'jump_view_down'  	# [▼][jump_view_down]  	 Move to split below
    # 'up'   	= 'jump_view_up'    	# [▲][jump_view_up]    	 Move to split above
    # 'left' 	= 'jump_view_left'  	# [◀][jump_view_left]  	 Move to left split
    # 'right'	= 'jump_view_right' 	# [▶][jump_view_right] 	 Move to right split

  [keys.insert.'A-space'] #ⓘ [Ⓝ  ␣] [] ☰␣  Space mode !!!fails
    'p'    	= 'no_op'                            	# [] [paste_clipboard_after] 	📋⤸ Paste before selections
    'P'    	= 'no_op'                            	#⇧[] [paste_clipboard_before]	📋⤹ Paste after  selections
    'f'    	= 'file_picker'                      	#                            	☰␜ Open file   picker
    'b'    	= 'buffer_picker'                    	#                            	☰b Open buffer picker
    'k'    	= 'hover'                            	#                            	? Show documentation for item under cursor in a popup (LSP)
    's'    	= 'symbol_picker'                    	#                            	🅂🗋 Open document  symbol picker (LSP) ⚛Ⓢ
    'S'    	= 'workspace_symbol_picker'          	#                            	🅂🗍 Open workspace symbol picker (LSP)
    'a'    	= 'code_action'                      	#                            	Ⓐ Apply code action (LSP)
    "'"    	= 'last_picker'                      	#                            	☰∞ Open last fuzzy picker
    'v'    	= 'paste_clipboard_after'            	# [␣  p][]                   	📋⤹ Paste after  selections
    'V'    	= 'paste_clipboard_before'           	#⇧[␣ ⇧p][]                   	📋⤸ Paste before selections
    'C-v'  	= 'replace_selections_with_clipboard'	# [␣ ⇧r][]                   	🗘📋 Replace selections by clipboard contents
    'R'    	= 'replace_selections_with_clipboard'	#                            	🗘📋 Replace selections by clipboard contents
    'y'    	= 'yank_joined_to_clipboard'         	#                            	⨝📋 Join and yank selections to clipboard
    'Y'    	= 'yank_main_selection_to_clipboard' 	#                            	📋 Yank main selection to clipboard
    '/'    	= 'global_search'                    	#                            	🔎🗁 Global search in workspace folder
    'r'    	= 'rename_symbol'                    	#                            	✎ Rename symbol (LSP)
    'space'	= 'insert_mode'                      	# [  i] []                   	⁁⤸ Insert before selection !!! not implemented yet

  [keys.insert.'A-['] #ⓘ Ⓝ[ ☰⧛ Unimpaired
    'd'    	= 'goto_prev_diag'   	# [ d] [goto_prev_diag]   	🢔🛠  Diagnostic previous (LSP)
    'D'    	= 'goto_first_diag'  	# [⇧d] [goto_first_diag]  	⭰🛠 Diagnostic first    in document (LSP)
    'f'    	= 'goto_first_diag'  	# [⇧d] []                 	⭰🛠 Diagnostic first    in document (LSP)
    'space'	= 'add_newline_above'	# [ ␣] [add_newline_above]	⭡␤  Add newline above
  [keys.insert.'A-]'] #ⓘ Ⓝ] ☰⧚
    'd'    	= 'goto_next_diag'   	# [ d]  [goto_next_diag]  	🛠🢖  Diagnostic next (LSP)
    'D'    	= 'goto_last_diag'   	# [ ⇧]  [goto_last_diag]  	🛠⭲ Diagnostic last  in document (LSP)
    'f'    	= 'goto_last_diag'   	# [ ⇧]  []                	🛠⭲ Diagnostic last  in document (LSP)
    'space'	= 'add_newline_below'	# [ ␣] [add_newline_below]	⭣␤  Add newline below


# —————————————————————————————————————————————————————————————————————————————————————————————————



  # Picker  Keys to use within picker. Remapping currently not supported.
  # 'Up, C-k, C-p'  	= Previous entry
  # 'Down, C-j, C-n'	= Next     entry
  # 'C-space'       	= Filter options
  # 'Enter'         	= Open selected
  # 'C-s'           	= Open horizontally
  # 'C-v'           	= Open vertically
  # 'Escape, C-c'   	= Close picker

  # Prompt Keys to use within prompt, Remapping currently not supported.
  # 'Escape, C-c'   	= Close prompt
  # 'A-b, A-Left'   	= Backward a word
  # 'C-b, Left'     	= Backward a char
  # 'A-f, A-Right'  	= Forward  a word
  # 'C-f, Right'    	= Forward  a char
  # 'C-e, End'      	= Move prompt end
  # 'C-a, Home'     	= Move prompt start
  # 'C-w'           	= Delete previous word
  # 'A-d'           	= Delete next     word
  # 'C-u'           	= Delete to line start
  # 'C-k'           	= Delete to line end
  # 'backspace, C-h'	= Delete previous char
  # 'del, C-d'      	= Delete next     char
  # 'C-s'           	= Insert a word under doc cursor, may be changed to C-r C-w later
  # 'C-p, Up'       	= Select previous history
  # 'C-n, Down'     	= Select next     history
  # 'Tab'           	= Select next     completion item
  # 'BackTab'       	= Select previous completion item
  # 'Enter'         	= Open selected



# Help —————————————————————————————————————————————————————————————————————————————————————————————
  # At most one section each of 'keys.normal', 'keys.insert' and 'keys.select'
  # g = { a = 'code_action' } # Maps `ga` to show possible code actions
  # Default commands @ github.com/helix-editor/helix/blob/master/helix-term/src/commands.rs at the invocation of static_commands! macro and the TypableCommandList
  # [keys.normal.g.l]
  # 'd' = 'cmd1'  # gld
  # 'r' = 'cmd2'  # glr
  # [keys.normal.z]
  # '$' = 'cmd1'  # z$

  # Key name          	Representation
  # Control Shift Alt 	'C-' 'S-' 'A-' # prefix-only
  # Escape            	'esc'
  # Backspace         	'backspace'
  # Space             	'space'
  # Return/Enter      	'ret'
  # < >               	'lt' 'gt'
  # + -               	'plus' 'minus'
  # ;                 	'semicolon'
  # %                 	'percent'
  # Left Right Up Down	'left' 'right' 'up' 'down'
  # Home End          	'home' 'end'
  # PageUp            	'pageup'
  # PageDown          	'pagedown'
  # Tab               	'tab'
  # Delete            	'del'
  # Insert            	'ins'
  # Null              	'null'
  # Keys can be disabled by binding them to the no_op command
